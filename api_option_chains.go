/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// OptionChainsAPIService OptionChainsAPI service
type OptionChainsAPIService service

type ApiGetChainRequest struct {
	ctx context.Context
	ApiService *OptionChainsAPIService
	symbol *string
	contractType *string
	strikeCount *int32
	includeUnderlyingQuote *bool
	strategy *string
	interval *float64
	strike *float64
	range_ *string
	fromDate *string
	toDate *string
	volatility *float64
	underlyingPrice *float64
	interestRate *float64
	daysToExpiration *int32
	expMonth *string
	optionType *string
	entitlement *string
}

// Enter one symbol
func (r ApiGetChainRequest) Symbol(symbol string) ApiGetChainRequest {
	r.symbol = &symbol
	return r
}

// Contract Type
func (r ApiGetChainRequest) ContractType(contractType string) ApiGetChainRequest {
	r.contractType = &contractType
	return r
}

// The Number of strikes to return above or below the at-the-money price
func (r ApiGetChainRequest) StrikeCount(strikeCount int32) ApiGetChainRequest {
	r.strikeCount = &strikeCount
	return r
}

// Underlying quotes to be included
func (r ApiGetChainRequest) IncludeUnderlyingQuote(includeUnderlyingQuote bool) ApiGetChainRequest {
	r.includeUnderlyingQuote = &includeUnderlyingQuote
	return r
}

// OptionChain strategy. Default is SINGLE. ANALYTICAL allows the use of volatility, underlyingPrice, interestRate, and daysToExpiration params to calculate theoretical values.
func (r ApiGetChainRequest) Strategy(strategy string) ApiGetChainRequest {
	r.strategy = &strategy
	return r
}

// Strike interval for spread strategy chains (see strategy param)
func (r ApiGetChainRequest) Interval(interval float64) ApiGetChainRequest {
	r.interval = &interval
	return r
}

// Strike Price
func (r ApiGetChainRequest) Strike(strike float64) ApiGetChainRequest {
	r.strike = &strike
	return r
}

// Range(ITM/NTM/OTM etc.)
func (r ApiGetChainRequest) Range_(range_ string) ApiGetChainRequest {
	r.range_ = &range_
	return r
}

// From date(pattern: yyyy-MM-dd)
func (r ApiGetChainRequest) FromDate(fromDate string) ApiGetChainRequest {
	r.fromDate = &fromDate
	return r
}

// To date (pattern: yyyy-MM-dd)
func (r ApiGetChainRequest) ToDate(toDate string) ApiGetChainRequest {
	r.toDate = &toDate
	return r
}

// Volatility to use in calculations.  Applies only to ANALYTICAL strategy chains (see strategy param)
func (r ApiGetChainRequest) Volatility(volatility float64) ApiGetChainRequest {
	r.volatility = &volatility
	return r
}

// Underlying price to use in calculations. Applies only to ANALYTICAL strategy chains (see strategy param)
func (r ApiGetChainRequest) UnderlyingPrice(underlyingPrice float64) ApiGetChainRequest {
	r.underlyingPrice = &underlyingPrice
	return r
}

// Interest rate to use in calculations. Applies only to ANALYTICAL strategy chains (see strategy param)
func (r ApiGetChainRequest) InterestRate(interestRate float64) ApiGetChainRequest {
	r.interestRate = &interestRate
	return r
}

// Days to expiration to use in calculations. Applies only to ANALYTICAL strategy chains (see strategy param)
func (r ApiGetChainRequest) DaysToExpiration(daysToExpiration int32) ApiGetChainRequest {
	r.daysToExpiration = &daysToExpiration
	return r
}

// Expiration month
func (r ApiGetChainRequest) ExpMonth(expMonth string) ApiGetChainRequest {
	r.expMonth = &expMonth
	return r
}

// Option Type
func (r ApiGetChainRequest) OptionType(optionType string) ApiGetChainRequest {
	r.optionType = &optionType
	return r
}

// Applicable only if its retail token, entitlement of client PP-PayingPro, NP-NonPro and PN-NonPayingPro
func (r ApiGetChainRequest) Entitlement(entitlement string) ApiGetChainRequest {
	r.entitlement = &entitlement
	return r
}

func (r ApiGetChainRequest) Execute() (*OptionChain, *http.Response, error) {
	return r.ApiService.GetChainExecute(r)
}

/*
GetChain Get option chain for an optionable Symbol

Get Option Chain including information on options contracts associated with each expiration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetChainRequest
*/
func (a *OptionChainsAPIService) GetChain(ctx context.Context) ApiGetChainRequest {
	return ApiGetChainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OptionChain
func (a *OptionChainsAPIService) GetChainExecute(r ApiGetChainRequest) (*OptionChain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OptionChain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OptionChainsAPIService.GetChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	if r.contractType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractType", r.contractType, "form", "")
	}
	if r.strikeCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "strikeCount", r.strikeCount, "form", "")
	}
	if r.includeUnderlyingQuote != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUnderlyingQuote", r.includeUnderlyingQuote, "form", "")
	}
	if r.strategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "strategy", r.strategy, "form", "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "form", "")
	}
	if r.strike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "strike", r.strike, "form", "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "form", "")
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "form", "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "form", "")
	}
	if r.volatility != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volatility", r.volatility, "form", "")
	}
	if r.underlyingPrice != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "underlyingPrice", r.underlyingPrice, "form", "")
	}
	if r.interestRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interestRate", r.interestRate, "form", "")
	}
	if r.daysToExpiration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daysToExpiration", r.daysToExpiration, "form", "")
	}
	if r.expMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expMonth", r.expMonth, "form", "")
	}
	if r.optionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "optionType", r.optionType, "form", "")
	}
	if r.entitlement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entitlement", r.entitlement, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
