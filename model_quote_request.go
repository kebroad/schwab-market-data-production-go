/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the QuoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteRequest{}

// QuoteRequest Request one or more quote data in POST body
type QuoteRequest struct {
	// List of cusip, max of 500 of symbols+cusip+ssids
	Cusips []string `json:"cusips,omitempty"`
	// comma separated list of nodes in each quote<br/> possible values are quote,fundamental,reference,extended,regular. Dont send this attribute for full response.
	Fields *string `json:"fields,omitempty"`
	// List of Schwab securityid[SSID], max of 500 of symbols+cusip+ssids
	Ssids []int64 `json:"ssids,omitempty"`
	// List of symbols, max of 500 of symbols+cusip+ssids
	Symbols []string `json:"symbols,omitempty"`
	// Get realtime quotes and skip entitlement check
	Realtime *bool `json:"realtime,omitempty"`
	// Include indicative symbol quotes for all ETF symbols in request. If ETF symbol ABC is in request and indicative=true API will return quotes for ABC and its corresponding indicative quote for $ABC.IV
	Indicative *bool `json:"indicative,omitempty"`
}

// NewQuoteRequest instantiates a new QuoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteRequest() *QuoteRequest {
	this := QuoteRequest{}
	return &this
}

// NewQuoteRequestWithDefaults instantiates a new QuoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteRequestWithDefaults() *QuoteRequest {
	this := QuoteRequest{}
	return &this
}

// GetCusips returns the Cusips field value if set, zero value otherwise.
func (o *QuoteRequest) GetCusips() []string {
	if o == nil || IsNil(o.Cusips) {
		var ret []string
		return ret
	}
	return o.Cusips
}

// GetCusipsOk returns a tuple with the Cusips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteRequest) GetCusipsOk() ([]string, bool) {
	if o == nil || IsNil(o.Cusips) {
		return nil, false
	}
	return o.Cusips, true
}

// HasCusips returns a boolean if a field has been set.
func (o *QuoteRequest) HasCusips() bool {
	if o != nil && !IsNil(o.Cusips) {
		return true
	}

	return false
}

// SetCusips gets a reference to the given []string and assigns it to the Cusips field.
func (o *QuoteRequest) SetCusips(v []string) {
	o.Cusips = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *QuoteRequest) GetFields() string {
	if o == nil || IsNil(o.Fields) {
		var ret string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteRequest) GetFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *QuoteRequest) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given string and assigns it to the Fields field.
func (o *QuoteRequest) SetFields(v string) {
	o.Fields = &v
}

// GetSsids returns the Ssids field value if set, zero value otherwise.
func (o *QuoteRequest) GetSsids() []int64 {
	if o == nil || IsNil(o.Ssids) {
		var ret []int64
		return ret
	}
	return o.Ssids
}

// GetSsidsOk returns a tuple with the Ssids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteRequest) GetSsidsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Ssids) {
		return nil, false
	}
	return o.Ssids, true
}

// HasSsids returns a boolean if a field has been set.
func (o *QuoteRequest) HasSsids() bool {
	if o != nil && !IsNil(o.Ssids) {
		return true
	}

	return false
}

// SetSsids gets a reference to the given []int64 and assigns it to the Ssids field.
func (o *QuoteRequest) SetSsids(v []int64) {
	o.Ssids = v
}

// GetSymbols returns the Symbols field value if set, zero value otherwise.
func (o *QuoteRequest) GetSymbols() []string {
	if o == nil || IsNil(o.Symbols) {
		var ret []string
		return ret
	}
	return o.Symbols
}

// GetSymbolsOk returns a tuple with the Symbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteRequest) GetSymbolsOk() ([]string, bool) {
	if o == nil || IsNil(o.Symbols) {
		return nil, false
	}
	return o.Symbols, true
}

// HasSymbols returns a boolean if a field has been set.
func (o *QuoteRequest) HasSymbols() bool {
	if o != nil && !IsNil(o.Symbols) {
		return true
	}

	return false
}

// SetSymbols gets a reference to the given []string and assigns it to the Symbols field.
func (o *QuoteRequest) SetSymbols(v []string) {
	o.Symbols = v
}

// GetRealtime returns the Realtime field value if set, zero value otherwise.
func (o *QuoteRequest) GetRealtime() bool {
	if o == nil || IsNil(o.Realtime) {
		var ret bool
		return ret
	}
	return *o.Realtime
}

// GetRealtimeOk returns a tuple with the Realtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteRequest) GetRealtimeOk() (*bool, bool) {
	if o == nil || IsNil(o.Realtime) {
		return nil, false
	}
	return o.Realtime, true
}

// HasRealtime returns a boolean if a field has been set.
func (o *QuoteRequest) HasRealtime() bool {
	if o != nil && !IsNil(o.Realtime) {
		return true
	}

	return false
}

// SetRealtime gets a reference to the given bool and assigns it to the Realtime field.
func (o *QuoteRequest) SetRealtime(v bool) {
	o.Realtime = &v
}

// GetIndicative returns the Indicative field value if set, zero value otherwise.
func (o *QuoteRequest) GetIndicative() bool {
	if o == nil || IsNil(o.Indicative) {
		var ret bool
		return ret
	}
	return *o.Indicative
}

// GetIndicativeOk returns a tuple with the Indicative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteRequest) GetIndicativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Indicative) {
		return nil, false
	}
	return o.Indicative, true
}

// HasIndicative returns a boolean if a field has been set.
func (o *QuoteRequest) HasIndicative() bool {
	if o != nil && !IsNil(o.Indicative) {
		return true
	}

	return false
}

// SetIndicative gets a reference to the given bool and assigns it to the Indicative field.
func (o *QuoteRequest) SetIndicative(v bool) {
	o.Indicative = &v
}

func (o QuoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cusips) {
		toSerialize["cusips"] = o.Cusips
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Ssids) {
		toSerialize["ssids"] = o.Ssids
	}
	if !IsNil(o.Symbols) {
		toSerialize["symbols"] = o.Symbols
	}
	if !IsNil(o.Realtime) {
		toSerialize["realtime"] = o.Realtime
	}
	if !IsNil(o.Indicative) {
		toSerialize["indicative"] = o.Indicative
	}
	return toSerialize, nil
}

type NullableQuoteRequest struct {
	value *QuoteRequest
	isSet bool
}

func (v NullableQuoteRequest) Get() *QuoteRequest {
	return v.value
}

func (v *NullableQuoteRequest) Set(val *QuoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteRequest(val *QuoteRequest) *NullableQuoteRequest {
	return &NullableQuoteRequest{value: val, isSet: true}
}

func (v NullableQuoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


