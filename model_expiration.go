/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Expiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Expiration{}

// Expiration expiration type
type Expiration struct {
	DaysToExpiration *int32 `json:"daysToExpiration,omitempty"`
	Expiration *string `json:"expiration,omitempty"`
	ExpirationType *ExpirationType `json:"expirationType,omitempty"`
	Standard *bool `json:"standard,omitempty"`
	SettlementType *SettlementType `json:"settlementType,omitempty"`
	OptionRoots *string `json:"optionRoots,omitempty"`
}

// NewExpiration instantiates a new Expiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpiration() *Expiration {
	this := Expiration{}
	return &this
}

// NewExpirationWithDefaults instantiates a new Expiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpirationWithDefaults() *Expiration {
	this := Expiration{}
	return &this
}

// GetDaysToExpiration returns the DaysToExpiration field value if set, zero value otherwise.
func (o *Expiration) GetDaysToExpiration() int32 {
	if o == nil || IsNil(o.DaysToExpiration) {
		var ret int32
		return ret
	}
	return *o.DaysToExpiration
}

// GetDaysToExpirationOk returns a tuple with the DaysToExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetDaysToExpirationOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysToExpiration) {
		return nil, false
	}
	return o.DaysToExpiration, true
}

// HasDaysToExpiration returns a boolean if a field has been set.
func (o *Expiration) HasDaysToExpiration() bool {
	if o != nil && !IsNil(o.DaysToExpiration) {
		return true
	}

	return false
}

// SetDaysToExpiration gets a reference to the given int32 and assigns it to the DaysToExpiration field.
func (o *Expiration) SetDaysToExpiration(v int32) {
	o.DaysToExpiration = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Expiration) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Expiration) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *Expiration) SetExpiration(v string) {
	o.Expiration = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *Expiration) GetExpirationType() ExpirationType {
	if o == nil || IsNil(o.ExpirationType) {
		var ret ExpirationType
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetExpirationTypeOk() (*ExpirationType, bool) {
	if o == nil || IsNil(o.ExpirationType) {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *Expiration) HasExpirationType() bool {
	if o != nil && !IsNil(o.ExpirationType) {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given ExpirationType and assigns it to the ExpirationType field.
func (o *Expiration) SetExpirationType(v ExpirationType) {
	o.ExpirationType = &v
}

// GetStandard returns the Standard field value if set, zero value otherwise.
func (o *Expiration) GetStandard() bool {
	if o == nil || IsNil(o.Standard) {
		var ret bool
		return ret
	}
	return *o.Standard
}

// GetStandardOk returns a tuple with the Standard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.Standard) {
		return nil, false
	}
	return o.Standard, true
}

// HasStandard returns a boolean if a field has been set.
func (o *Expiration) HasStandard() bool {
	if o != nil && !IsNil(o.Standard) {
		return true
	}

	return false
}

// SetStandard gets a reference to the given bool and assigns it to the Standard field.
func (o *Expiration) SetStandard(v bool) {
	o.Standard = &v
}

// GetSettlementType returns the SettlementType field value if set, zero value otherwise.
func (o *Expiration) GetSettlementType() SettlementType {
	if o == nil || IsNil(o.SettlementType) {
		var ret SettlementType
		return ret
	}
	return *o.SettlementType
}

// GetSettlementTypeOk returns a tuple with the SettlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetSettlementTypeOk() (*SettlementType, bool) {
	if o == nil || IsNil(o.SettlementType) {
		return nil, false
	}
	return o.SettlementType, true
}

// HasSettlementType returns a boolean if a field has been set.
func (o *Expiration) HasSettlementType() bool {
	if o != nil && !IsNil(o.SettlementType) {
		return true
	}

	return false
}

// SetSettlementType gets a reference to the given SettlementType and assigns it to the SettlementType field.
func (o *Expiration) SetSettlementType(v SettlementType) {
	o.SettlementType = &v
}

// GetOptionRoots returns the OptionRoots field value if set, zero value otherwise.
func (o *Expiration) GetOptionRoots() string {
	if o == nil || IsNil(o.OptionRoots) {
		var ret string
		return ret
	}
	return *o.OptionRoots
}

// GetOptionRootsOk returns a tuple with the OptionRoots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetOptionRootsOk() (*string, bool) {
	if o == nil || IsNil(o.OptionRoots) {
		return nil, false
	}
	return o.OptionRoots, true
}

// HasOptionRoots returns a boolean if a field has been set.
func (o *Expiration) HasOptionRoots() bool {
	if o != nil && !IsNil(o.OptionRoots) {
		return true
	}

	return false
}

// SetOptionRoots gets a reference to the given string and assigns it to the OptionRoots field.
func (o *Expiration) SetOptionRoots(v string) {
	o.OptionRoots = &v
}

func (o Expiration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Expiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaysToExpiration) {
		toSerialize["daysToExpiration"] = o.DaysToExpiration
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.ExpirationType) {
		toSerialize["expirationType"] = o.ExpirationType
	}
	if !IsNil(o.Standard) {
		toSerialize["standard"] = o.Standard
	}
	if !IsNil(o.SettlementType) {
		toSerialize["settlementType"] = o.SettlementType
	}
	if !IsNil(o.OptionRoots) {
		toSerialize["optionRoots"] = o.OptionRoots
	}
	return toSerialize, nil
}

type NullableExpiration struct {
	value *Expiration
	isSet bool
}

func (v NullableExpiration) Get() *Expiration {
	return v.value
}

func (v *NullableExpiration) Set(val *Expiration) {
	v.value = val
	v.isSet = true
}

func (v NullableExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpiration(val *Expiration) *NullableExpiration {
	return &NullableExpiration{value: val, isSet: true}
}

func (v NullableExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


