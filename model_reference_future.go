/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ReferenceFuture type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceFuture{}

// ReferenceFuture Reference data of Future security
type ReferenceFuture struct {
	// Description of Instrument
	Description *string `json:"description,omitempty"`
	// Exchange Code
	Exchange *string `json:"exchange,omitempty"`
	// Exchange Name
	ExchangeName *string `json:"exchangeName,omitempty"`
	// Active symbol
	FutureActiveSymbol *string `json:"futureActiveSymbol,omitempty"`
	// Future expiration date in milliseconds since epoch
	FutureExpirationDate *float32 `json:"futureExpirationDate,omitempty"`
	// Future is active
	FutureIsActive *bool `json:"futureIsActive,omitempty"`
	// Future multiplier
	FutureMultiplier *float64 `json:"futureMultiplier,omitempty"`
	// Price format
	FuturePriceFormat *string `json:"futurePriceFormat,omitempty"`
	// Future Settlement Price
	FutureSettlementPrice *float64 `json:"futureSettlementPrice,omitempty"`
	// Trading Hours
	FutureTradingHours *string `json:"futureTradingHours,omitempty"`
	// Futures product symbol
	Product *string `json:"product,omitempty"`
}

// NewReferenceFuture instantiates a new ReferenceFuture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceFuture() *ReferenceFuture {
	this := ReferenceFuture{}
	return &this
}

// NewReferenceFutureWithDefaults instantiates a new ReferenceFuture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceFutureWithDefaults() *ReferenceFuture {
	this := ReferenceFuture{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReferenceFuture) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReferenceFuture) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReferenceFuture) SetDescription(v string) {
	o.Description = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *ReferenceFuture) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *ReferenceFuture) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *ReferenceFuture) SetExchange(v string) {
	o.Exchange = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *ReferenceFuture) GetExchangeName() string {
	if o == nil || IsNil(o.ExchangeName) {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetExchangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeName) {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *ReferenceFuture) HasExchangeName() bool {
	if o != nil && !IsNil(o.ExchangeName) {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *ReferenceFuture) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetFutureActiveSymbol returns the FutureActiveSymbol field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFutureActiveSymbol() string {
	if o == nil || IsNil(o.FutureActiveSymbol) {
		var ret string
		return ret
	}
	return *o.FutureActiveSymbol
}

// GetFutureActiveSymbolOk returns a tuple with the FutureActiveSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFutureActiveSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.FutureActiveSymbol) {
		return nil, false
	}
	return o.FutureActiveSymbol, true
}

// HasFutureActiveSymbol returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFutureActiveSymbol() bool {
	if o != nil && !IsNil(o.FutureActiveSymbol) {
		return true
	}

	return false
}

// SetFutureActiveSymbol gets a reference to the given string and assigns it to the FutureActiveSymbol field.
func (o *ReferenceFuture) SetFutureActiveSymbol(v string) {
	o.FutureActiveSymbol = &v
}

// GetFutureExpirationDate returns the FutureExpirationDate field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFutureExpirationDate() float32 {
	if o == nil || IsNil(o.FutureExpirationDate) {
		var ret float32
		return ret
	}
	return *o.FutureExpirationDate
}

// GetFutureExpirationDateOk returns a tuple with the FutureExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFutureExpirationDateOk() (*float32, bool) {
	if o == nil || IsNil(o.FutureExpirationDate) {
		return nil, false
	}
	return o.FutureExpirationDate, true
}

// HasFutureExpirationDate returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFutureExpirationDate() bool {
	if o != nil && !IsNil(o.FutureExpirationDate) {
		return true
	}

	return false
}

// SetFutureExpirationDate gets a reference to the given float32 and assigns it to the FutureExpirationDate field.
func (o *ReferenceFuture) SetFutureExpirationDate(v float32) {
	o.FutureExpirationDate = &v
}

// GetFutureIsActive returns the FutureIsActive field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFutureIsActive() bool {
	if o == nil || IsNil(o.FutureIsActive) {
		var ret bool
		return ret
	}
	return *o.FutureIsActive
}

// GetFutureIsActiveOk returns a tuple with the FutureIsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFutureIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.FutureIsActive) {
		return nil, false
	}
	return o.FutureIsActive, true
}

// HasFutureIsActive returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFutureIsActive() bool {
	if o != nil && !IsNil(o.FutureIsActive) {
		return true
	}

	return false
}

// SetFutureIsActive gets a reference to the given bool and assigns it to the FutureIsActive field.
func (o *ReferenceFuture) SetFutureIsActive(v bool) {
	o.FutureIsActive = &v
}

// GetFutureMultiplier returns the FutureMultiplier field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFutureMultiplier() float64 {
	if o == nil || IsNil(o.FutureMultiplier) {
		var ret float64
		return ret
	}
	return *o.FutureMultiplier
}

// GetFutureMultiplierOk returns a tuple with the FutureMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFutureMultiplierOk() (*float64, bool) {
	if o == nil || IsNil(o.FutureMultiplier) {
		return nil, false
	}
	return o.FutureMultiplier, true
}

// HasFutureMultiplier returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFutureMultiplier() bool {
	if o != nil && !IsNil(o.FutureMultiplier) {
		return true
	}

	return false
}

// SetFutureMultiplier gets a reference to the given float64 and assigns it to the FutureMultiplier field.
func (o *ReferenceFuture) SetFutureMultiplier(v float64) {
	o.FutureMultiplier = &v
}

// GetFuturePriceFormat returns the FuturePriceFormat field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFuturePriceFormat() string {
	if o == nil || IsNil(o.FuturePriceFormat) {
		var ret string
		return ret
	}
	return *o.FuturePriceFormat
}

// GetFuturePriceFormatOk returns a tuple with the FuturePriceFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFuturePriceFormatOk() (*string, bool) {
	if o == nil || IsNil(o.FuturePriceFormat) {
		return nil, false
	}
	return o.FuturePriceFormat, true
}

// HasFuturePriceFormat returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFuturePriceFormat() bool {
	if o != nil && !IsNil(o.FuturePriceFormat) {
		return true
	}

	return false
}

// SetFuturePriceFormat gets a reference to the given string and assigns it to the FuturePriceFormat field.
func (o *ReferenceFuture) SetFuturePriceFormat(v string) {
	o.FuturePriceFormat = &v
}

// GetFutureSettlementPrice returns the FutureSettlementPrice field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFutureSettlementPrice() float64 {
	if o == nil || IsNil(o.FutureSettlementPrice) {
		var ret float64
		return ret
	}
	return *o.FutureSettlementPrice
}

// GetFutureSettlementPriceOk returns a tuple with the FutureSettlementPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFutureSettlementPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.FutureSettlementPrice) {
		return nil, false
	}
	return o.FutureSettlementPrice, true
}

// HasFutureSettlementPrice returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFutureSettlementPrice() bool {
	if o != nil && !IsNil(o.FutureSettlementPrice) {
		return true
	}

	return false
}

// SetFutureSettlementPrice gets a reference to the given float64 and assigns it to the FutureSettlementPrice field.
func (o *ReferenceFuture) SetFutureSettlementPrice(v float64) {
	o.FutureSettlementPrice = &v
}

// GetFutureTradingHours returns the FutureTradingHours field value if set, zero value otherwise.
func (o *ReferenceFuture) GetFutureTradingHours() string {
	if o == nil || IsNil(o.FutureTradingHours) {
		var ret string
		return ret
	}
	return *o.FutureTradingHours
}

// GetFutureTradingHoursOk returns a tuple with the FutureTradingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetFutureTradingHoursOk() (*string, bool) {
	if o == nil || IsNil(o.FutureTradingHours) {
		return nil, false
	}
	return o.FutureTradingHours, true
}

// HasFutureTradingHours returns a boolean if a field has been set.
func (o *ReferenceFuture) HasFutureTradingHours() bool {
	if o != nil && !IsNil(o.FutureTradingHours) {
		return true
	}

	return false
}

// SetFutureTradingHours gets a reference to the given string and assigns it to the FutureTradingHours field.
func (o *ReferenceFuture) SetFutureTradingHours(v string) {
	o.FutureTradingHours = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *ReferenceFuture) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceFuture) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *ReferenceFuture) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *ReferenceFuture) SetProduct(v string) {
	o.Product = &v
}

func (o ReferenceFuture) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceFuture) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.ExchangeName) {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if !IsNil(o.FutureActiveSymbol) {
		toSerialize["futureActiveSymbol"] = o.FutureActiveSymbol
	}
	if !IsNil(o.FutureExpirationDate) {
		toSerialize["futureExpirationDate"] = o.FutureExpirationDate
	}
	if !IsNil(o.FutureIsActive) {
		toSerialize["futureIsActive"] = o.FutureIsActive
	}
	if !IsNil(o.FutureMultiplier) {
		toSerialize["futureMultiplier"] = o.FutureMultiplier
	}
	if !IsNil(o.FuturePriceFormat) {
		toSerialize["futurePriceFormat"] = o.FuturePriceFormat
	}
	if !IsNil(o.FutureSettlementPrice) {
		toSerialize["futureSettlementPrice"] = o.FutureSettlementPrice
	}
	if !IsNil(o.FutureTradingHours) {
		toSerialize["futureTradingHours"] = o.FutureTradingHours
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableReferenceFuture struct {
	value *ReferenceFuture
	isSet bool
}

func (v NullableReferenceFuture) Get() *ReferenceFuture {
	return v.value
}

func (v *NullableReferenceFuture) Set(val *ReferenceFuture) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceFuture) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceFuture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceFuture(val *ReferenceFuture) *NullableReferenceFuture {
	return &NullableReferenceFuture{value: val, isSet: true}
}

func (v NullableReferenceFuture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceFuture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


