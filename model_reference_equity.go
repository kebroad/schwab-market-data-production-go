/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ReferenceEquity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceEquity{}

// ReferenceEquity Reference data of Equity security
type ReferenceEquity struct {
	// CUSIP of Instrument
	Cusip *string `json:"cusip,omitempty"`
	// Description of Instrument
	Description *string `json:"description,omitempty"`
	// Exchange Code
	Exchange *string `json:"exchange,omitempty"`
	// Exchange Name
	ExchangeName *string `json:"exchangeName,omitempty"`
	// FSI Desc
	FsiDesc *string `json:"fsiDesc,omitempty"`
	// Hard to borrow quantity.
	HtbQuantity *int32 `json:"htbQuantity,omitempty"`
	// Hard to borrow rate.
	HtbRate *float64 `json:"htbRate,omitempty"`
	// is Hard to borrow security.
	IsHardToBorrow *bool `json:"isHardToBorrow,omitempty"`
	// is shortable security.
	IsShortable *bool `json:"isShortable,omitempty"`
	// OTC Market Tier
	OtcMarketTier *string `json:"otcMarketTier,omitempty"`
}

// NewReferenceEquity instantiates a new ReferenceEquity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceEquity() *ReferenceEquity {
	this := ReferenceEquity{}
	return &this
}

// NewReferenceEquityWithDefaults instantiates a new ReferenceEquity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceEquityWithDefaults() *ReferenceEquity {
	this := ReferenceEquity{}
	return &this
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *ReferenceEquity) GetCusip() string {
	if o == nil || IsNil(o.Cusip) {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetCusipOk() (*string, bool) {
	if o == nil || IsNil(o.Cusip) {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *ReferenceEquity) HasCusip() bool {
	if o != nil && !IsNil(o.Cusip) {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *ReferenceEquity) SetCusip(v string) {
	o.Cusip = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReferenceEquity) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReferenceEquity) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReferenceEquity) SetDescription(v string) {
	o.Description = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *ReferenceEquity) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *ReferenceEquity) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *ReferenceEquity) SetExchange(v string) {
	o.Exchange = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *ReferenceEquity) GetExchangeName() string {
	if o == nil || IsNil(o.ExchangeName) {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetExchangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeName) {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *ReferenceEquity) HasExchangeName() bool {
	if o != nil && !IsNil(o.ExchangeName) {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *ReferenceEquity) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetFsiDesc returns the FsiDesc field value if set, zero value otherwise.
func (o *ReferenceEquity) GetFsiDesc() string {
	if o == nil || IsNil(o.FsiDesc) {
		var ret string
		return ret
	}
	return *o.FsiDesc
}

// GetFsiDescOk returns a tuple with the FsiDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetFsiDescOk() (*string, bool) {
	if o == nil || IsNil(o.FsiDesc) {
		return nil, false
	}
	return o.FsiDesc, true
}

// HasFsiDesc returns a boolean if a field has been set.
func (o *ReferenceEquity) HasFsiDesc() bool {
	if o != nil && !IsNil(o.FsiDesc) {
		return true
	}

	return false
}

// SetFsiDesc gets a reference to the given string and assigns it to the FsiDesc field.
func (o *ReferenceEquity) SetFsiDesc(v string) {
	o.FsiDesc = &v
}

// GetHtbQuantity returns the HtbQuantity field value if set, zero value otherwise.
func (o *ReferenceEquity) GetHtbQuantity() int32 {
	if o == nil || IsNil(o.HtbQuantity) {
		var ret int32
		return ret
	}
	return *o.HtbQuantity
}

// GetHtbQuantityOk returns a tuple with the HtbQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetHtbQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.HtbQuantity) {
		return nil, false
	}
	return o.HtbQuantity, true
}

// HasHtbQuantity returns a boolean if a field has been set.
func (o *ReferenceEquity) HasHtbQuantity() bool {
	if o != nil && !IsNil(o.HtbQuantity) {
		return true
	}

	return false
}

// SetHtbQuantity gets a reference to the given int32 and assigns it to the HtbQuantity field.
func (o *ReferenceEquity) SetHtbQuantity(v int32) {
	o.HtbQuantity = &v
}

// GetHtbRate returns the HtbRate field value if set, zero value otherwise.
func (o *ReferenceEquity) GetHtbRate() float64 {
	if o == nil || IsNil(o.HtbRate) {
		var ret float64
		return ret
	}
	return *o.HtbRate
}

// GetHtbRateOk returns a tuple with the HtbRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetHtbRateOk() (*float64, bool) {
	if o == nil || IsNil(o.HtbRate) {
		return nil, false
	}
	return o.HtbRate, true
}

// HasHtbRate returns a boolean if a field has been set.
func (o *ReferenceEquity) HasHtbRate() bool {
	if o != nil && !IsNil(o.HtbRate) {
		return true
	}

	return false
}

// SetHtbRate gets a reference to the given float64 and assigns it to the HtbRate field.
func (o *ReferenceEquity) SetHtbRate(v float64) {
	o.HtbRate = &v
}

// GetIsHardToBorrow returns the IsHardToBorrow field value if set, zero value otherwise.
func (o *ReferenceEquity) GetIsHardToBorrow() bool {
	if o == nil || IsNil(o.IsHardToBorrow) {
		var ret bool
		return ret
	}
	return *o.IsHardToBorrow
}

// GetIsHardToBorrowOk returns a tuple with the IsHardToBorrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetIsHardToBorrowOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHardToBorrow) {
		return nil, false
	}
	return o.IsHardToBorrow, true
}

// HasIsHardToBorrow returns a boolean if a field has been set.
func (o *ReferenceEquity) HasIsHardToBorrow() bool {
	if o != nil && !IsNil(o.IsHardToBorrow) {
		return true
	}

	return false
}

// SetIsHardToBorrow gets a reference to the given bool and assigns it to the IsHardToBorrow field.
func (o *ReferenceEquity) SetIsHardToBorrow(v bool) {
	o.IsHardToBorrow = &v
}

// GetIsShortable returns the IsShortable field value if set, zero value otherwise.
func (o *ReferenceEquity) GetIsShortable() bool {
	if o == nil || IsNil(o.IsShortable) {
		var ret bool
		return ret
	}
	return *o.IsShortable
}

// GetIsShortableOk returns a tuple with the IsShortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetIsShortableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsShortable) {
		return nil, false
	}
	return o.IsShortable, true
}

// HasIsShortable returns a boolean if a field has been set.
func (o *ReferenceEquity) HasIsShortable() bool {
	if o != nil && !IsNil(o.IsShortable) {
		return true
	}

	return false
}

// SetIsShortable gets a reference to the given bool and assigns it to the IsShortable field.
func (o *ReferenceEquity) SetIsShortable(v bool) {
	o.IsShortable = &v
}

// GetOtcMarketTier returns the OtcMarketTier field value if set, zero value otherwise.
func (o *ReferenceEquity) GetOtcMarketTier() string {
	if o == nil || IsNil(o.OtcMarketTier) {
		var ret string
		return ret
	}
	return *o.OtcMarketTier
}

// GetOtcMarketTierOk returns a tuple with the OtcMarketTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceEquity) GetOtcMarketTierOk() (*string, bool) {
	if o == nil || IsNil(o.OtcMarketTier) {
		return nil, false
	}
	return o.OtcMarketTier, true
}

// HasOtcMarketTier returns a boolean if a field has been set.
func (o *ReferenceEquity) HasOtcMarketTier() bool {
	if o != nil && !IsNil(o.OtcMarketTier) {
		return true
	}

	return false
}

// SetOtcMarketTier gets a reference to the given string and assigns it to the OtcMarketTier field.
func (o *ReferenceEquity) SetOtcMarketTier(v string) {
	o.OtcMarketTier = &v
}

func (o ReferenceEquity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceEquity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cusip) {
		toSerialize["cusip"] = o.Cusip
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.ExchangeName) {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if !IsNil(o.FsiDesc) {
		toSerialize["fsiDesc"] = o.FsiDesc
	}
	if !IsNil(o.HtbQuantity) {
		toSerialize["htbQuantity"] = o.HtbQuantity
	}
	if !IsNil(o.HtbRate) {
		toSerialize["htbRate"] = o.HtbRate
	}
	if !IsNil(o.IsHardToBorrow) {
		toSerialize["isHardToBorrow"] = o.IsHardToBorrow
	}
	if !IsNil(o.IsShortable) {
		toSerialize["isShortable"] = o.IsShortable
	}
	if !IsNil(o.OtcMarketTier) {
		toSerialize["otcMarketTier"] = o.OtcMarketTier
	}
	return toSerialize, nil
}

type NullableReferenceEquity struct {
	value *ReferenceEquity
	isSet bool
}

func (v NullableReferenceEquity) Get() *ReferenceEquity {
	return v.value
}

func (v *NullableReferenceEquity) Set(val *ReferenceEquity) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceEquity) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceEquity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceEquity(val *ReferenceEquity) *NullableReferenceEquity {
	return &NullableReferenceEquity{value: val, isSet: true}
}

func (v NullableReferenceEquity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceEquity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


