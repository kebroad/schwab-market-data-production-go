/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Candle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Candle{}

// Candle struct for Candle
type Candle struct {
	Close *float64 `json:"close,omitempty"`
	Datetime *int64 `json:"datetime,omitempty"`
	DatetimeISO8601 *string `json:"datetimeISO8601,omitempty"`
	High *float64 `json:"high,omitempty"`
	Low *float64 `json:"low,omitempty"`
	Open *float64 `json:"open,omitempty"`
	Volume *int64 `json:"volume,omitempty"`
}

// NewCandle instantiates a new Candle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandle() *Candle {
	this := Candle{}
	return &this
}

// NewCandleWithDefaults instantiates a new Candle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandleWithDefaults() *Candle {
	this := Candle{}
	return &this
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *Candle) GetClose() float64 {
	if o == nil || IsNil(o.Close) {
		var ret float64
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetCloseOk() (*float64, bool) {
	if o == nil || IsNil(o.Close) {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *Candle) HasClose() bool {
	if o != nil && !IsNil(o.Close) {
		return true
	}

	return false
}

// SetClose gets a reference to the given float64 and assigns it to the Close field.
func (o *Candle) SetClose(v float64) {
	o.Close = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *Candle) GetDatetime() int64 {
	if o == nil || IsNil(o.Datetime) {
		var ret int64
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetDatetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Datetime) {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *Candle) HasDatetime() bool {
	if o != nil && !IsNil(o.Datetime) {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given int64 and assigns it to the Datetime field.
func (o *Candle) SetDatetime(v int64) {
	o.Datetime = &v
}

// GetDatetimeISO8601 returns the DatetimeISO8601 field value if set, zero value otherwise.
func (o *Candle) GetDatetimeISO8601() string {
	if o == nil || IsNil(o.DatetimeISO8601) {
		var ret string
		return ret
	}
	return *o.DatetimeISO8601
}

// GetDatetimeISO8601Ok returns a tuple with the DatetimeISO8601 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetDatetimeISO8601Ok() (*string, bool) {
	if o == nil || IsNil(o.DatetimeISO8601) {
		return nil, false
	}
	return o.DatetimeISO8601, true
}

// HasDatetimeISO8601 returns a boolean if a field has been set.
func (o *Candle) HasDatetimeISO8601() bool {
	if o != nil && !IsNil(o.DatetimeISO8601) {
		return true
	}

	return false
}

// SetDatetimeISO8601 gets a reference to the given string and assigns it to the DatetimeISO8601 field.
func (o *Candle) SetDatetimeISO8601(v string) {
	o.DatetimeISO8601 = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *Candle) GetHigh() float64 {
	if o == nil || IsNil(o.High) {
		var ret float64
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetHighOk() (*float64, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *Candle) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float64 and assigns it to the High field.
func (o *Candle) SetHigh(v float64) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *Candle) GetLow() float64 {
	if o == nil || IsNil(o.Low) {
		var ret float64
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetLowOk() (*float64, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *Candle) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given float64 and assigns it to the Low field.
func (o *Candle) SetLow(v float64) {
	o.Low = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *Candle) GetOpen() float64 {
	if o == nil || IsNil(o.Open) {
		var ret float64
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetOpenOk() (*float64, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *Candle) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given float64 and assigns it to the Open field.
func (o *Candle) SetOpen(v float64) {
	o.Open = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *Candle) GetVolume() int64 {
	if o == nil || IsNil(o.Volume) {
		var ret int64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Candle) GetVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *Candle) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given int64 and assigns it to the Volume field.
func (o *Candle) SetVolume(v int64) {
	o.Volume = &v
}

func (o Candle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Candle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Close) {
		toSerialize["close"] = o.Close
	}
	if !IsNil(o.Datetime) {
		toSerialize["datetime"] = o.Datetime
	}
	if !IsNil(o.DatetimeISO8601) {
		toSerialize["datetimeISO8601"] = o.DatetimeISO8601
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableCandle struct {
	value *Candle
	isSet bool
}

func (v NullableCandle) Get() *Candle {
	return v.value
}

func (v *NullableCandle) Set(val *Candle) {
	v.value = val
	v.isSet = true
}

func (v NullableCandle) IsSet() bool {
	return v.isSet
}

func (v *NullableCandle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandle(val *Candle) *NullableCandle {
	return &NullableCandle{value: val, isSet: true}
}

func (v NullableCandle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


