/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// QuoteType NBBO - realtime, NFL - Non-fee liable quote.
type QuoteType string

// List of QuoteType
const (
	QUOTETYPE_NBBO QuoteType = "NBBO"
	QUOTETYPE_NFL QuoteType = "NFL"
)

// All allowed values of QuoteType enum
var AllowedQuoteTypeEnumValues = []QuoteType{
	"NBBO",
	"NFL",
}

func (v *QuoteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QuoteType(value)
	for _, existing := range AllowedQuoteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QuoteType", value)
}

// NewQuoteTypeFromValue returns a pointer to a valid QuoteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQuoteTypeFromValue(v string) (*QuoteType, error) {
	ev := QuoteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QuoteType: valid values are %v", v, AllowedQuoteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QuoteType) IsValid() bool {
	for _, existing := range AllowedQuoteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QuoteType value
func (v QuoteType) Ptr() *QuoteType {
	return &v
}

type NullableQuoteType struct {
	value *QuoteType
	isSet bool
}

func (v NullableQuoteType) Get() *QuoteType {
	return v.value
}

func (v *NullableQuoteType) Set(val *QuoteType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteType(val *QuoteType) *NullableQuoteType {
	return &NullableQuoteType{value: val, isSet: true}
}

func (v NullableQuoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

