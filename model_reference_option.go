/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ReferenceOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceOption{}

// ReferenceOption Reference data of Option security
type ReferenceOption struct {
	ContractType *ContractType `json:"contractType,omitempty"`
	// CUSIP of Instrument
	Cusip *string `json:"cusip,omitempty"`
	// Days to Expiration
	DaysToExpiration *int32 `json:"daysToExpiration,omitempty"`
	// Unit of trade
	Deliverables *string `json:"deliverables,omitempty"`
	// Description of Instrument
	Description *string `json:"description,omitempty"`
	// Exchange Code
	Exchange *string `json:"exchange,omitempty"`
	// Exchange Name
	ExchangeName *string `json:"exchangeName,omitempty"`
	ExerciseType *ExerciseType `json:"exerciseType,omitempty"`
	// Expiration Day
	ExpirationDay *int32 `json:"expirationDay,omitempty"`
	// Expiration Month
	ExpirationMonth *int32 `json:"expirationMonth,omitempty"`
	ExpirationType *ExpirationType `json:"expirationType,omitempty"`
	// Expiration Year
	ExpirationYear *int32 `json:"expirationYear,omitempty"`
	// Is this contract part of the Penny Pilot program
	IsPennyPilot *bool `json:"isPennyPilot,omitempty"`
	// milliseconds since epoch
	LastTradingDay *int64 `json:"lastTradingDay,omitempty"`
	// Option multiplier
	Multiplier *float64 `json:"multiplier,omitempty"`
	SettlementType *SettlementType `json:"settlementType,omitempty"`
	// Strike Price
	StrikePrice *float64 `json:"strikePrice,omitempty"`
	// A company, index or fund name
	Underlying *string `json:"underlying,omitempty"`
}

// NewReferenceOption instantiates a new ReferenceOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceOption() *ReferenceOption {
	this := ReferenceOption{}
	var exchange string = "o"
	this.Exchange = &exchange
	return &this
}

// NewReferenceOptionWithDefaults instantiates a new ReferenceOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceOptionWithDefaults() *ReferenceOption {
	this := ReferenceOption{}
	var exchange string = "o"
	this.Exchange = &exchange
	return &this
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *ReferenceOption) GetContractType() ContractType {
	if o == nil || IsNil(o.ContractType) {
		var ret ContractType
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetContractTypeOk() (*ContractType, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *ReferenceOption) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given ContractType and assigns it to the ContractType field.
func (o *ReferenceOption) SetContractType(v ContractType) {
	o.ContractType = &v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *ReferenceOption) GetCusip() string {
	if o == nil || IsNil(o.Cusip) {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetCusipOk() (*string, bool) {
	if o == nil || IsNil(o.Cusip) {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *ReferenceOption) HasCusip() bool {
	if o != nil && !IsNil(o.Cusip) {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *ReferenceOption) SetCusip(v string) {
	o.Cusip = &v
}

// GetDaysToExpiration returns the DaysToExpiration field value if set, zero value otherwise.
func (o *ReferenceOption) GetDaysToExpiration() int32 {
	if o == nil || IsNil(o.DaysToExpiration) {
		var ret int32
		return ret
	}
	return *o.DaysToExpiration
}

// GetDaysToExpirationOk returns a tuple with the DaysToExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetDaysToExpirationOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysToExpiration) {
		return nil, false
	}
	return o.DaysToExpiration, true
}

// HasDaysToExpiration returns a boolean if a field has been set.
func (o *ReferenceOption) HasDaysToExpiration() bool {
	if o != nil && !IsNil(o.DaysToExpiration) {
		return true
	}

	return false
}

// SetDaysToExpiration gets a reference to the given int32 and assigns it to the DaysToExpiration field.
func (o *ReferenceOption) SetDaysToExpiration(v int32) {
	o.DaysToExpiration = &v
}

// GetDeliverables returns the Deliverables field value if set, zero value otherwise.
func (o *ReferenceOption) GetDeliverables() string {
	if o == nil || IsNil(o.Deliverables) {
		var ret string
		return ret
	}
	return *o.Deliverables
}

// GetDeliverablesOk returns a tuple with the Deliverables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetDeliverablesOk() (*string, bool) {
	if o == nil || IsNil(o.Deliverables) {
		return nil, false
	}
	return o.Deliverables, true
}

// HasDeliverables returns a boolean if a field has been set.
func (o *ReferenceOption) HasDeliverables() bool {
	if o != nil && !IsNil(o.Deliverables) {
		return true
	}

	return false
}

// SetDeliverables gets a reference to the given string and assigns it to the Deliverables field.
func (o *ReferenceOption) SetDeliverables(v string) {
	o.Deliverables = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReferenceOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReferenceOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReferenceOption) SetDescription(v string) {
	o.Description = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *ReferenceOption) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *ReferenceOption) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *ReferenceOption) SetExchange(v string) {
	o.Exchange = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *ReferenceOption) GetExchangeName() string {
	if o == nil || IsNil(o.ExchangeName) {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExchangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeName) {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *ReferenceOption) HasExchangeName() bool {
	if o != nil && !IsNil(o.ExchangeName) {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *ReferenceOption) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetExerciseType returns the ExerciseType field value if set, zero value otherwise.
func (o *ReferenceOption) GetExerciseType() ExerciseType {
	if o == nil || IsNil(o.ExerciseType) {
		var ret ExerciseType
		return ret
	}
	return *o.ExerciseType
}

// GetExerciseTypeOk returns a tuple with the ExerciseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExerciseTypeOk() (*ExerciseType, bool) {
	if o == nil || IsNil(o.ExerciseType) {
		return nil, false
	}
	return o.ExerciseType, true
}

// HasExerciseType returns a boolean if a field has been set.
func (o *ReferenceOption) HasExerciseType() bool {
	if o != nil && !IsNil(o.ExerciseType) {
		return true
	}

	return false
}

// SetExerciseType gets a reference to the given ExerciseType and assigns it to the ExerciseType field.
func (o *ReferenceOption) SetExerciseType(v ExerciseType) {
	o.ExerciseType = &v
}

// GetExpirationDay returns the ExpirationDay field value if set, zero value otherwise.
func (o *ReferenceOption) GetExpirationDay() int32 {
	if o == nil || IsNil(o.ExpirationDay) {
		var ret int32
		return ret
	}
	return *o.ExpirationDay
}

// GetExpirationDayOk returns a tuple with the ExpirationDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExpirationDayOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpirationDay) {
		return nil, false
	}
	return o.ExpirationDay, true
}

// HasExpirationDay returns a boolean if a field has been set.
func (o *ReferenceOption) HasExpirationDay() bool {
	if o != nil && !IsNil(o.ExpirationDay) {
		return true
	}

	return false
}

// SetExpirationDay gets a reference to the given int32 and assigns it to the ExpirationDay field.
func (o *ReferenceOption) SetExpirationDay(v int32) {
	o.ExpirationDay = &v
}

// GetExpirationMonth returns the ExpirationMonth field value if set, zero value otherwise.
func (o *ReferenceOption) GetExpirationMonth() int32 {
	if o == nil || IsNil(o.ExpirationMonth) {
		var ret int32
		return ret
	}
	return *o.ExpirationMonth
}

// GetExpirationMonthOk returns a tuple with the ExpirationMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExpirationMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpirationMonth) {
		return nil, false
	}
	return o.ExpirationMonth, true
}

// HasExpirationMonth returns a boolean if a field has been set.
func (o *ReferenceOption) HasExpirationMonth() bool {
	if o != nil && !IsNil(o.ExpirationMonth) {
		return true
	}

	return false
}

// SetExpirationMonth gets a reference to the given int32 and assigns it to the ExpirationMonth field.
func (o *ReferenceOption) SetExpirationMonth(v int32) {
	o.ExpirationMonth = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *ReferenceOption) GetExpirationType() ExpirationType {
	if o == nil || IsNil(o.ExpirationType) {
		var ret ExpirationType
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExpirationTypeOk() (*ExpirationType, bool) {
	if o == nil || IsNil(o.ExpirationType) {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *ReferenceOption) HasExpirationType() bool {
	if o != nil && !IsNil(o.ExpirationType) {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given ExpirationType and assigns it to the ExpirationType field.
func (o *ReferenceOption) SetExpirationType(v ExpirationType) {
	o.ExpirationType = &v
}

// GetExpirationYear returns the ExpirationYear field value if set, zero value otherwise.
func (o *ReferenceOption) GetExpirationYear() int32 {
	if o == nil || IsNil(o.ExpirationYear) {
		var ret int32
		return ret
	}
	return *o.ExpirationYear
}

// GetExpirationYearOk returns a tuple with the ExpirationYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetExpirationYearOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpirationYear) {
		return nil, false
	}
	return o.ExpirationYear, true
}

// HasExpirationYear returns a boolean if a field has been set.
func (o *ReferenceOption) HasExpirationYear() bool {
	if o != nil && !IsNil(o.ExpirationYear) {
		return true
	}

	return false
}

// SetExpirationYear gets a reference to the given int32 and assigns it to the ExpirationYear field.
func (o *ReferenceOption) SetExpirationYear(v int32) {
	o.ExpirationYear = &v
}

// GetIsPennyPilot returns the IsPennyPilot field value if set, zero value otherwise.
func (o *ReferenceOption) GetIsPennyPilot() bool {
	if o == nil || IsNil(o.IsPennyPilot) {
		var ret bool
		return ret
	}
	return *o.IsPennyPilot
}

// GetIsPennyPilotOk returns a tuple with the IsPennyPilot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetIsPennyPilotOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPennyPilot) {
		return nil, false
	}
	return o.IsPennyPilot, true
}

// HasIsPennyPilot returns a boolean if a field has been set.
func (o *ReferenceOption) HasIsPennyPilot() bool {
	if o != nil && !IsNil(o.IsPennyPilot) {
		return true
	}

	return false
}

// SetIsPennyPilot gets a reference to the given bool and assigns it to the IsPennyPilot field.
func (o *ReferenceOption) SetIsPennyPilot(v bool) {
	o.IsPennyPilot = &v
}

// GetLastTradingDay returns the LastTradingDay field value if set, zero value otherwise.
func (o *ReferenceOption) GetLastTradingDay() int64 {
	if o == nil || IsNil(o.LastTradingDay) {
		var ret int64
		return ret
	}
	return *o.LastTradingDay
}

// GetLastTradingDayOk returns a tuple with the LastTradingDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetLastTradingDayOk() (*int64, bool) {
	if o == nil || IsNil(o.LastTradingDay) {
		return nil, false
	}
	return o.LastTradingDay, true
}

// HasLastTradingDay returns a boolean if a field has been set.
func (o *ReferenceOption) HasLastTradingDay() bool {
	if o != nil && !IsNil(o.LastTradingDay) {
		return true
	}

	return false
}

// SetLastTradingDay gets a reference to the given int64 and assigns it to the LastTradingDay field.
func (o *ReferenceOption) SetLastTradingDay(v int64) {
	o.LastTradingDay = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *ReferenceOption) GetMultiplier() float64 {
	if o == nil || IsNil(o.Multiplier) {
		var ret float64
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetMultiplierOk() (*float64, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *ReferenceOption) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given float64 and assigns it to the Multiplier field.
func (o *ReferenceOption) SetMultiplier(v float64) {
	o.Multiplier = &v
}

// GetSettlementType returns the SettlementType field value if set, zero value otherwise.
func (o *ReferenceOption) GetSettlementType() SettlementType {
	if o == nil || IsNil(o.SettlementType) {
		var ret SettlementType
		return ret
	}
	return *o.SettlementType
}

// GetSettlementTypeOk returns a tuple with the SettlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetSettlementTypeOk() (*SettlementType, bool) {
	if o == nil || IsNil(o.SettlementType) {
		return nil, false
	}
	return o.SettlementType, true
}

// HasSettlementType returns a boolean if a field has been set.
func (o *ReferenceOption) HasSettlementType() bool {
	if o != nil && !IsNil(o.SettlementType) {
		return true
	}

	return false
}

// SetSettlementType gets a reference to the given SettlementType and assigns it to the SettlementType field.
func (o *ReferenceOption) SetSettlementType(v SettlementType) {
	o.SettlementType = &v
}

// GetStrikePrice returns the StrikePrice field value if set, zero value otherwise.
func (o *ReferenceOption) GetStrikePrice() float64 {
	if o == nil || IsNil(o.StrikePrice) {
		var ret float64
		return ret
	}
	return *o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetStrikePriceOk() (*float64, bool) {
	if o == nil || IsNil(o.StrikePrice) {
		return nil, false
	}
	return o.StrikePrice, true
}

// HasStrikePrice returns a boolean if a field has been set.
func (o *ReferenceOption) HasStrikePrice() bool {
	if o != nil && !IsNil(o.StrikePrice) {
		return true
	}

	return false
}

// SetStrikePrice gets a reference to the given float64 and assigns it to the StrikePrice field.
func (o *ReferenceOption) SetStrikePrice(v float64) {
	o.StrikePrice = &v
}

// GetUnderlying returns the Underlying field value if set, zero value otherwise.
func (o *ReferenceOption) GetUnderlying() string {
	if o == nil || IsNil(o.Underlying) {
		var ret string
		return ret
	}
	return *o.Underlying
}

// GetUnderlyingOk returns a tuple with the Underlying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceOption) GetUnderlyingOk() (*string, bool) {
	if o == nil || IsNil(o.Underlying) {
		return nil, false
	}
	return o.Underlying, true
}

// HasUnderlying returns a boolean if a field has been set.
func (o *ReferenceOption) HasUnderlying() bool {
	if o != nil && !IsNil(o.Underlying) {
		return true
	}

	return false
}

// SetUnderlying gets a reference to the given string and assigns it to the Underlying field.
func (o *ReferenceOption) SetUnderlying(v string) {
	o.Underlying = &v
}

func (o ReferenceOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractType) {
		toSerialize["contractType"] = o.ContractType
	}
	if !IsNil(o.Cusip) {
		toSerialize["cusip"] = o.Cusip
	}
	if !IsNil(o.DaysToExpiration) {
		toSerialize["daysToExpiration"] = o.DaysToExpiration
	}
	if !IsNil(o.Deliverables) {
		toSerialize["deliverables"] = o.Deliverables
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.ExchangeName) {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if !IsNil(o.ExerciseType) {
		toSerialize["exerciseType"] = o.ExerciseType
	}
	if !IsNil(o.ExpirationDay) {
		toSerialize["expirationDay"] = o.ExpirationDay
	}
	if !IsNil(o.ExpirationMonth) {
		toSerialize["expirationMonth"] = o.ExpirationMonth
	}
	if !IsNil(o.ExpirationType) {
		toSerialize["expirationType"] = o.ExpirationType
	}
	if !IsNil(o.ExpirationYear) {
		toSerialize["expirationYear"] = o.ExpirationYear
	}
	if !IsNil(o.IsPennyPilot) {
		toSerialize["isPennyPilot"] = o.IsPennyPilot
	}
	if !IsNil(o.LastTradingDay) {
		toSerialize["lastTradingDay"] = o.LastTradingDay
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.SettlementType) {
		toSerialize["settlementType"] = o.SettlementType
	}
	if !IsNil(o.StrikePrice) {
		toSerialize["strikePrice"] = o.StrikePrice
	}
	if !IsNil(o.Underlying) {
		toSerialize["underlying"] = o.Underlying
	}
	return toSerialize, nil
}

type NullableReferenceOption struct {
	value *ReferenceOption
	isSet bool
}

func (v NullableReferenceOption) Get() *ReferenceOption {
	return v.value
}

func (v *NullableReferenceOption) Set(val *ReferenceOption) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceOption) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceOption(val *ReferenceOption) *NullableReferenceOption {
	return &NullableReferenceOption{value: val, isSet: true}
}

func (v NullableReferenceOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


