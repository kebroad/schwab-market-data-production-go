/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the QuoteForex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteForex{}

// QuoteForex Quote data of Forex security
type QuoteForex struct {
	// Higest price traded in the past 12 months, or 52 weeks
	Var52WeekHigh *float64 `json:"52WeekHigh,omitempty"`
	// Lowest price traded in the past 12 months, or 52 weeks
	Var52WeekLow *float64 `json:"52WeekLow,omitempty"`
	// Current Best Ask Price
	AskPrice *float64 `json:"askPrice,omitempty"`
	// Number of shares for ask
	AskSize *int32 `json:"askSize,omitempty"`
	// Current Best Bid Price
	BidPrice *float64 `json:"bidPrice,omitempty"`
	// Number of shares for bid
	BidSize *int32 `json:"bidSize,omitempty"`
	// Previous day's closing price
	ClosePrice *float64 `json:"closePrice,omitempty"`
	// Day's high trade price
	HighPrice *float64 `json:"highPrice,omitempty"`
	LastPrice *float64 `json:"lastPrice,omitempty"`
	// Number of shares traded with last trade
	LastSize *int32 `json:"lastSize,omitempty"`
	// Day's low trade price
	LowPrice *float64 `json:"lowPrice,omitempty"`
	// Mark price
	Mark *float64 `json:"mark,omitempty"`
	// Current Last-Prev Close
	NetChange *float64 `json:"netChange,omitempty"`
	// Net Percentage Change
	NetPercentChange *float64 `json:"netPercentChange,omitempty"`
	// Price at market open
	OpenPrice *float64 `json:"openPrice,omitempty"`
	// Last quote time in milliseconds since Epoch
	QuoteTime *int64 `json:"quoteTime,omitempty"`
	// Status of security
	SecurityStatus *string `json:"securityStatus,omitempty"`
	// Tick Price
	Tick *float64 `json:"tick,omitempty"`
	// Tick Amount
	TickAmount *float64 `json:"tickAmount,omitempty"`
	// Aggregated shares traded throughout the day, including pre/post market hours.
	TotalVolume *int64 `json:"totalVolume,omitempty"`
	// Last trade time in milliseconds since Epoch
	TradeTime *int64 `json:"tradeTime,omitempty"`
}

// NewQuoteForex instantiates a new QuoteForex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteForex() *QuoteForex {
	this := QuoteForex{}
	return &this
}

// NewQuoteForexWithDefaults instantiates a new QuoteForex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteForexWithDefaults() *QuoteForex {
	this := QuoteForex{}
	return &this
}

// GetVar52WeekHigh returns the Var52WeekHigh field value if set, zero value otherwise.
func (o *QuoteForex) GetVar52WeekHigh() float64 {
	if o == nil || IsNil(o.Var52WeekHigh) {
		var ret float64
		return ret
	}
	return *o.Var52WeekHigh
}

// GetVar52WeekHighOk returns a tuple with the Var52WeekHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetVar52WeekHighOk() (*float64, bool) {
	if o == nil || IsNil(o.Var52WeekHigh) {
		return nil, false
	}
	return o.Var52WeekHigh, true
}

// HasVar52WeekHigh returns a boolean if a field has been set.
func (o *QuoteForex) HasVar52WeekHigh() bool {
	if o != nil && !IsNil(o.Var52WeekHigh) {
		return true
	}

	return false
}

// SetVar52WeekHigh gets a reference to the given float64 and assigns it to the Var52WeekHigh field.
func (o *QuoteForex) SetVar52WeekHigh(v float64) {
	o.Var52WeekHigh = &v
}

// GetVar52WeekLow returns the Var52WeekLow field value if set, zero value otherwise.
func (o *QuoteForex) GetVar52WeekLow() float64 {
	if o == nil || IsNil(o.Var52WeekLow) {
		var ret float64
		return ret
	}
	return *o.Var52WeekLow
}

// GetVar52WeekLowOk returns a tuple with the Var52WeekLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetVar52WeekLowOk() (*float64, bool) {
	if o == nil || IsNil(o.Var52WeekLow) {
		return nil, false
	}
	return o.Var52WeekLow, true
}

// HasVar52WeekLow returns a boolean if a field has been set.
func (o *QuoteForex) HasVar52WeekLow() bool {
	if o != nil && !IsNil(o.Var52WeekLow) {
		return true
	}

	return false
}

// SetVar52WeekLow gets a reference to the given float64 and assigns it to the Var52WeekLow field.
func (o *QuoteForex) SetVar52WeekLow(v float64) {
	o.Var52WeekLow = &v
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *QuoteForex) GetAskPrice() float64 {
	if o == nil || IsNil(o.AskPrice) {
		var ret float64
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetAskPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *QuoteForex) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float64 and assigns it to the AskPrice field.
func (o *QuoteForex) SetAskPrice(v float64) {
	o.AskPrice = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *QuoteForex) GetAskSize() int32 {
	if o == nil || IsNil(o.AskSize) {
		var ret int32
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetAskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *QuoteForex) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given int32 and assigns it to the AskSize field.
func (o *QuoteForex) SetAskSize(v int32) {
	o.AskSize = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *QuoteForex) GetBidPrice() float64 {
	if o == nil || IsNil(o.BidPrice) {
		var ret float64
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetBidPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *QuoteForex) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float64 and assigns it to the BidPrice field.
func (o *QuoteForex) SetBidPrice(v float64) {
	o.BidPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *QuoteForex) GetBidSize() int32 {
	if o == nil || IsNil(o.BidSize) {
		var ret int32
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetBidSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *QuoteForex) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given int32 and assigns it to the BidSize field.
func (o *QuoteForex) SetBidSize(v int32) {
	o.BidSize = &v
}

// GetClosePrice returns the ClosePrice field value if set, zero value otherwise.
func (o *QuoteForex) GetClosePrice() float64 {
	if o == nil || IsNil(o.ClosePrice) {
		var ret float64
		return ret
	}
	return *o.ClosePrice
}

// GetClosePriceOk returns a tuple with the ClosePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetClosePriceOk() (*float64, bool) {
	if o == nil || IsNil(o.ClosePrice) {
		return nil, false
	}
	return o.ClosePrice, true
}

// HasClosePrice returns a boolean if a field has been set.
func (o *QuoteForex) HasClosePrice() bool {
	if o != nil && !IsNil(o.ClosePrice) {
		return true
	}

	return false
}

// SetClosePrice gets a reference to the given float64 and assigns it to the ClosePrice field.
func (o *QuoteForex) SetClosePrice(v float64) {
	o.ClosePrice = &v
}

// GetHighPrice returns the HighPrice field value if set, zero value otherwise.
func (o *QuoteForex) GetHighPrice() float64 {
	if o == nil || IsNil(o.HighPrice) {
		var ret float64
		return ret
	}
	return *o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetHighPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.HighPrice) {
		return nil, false
	}
	return o.HighPrice, true
}

// HasHighPrice returns a boolean if a field has been set.
func (o *QuoteForex) HasHighPrice() bool {
	if o != nil && !IsNil(o.HighPrice) {
		return true
	}

	return false
}

// SetHighPrice gets a reference to the given float64 and assigns it to the HighPrice field.
func (o *QuoteForex) SetHighPrice(v float64) {
	o.HighPrice = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *QuoteForex) GetLastPrice() float64 {
	if o == nil || IsNil(o.LastPrice) {
		var ret float64
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetLastPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.LastPrice) {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *QuoteForex) HasLastPrice() bool {
	if o != nil && !IsNil(o.LastPrice) {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given float64 and assigns it to the LastPrice field.
func (o *QuoteForex) SetLastPrice(v float64) {
	o.LastPrice = &v
}

// GetLastSize returns the LastSize field value if set, zero value otherwise.
func (o *QuoteForex) GetLastSize() int32 {
	if o == nil || IsNil(o.LastSize) {
		var ret int32
		return ret
	}
	return *o.LastSize
}

// GetLastSizeOk returns a tuple with the LastSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetLastSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSize) {
		return nil, false
	}
	return o.LastSize, true
}

// HasLastSize returns a boolean if a field has been set.
func (o *QuoteForex) HasLastSize() bool {
	if o != nil && !IsNil(o.LastSize) {
		return true
	}

	return false
}

// SetLastSize gets a reference to the given int32 and assigns it to the LastSize field.
func (o *QuoteForex) SetLastSize(v int32) {
	o.LastSize = &v
}

// GetLowPrice returns the LowPrice field value if set, zero value otherwise.
func (o *QuoteForex) GetLowPrice() float64 {
	if o == nil || IsNil(o.LowPrice) {
		var ret float64
		return ret
	}
	return *o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetLowPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.LowPrice) {
		return nil, false
	}
	return o.LowPrice, true
}

// HasLowPrice returns a boolean if a field has been set.
func (o *QuoteForex) HasLowPrice() bool {
	if o != nil && !IsNil(o.LowPrice) {
		return true
	}

	return false
}

// SetLowPrice gets a reference to the given float64 and assigns it to the LowPrice field.
func (o *QuoteForex) SetLowPrice(v float64) {
	o.LowPrice = &v
}

// GetMark returns the Mark field value if set, zero value otherwise.
func (o *QuoteForex) GetMark() float64 {
	if o == nil || IsNil(o.Mark) {
		var ret float64
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetMarkOk() (*float64, bool) {
	if o == nil || IsNil(o.Mark) {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *QuoteForex) HasMark() bool {
	if o != nil && !IsNil(o.Mark) {
		return true
	}

	return false
}

// SetMark gets a reference to the given float64 and assigns it to the Mark field.
func (o *QuoteForex) SetMark(v float64) {
	o.Mark = &v
}

// GetNetChange returns the NetChange field value if set, zero value otherwise.
func (o *QuoteForex) GetNetChange() float64 {
	if o == nil || IsNil(o.NetChange) {
		var ret float64
		return ret
	}
	return *o.NetChange
}

// GetNetChangeOk returns a tuple with the NetChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetNetChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.NetChange) {
		return nil, false
	}
	return o.NetChange, true
}

// HasNetChange returns a boolean if a field has been set.
func (o *QuoteForex) HasNetChange() bool {
	if o != nil && !IsNil(o.NetChange) {
		return true
	}

	return false
}

// SetNetChange gets a reference to the given float64 and assigns it to the NetChange field.
func (o *QuoteForex) SetNetChange(v float64) {
	o.NetChange = &v
}

// GetNetPercentChange returns the NetPercentChange field value if set, zero value otherwise.
func (o *QuoteForex) GetNetPercentChange() float64 {
	if o == nil || IsNil(o.NetPercentChange) {
		var ret float64
		return ret
	}
	return *o.NetPercentChange
}

// GetNetPercentChangeOk returns a tuple with the NetPercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetNetPercentChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.NetPercentChange) {
		return nil, false
	}
	return o.NetPercentChange, true
}

// HasNetPercentChange returns a boolean if a field has been set.
func (o *QuoteForex) HasNetPercentChange() bool {
	if o != nil && !IsNil(o.NetPercentChange) {
		return true
	}

	return false
}

// SetNetPercentChange gets a reference to the given float64 and assigns it to the NetPercentChange field.
func (o *QuoteForex) SetNetPercentChange(v float64) {
	o.NetPercentChange = &v
}

// GetOpenPrice returns the OpenPrice field value if set, zero value otherwise.
func (o *QuoteForex) GetOpenPrice() float64 {
	if o == nil || IsNil(o.OpenPrice) {
		var ret float64
		return ret
	}
	return *o.OpenPrice
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetOpenPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.OpenPrice) {
		return nil, false
	}
	return o.OpenPrice, true
}

// HasOpenPrice returns a boolean if a field has been set.
func (o *QuoteForex) HasOpenPrice() bool {
	if o != nil && !IsNil(o.OpenPrice) {
		return true
	}

	return false
}

// SetOpenPrice gets a reference to the given float64 and assigns it to the OpenPrice field.
func (o *QuoteForex) SetOpenPrice(v float64) {
	o.OpenPrice = &v
}

// GetQuoteTime returns the QuoteTime field value if set, zero value otherwise.
func (o *QuoteForex) GetQuoteTime() int64 {
	if o == nil || IsNil(o.QuoteTime) {
		var ret int64
		return ret
	}
	return *o.QuoteTime
}

// GetQuoteTimeOk returns a tuple with the QuoteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetQuoteTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.QuoteTime) {
		return nil, false
	}
	return o.QuoteTime, true
}

// HasQuoteTime returns a boolean if a field has been set.
func (o *QuoteForex) HasQuoteTime() bool {
	if o != nil && !IsNil(o.QuoteTime) {
		return true
	}

	return false
}

// SetQuoteTime gets a reference to the given int64 and assigns it to the QuoteTime field.
func (o *QuoteForex) SetQuoteTime(v int64) {
	o.QuoteTime = &v
}

// GetSecurityStatus returns the SecurityStatus field value if set, zero value otherwise.
func (o *QuoteForex) GetSecurityStatus() string {
	if o == nil || IsNil(o.SecurityStatus) {
		var ret string
		return ret
	}
	return *o.SecurityStatus
}

// GetSecurityStatusOk returns a tuple with the SecurityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetSecurityStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityStatus) {
		return nil, false
	}
	return o.SecurityStatus, true
}

// HasSecurityStatus returns a boolean if a field has been set.
func (o *QuoteForex) HasSecurityStatus() bool {
	if o != nil && !IsNil(o.SecurityStatus) {
		return true
	}

	return false
}

// SetSecurityStatus gets a reference to the given string and assigns it to the SecurityStatus field.
func (o *QuoteForex) SetSecurityStatus(v string) {
	o.SecurityStatus = &v
}

// GetTick returns the Tick field value if set, zero value otherwise.
func (o *QuoteForex) GetTick() float64 {
	if o == nil || IsNil(o.Tick) {
		var ret float64
		return ret
	}
	return *o.Tick
}

// GetTickOk returns a tuple with the Tick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetTickOk() (*float64, bool) {
	if o == nil || IsNil(o.Tick) {
		return nil, false
	}
	return o.Tick, true
}

// HasTick returns a boolean if a field has been set.
func (o *QuoteForex) HasTick() bool {
	if o != nil && !IsNil(o.Tick) {
		return true
	}

	return false
}

// SetTick gets a reference to the given float64 and assigns it to the Tick field.
func (o *QuoteForex) SetTick(v float64) {
	o.Tick = &v
}

// GetTickAmount returns the TickAmount field value if set, zero value otherwise.
func (o *QuoteForex) GetTickAmount() float64 {
	if o == nil || IsNil(o.TickAmount) {
		var ret float64
		return ret
	}
	return *o.TickAmount
}

// GetTickAmountOk returns a tuple with the TickAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetTickAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.TickAmount) {
		return nil, false
	}
	return o.TickAmount, true
}

// HasTickAmount returns a boolean if a field has been set.
func (o *QuoteForex) HasTickAmount() bool {
	if o != nil && !IsNil(o.TickAmount) {
		return true
	}

	return false
}

// SetTickAmount gets a reference to the given float64 and assigns it to the TickAmount field.
func (o *QuoteForex) SetTickAmount(v float64) {
	o.TickAmount = &v
}

// GetTotalVolume returns the TotalVolume field value if set, zero value otherwise.
func (o *QuoteForex) GetTotalVolume() int64 {
	if o == nil || IsNil(o.TotalVolume) {
		var ret int64
		return ret
	}
	return *o.TotalVolume
}

// GetTotalVolumeOk returns a tuple with the TotalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetTotalVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalVolume) {
		return nil, false
	}
	return o.TotalVolume, true
}

// HasTotalVolume returns a boolean if a field has been set.
func (o *QuoteForex) HasTotalVolume() bool {
	if o != nil && !IsNil(o.TotalVolume) {
		return true
	}

	return false
}

// SetTotalVolume gets a reference to the given int64 and assigns it to the TotalVolume field.
func (o *QuoteForex) SetTotalVolume(v int64) {
	o.TotalVolume = &v
}

// GetTradeTime returns the TradeTime field value if set, zero value otherwise.
func (o *QuoteForex) GetTradeTime() int64 {
	if o == nil || IsNil(o.TradeTime) {
		var ret int64
		return ret
	}
	return *o.TradeTime
}

// GetTradeTimeOk returns a tuple with the TradeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteForex) GetTradeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.TradeTime) {
		return nil, false
	}
	return o.TradeTime, true
}

// HasTradeTime returns a boolean if a field has been set.
func (o *QuoteForex) HasTradeTime() bool {
	if o != nil && !IsNil(o.TradeTime) {
		return true
	}

	return false
}

// SetTradeTime gets a reference to the given int64 and assigns it to the TradeTime field.
func (o *QuoteForex) SetTradeTime(v int64) {
	o.TradeTime = &v
}

func (o QuoteForex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteForex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var52WeekHigh) {
		toSerialize["52WeekHigh"] = o.Var52WeekHigh
	}
	if !IsNil(o.Var52WeekLow) {
		toSerialize["52WeekLow"] = o.Var52WeekLow
	}
	if !IsNil(o.AskPrice) {
		toSerialize["askPrice"] = o.AskPrice
	}
	if !IsNil(o.AskSize) {
		toSerialize["askSize"] = o.AskSize
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bidSize"] = o.BidSize
	}
	if !IsNil(o.ClosePrice) {
		toSerialize["closePrice"] = o.ClosePrice
	}
	if !IsNil(o.HighPrice) {
		toSerialize["highPrice"] = o.HighPrice
	}
	if !IsNil(o.LastPrice) {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if !IsNil(o.LastSize) {
		toSerialize["lastSize"] = o.LastSize
	}
	if !IsNil(o.LowPrice) {
		toSerialize["lowPrice"] = o.LowPrice
	}
	if !IsNil(o.Mark) {
		toSerialize["mark"] = o.Mark
	}
	if !IsNil(o.NetChange) {
		toSerialize["netChange"] = o.NetChange
	}
	if !IsNil(o.NetPercentChange) {
		toSerialize["netPercentChange"] = o.NetPercentChange
	}
	if !IsNil(o.OpenPrice) {
		toSerialize["openPrice"] = o.OpenPrice
	}
	if !IsNil(o.QuoteTime) {
		toSerialize["quoteTime"] = o.QuoteTime
	}
	if !IsNil(o.SecurityStatus) {
		toSerialize["securityStatus"] = o.SecurityStatus
	}
	if !IsNil(o.Tick) {
		toSerialize["tick"] = o.Tick
	}
	if !IsNil(o.TickAmount) {
		toSerialize["tickAmount"] = o.TickAmount
	}
	if !IsNil(o.TotalVolume) {
		toSerialize["totalVolume"] = o.TotalVolume
	}
	if !IsNil(o.TradeTime) {
		toSerialize["tradeTime"] = o.TradeTime
	}
	return toSerialize, nil
}

type NullableQuoteForex struct {
	value *QuoteForex
	isSet bool
}

func (v NullableQuoteForex) Get() *QuoteForex {
	return v.value
}

func (v *NullableQuoteForex) Set(val *QuoteForex) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteForex) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteForex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteForex(val *QuoteForex) *NullableQuoteForex {
	return &NullableQuoteForex{value: val, isSet: true}
}

func (v NullableQuoteForex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteForex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


