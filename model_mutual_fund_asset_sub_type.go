/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// MutualFundAssetSubType Asset Sub Type (only there if applicable)
type MutualFundAssetSubType string

// List of MutualFundAssetSubType
const (
	MUTUALFUNDASSETSUBTYPE_OEF MutualFundAssetSubType = "OEF"
	MUTUALFUNDASSETSUBTYPE_CEF MutualFundAssetSubType = "CEF"
	MUTUALFUNDASSETSUBTYPE_MMF MutualFundAssetSubType = "MMF"
)

// All allowed values of MutualFundAssetSubType enum
var AllowedMutualFundAssetSubTypeEnumValues = []MutualFundAssetSubType{
	"OEF",
	"CEF",
	"MMF",
}

func (v *MutualFundAssetSubType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutualFundAssetSubType(value)
	for _, existing := range AllowedMutualFundAssetSubTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutualFundAssetSubType", value)
}

// NewMutualFundAssetSubTypeFromValue returns a pointer to a valid MutualFundAssetSubType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutualFundAssetSubTypeFromValue(v string) (*MutualFundAssetSubType, error) {
	ev := MutualFundAssetSubType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutualFundAssetSubType: valid values are %v", v, AllowedMutualFundAssetSubTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutualFundAssetSubType) IsValid() bool {
	for _, existing := range AllowedMutualFundAssetSubTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutualFundAssetSubType value
func (v MutualFundAssetSubType) Ptr() *MutualFundAssetSubType {
	return &v
}

type NullableMutualFundAssetSubType struct {
	value *MutualFundAssetSubType
	isSet bool
}

func (v NullableMutualFundAssetSubType) Get() *MutualFundAssetSubType {
	return v.value
}

func (v *NullableMutualFundAssetSubType) Set(val *MutualFundAssetSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundAssetSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundAssetSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundAssetSubType(val *MutualFundAssetSubType) *NullableMutualFundAssetSubType {
	return &NullableMutualFundAssetSubType{value: val, isSet: true}
}

func (v NullableMutualFundAssetSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundAssetSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

