/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ExtendedMarket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedMarket{}

// ExtendedMarket Quote data for extended hours
type ExtendedMarket struct {
	// Extended market ask price
	AskPrice *float64 `json:"askPrice,omitempty"`
	// Extended market ask size
	AskSize *int32 `json:"askSize,omitempty"`
	// Extended market bid price
	BidPrice *float64 `json:"bidPrice,omitempty"`
	// Extended market bid size
	BidSize *int32 `json:"bidSize,omitempty"`
	// Extended market last price
	LastPrice *float64 `json:"lastPrice,omitempty"`
	// Regular market last size
	LastSize *int32 `json:"lastSize,omitempty"`
	// mark price
	Mark *float64 `json:"mark,omitempty"`
	// Extended market quote time in milliseconds since Epoch
	QuoteTime *int64 `json:"quoteTime,omitempty"`
	// Total volume
	TotalVolume *float32 `json:"totalVolume,omitempty"`
	// Extended market trade time in milliseconds since Epoch
	TradeTime *int64 `json:"tradeTime,omitempty"`
}

// NewExtendedMarket instantiates a new ExtendedMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedMarket() *ExtendedMarket {
	this := ExtendedMarket{}
	return &this
}

// NewExtendedMarketWithDefaults instantiates a new ExtendedMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedMarketWithDefaults() *ExtendedMarket {
	this := ExtendedMarket{}
	return &this
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *ExtendedMarket) GetAskPrice() float64 {
	if o == nil || IsNil(o.AskPrice) {
		var ret float64
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetAskPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *ExtendedMarket) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float64 and assigns it to the AskPrice field.
func (o *ExtendedMarket) SetAskPrice(v float64) {
	o.AskPrice = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *ExtendedMarket) GetAskSize() int32 {
	if o == nil || IsNil(o.AskSize) {
		var ret int32
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetAskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *ExtendedMarket) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given int32 and assigns it to the AskSize field.
func (o *ExtendedMarket) SetAskSize(v int32) {
	o.AskSize = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *ExtendedMarket) GetBidPrice() float64 {
	if o == nil || IsNil(o.BidPrice) {
		var ret float64
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetBidPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *ExtendedMarket) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float64 and assigns it to the BidPrice field.
func (o *ExtendedMarket) SetBidPrice(v float64) {
	o.BidPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *ExtendedMarket) GetBidSize() int32 {
	if o == nil || IsNil(o.BidSize) {
		var ret int32
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetBidSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *ExtendedMarket) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given int32 and assigns it to the BidSize field.
func (o *ExtendedMarket) SetBidSize(v int32) {
	o.BidSize = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *ExtendedMarket) GetLastPrice() float64 {
	if o == nil || IsNil(o.LastPrice) {
		var ret float64
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetLastPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.LastPrice) {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *ExtendedMarket) HasLastPrice() bool {
	if o != nil && !IsNil(o.LastPrice) {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given float64 and assigns it to the LastPrice field.
func (o *ExtendedMarket) SetLastPrice(v float64) {
	o.LastPrice = &v
}

// GetLastSize returns the LastSize field value if set, zero value otherwise.
func (o *ExtendedMarket) GetLastSize() int32 {
	if o == nil || IsNil(o.LastSize) {
		var ret int32
		return ret
	}
	return *o.LastSize
}

// GetLastSizeOk returns a tuple with the LastSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetLastSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSize) {
		return nil, false
	}
	return o.LastSize, true
}

// HasLastSize returns a boolean if a field has been set.
func (o *ExtendedMarket) HasLastSize() bool {
	if o != nil && !IsNil(o.LastSize) {
		return true
	}

	return false
}

// SetLastSize gets a reference to the given int32 and assigns it to the LastSize field.
func (o *ExtendedMarket) SetLastSize(v int32) {
	o.LastSize = &v
}

// GetMark returns the Mark field value if set, zero value otherwise.
func (o *ExtendedMarket) GetMark() float64 {
	if o == nil || IsNil(o.Mark) {
		var ret float64
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetMarkOk() (*float64, bool) {
	if o == nil || IsNil(o.Mark) {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *ExtendedMarket) HasMark() bool {
	if o != nil && !IsNil(o.Mark) {
		return true
	}

	return false
}

// SetMark gets a reference to the given float64 and assigns it to the Mark field.
func (o *ExtendedMarket) SetMark(v float64) {
	o.Mark = &v
}

// GetQuoteTime returns the QuoteTime field value if set, zero value otherwise.
func (o *ExtendedMarket) GetQuoteTime() int64 {
	if o == nil || IsNil(o.QuoteTime) {
		var ret int64
		return ret
	}
	return *o.QuoteTime
}

// GetQuoteTimeOk returns a tuple with the QuoteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetQuoteTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.QuoteTime) {
		return nil, false
	}
	return o.QuoteTime, true
}

// HasQuoteTime returns a boolean if a field has been set.
func (o *ExtendedMarket) HasQuoteTime() bool {
	if o != nil && !IsNil(o.QuoteTime) {
		return true
	}

	return false
}

// SetQuoteTime gets a reference to the given int64 and assigns it to the QuoteTime field.
func (o *ExtendedMarket) SetQuoteTime(v int64) {
	o.QuoteTime = &v
}

// GetTotalVolume returns the TotalVolume field value if set, zero value otherwise.
func (o *ExtendedMarket) GetTotalVolume() float32 {
	if o == nil || IsNil(o.TotalVolume) {
		var ret float32
		return ret
	}
	return *o.TotalVolume
}

// GetTotalVolumeOk returns a tuple with the TotalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetTotalVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalVolume) {
		return nil, false
	}
	return o.TotalVolume, true
}

// HasTotalVolume returns a boolean if a field has been set.
func (o *ExtendedMarket) HasTotalVolume() bool {
	if o != nil && !IsNil(o.TotalVolume) {
		return true
	}

	return false
}

// SetTotalVolume gets a reference to the given float32 and assigns it to the TotalVolume field.
func (o *ExtendedMarket) SetTotalVolume(v float32) {
	o.TotalVolume = &v
}

// GetTradeTime returns the TradeTime field value if set, zero value otherwise.
func (o *ExtendedMarket) GetTradeTime() int64 {
	if o == nil || IsNil(o.TradeTime) {
		var ret int64
		return ret
	}
	return *o.TradeTime
}

// GetTradeTimeOk returns a tuple with the TradeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedMarket) GetTradeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.TradeTime) {
		return nil, false
	}
	return o.TradeTime, true
}

// HasTradeTime returns a boolean if a field has been set.
func (o *ExtendedMarket) HasTradeTime() bool {
	if o != nil && !IsNil(o.TradeTime) {
		return true
	}

	return false
}

// SetTradeTime gets a reference to the given int64 and assigns it to the TradeTime field.
func (o *ExtendedMarket) SetTradeTime(v int64) {
	o.TradeTime = &v
}

func (o ExtendedMarket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedMarket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AskPrice) {
		toSerialize["askPrice"] = o.AskPrice
	}
	if !IsNil(o.AskSize) {
		toSerialize["askSize"] = o.AskSize
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bidSize"] = o.BidSize
	}
	if !IsNil(o.LastPrice) {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if !IsNil(o.LastSize) {
		toSerialize["lastSize"] = o.LastSize
	}
	if !IsNil(o.Mark) {
		toSerialize["mark"] = o.Mark
	}
	if !IsNil(o.QuoteTime) {
		toSerialize["quoteTime"] = o.QuoteTime
	}
	if !IsNil(o.TotalVolume) {
		toSerialize["totalVolume"] = o.TotalVolume
	}
	if !IsNil(o.TradeTime) {
		toSerialize["tradeTime"] = o.TradeTime
	}
	return toSerialize, nil
}

type NullableExtendedMarket struct {
	value *ExtendedMarket
	isSet bool
}

func (v NullableExtendedMarket) Get() *ExtendedMarket {
	return v.value
}

func (v *NullableExtendedMarket) Set(val *ExtendedMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedMarket(val *ExtendedMarket) *NullableExtendedMarket {
	return &NullableExtendedMarket{value: val, isSet: true}
}

func (v NullableExtendedMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


