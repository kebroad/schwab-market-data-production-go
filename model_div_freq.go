/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// DivFreq Dividend frequency 1 – once a year or annually 2 – 2x a year or semi-annualy 3 - 3x a year (ex. ARCO, EBRPF) 4 – 4x a year or quarterly 6 - 6x per yr or every other month 11 – 11x a year (ex. FBND, FCOR) 12 – 12x a year or monthly
type DivFreq int32

// List of DivFreq
const (
	DIVFREQ__1 DivFreq = 1
	DIVFREQ__2 DivFreq = 2
	DIVFREQ__3 DivFreq = 3
	DIVFREQ__4 DivFreq = 4
	DIVFREQ__6 DivFreq = 6
	DIVFREQ__11 DivFreq = 11
	DIVFREQ__12 DivFreq = 12
)

// All allowed values of DivFreq enum
var AllowedDivFreqEnumValues = []DivFreq{
	1,
	2,
	3,
	4,
	6,
	11,
	12,
}

func (v *DivFreq) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DivFreq(value)
	for _, existing := range AllowedDivFreqEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DivFreq", value)
}

// NewDivFreqFromValue returns a pointer to a valid DivFreq
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDivFreqFromValue(v int32) (*DivFreq, error) {
	ev := DivFreq(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DivFreq: valid values are %v", v, AllowedDivFreqEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DivFreq) IsValid() bool {
	for _, existing := range AllowedDivFreqEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DivFreq value
func (v DivFreq) Ptr() *DivFreq {
	return &v
}

type NullableDivFreq struct {
	value *DivFreq
	isSet bool
}

func (v NullableDivFreq) Get() *DivFreq {
	return v.value
}

func (v *NullableDivFreq) Set(val *DivFreq) {
	v.value = val
	v.isSet = true
}

func (v NullableDivFreq) IsSet() bool {
	return v.isSet
}

func (v *NullableDivFreq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivFreq(val *DivFreq) *NullableDivFreq {
	return &NullableDivFreq{value: val, isSet: true}
}

func (v NullableDivFreq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivFreq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

