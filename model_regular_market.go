/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the RegularMarket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegularMarket{}

// RegularMarket Market info of security
type RegularMarket struct {
	// Regular market last price
	RegularMarketLastPrice *float64 `json:"regularMarketLastPrice,omitempty"`
	// Regular market last size
	RegularMarketLastSize *int32 `json:"regularMarketLastSize,omitempty"`
	// Regular market net change
	RegularMarketNetChange *float64 `json:"regularMarketNetChange,omitempty"`
	// Regular market percent change
	RegularMarketPercentChange *float64 `json:"regularMarketPercentChange,omitempty"`
	// Regular market trade time in milliseconds since Epoch
	RegularMarketTradeTime *int64 `json:"regularMarketTradeTime,omitempty"`
}

// NewRegularMarket instantiates a new RegularMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegularMarket() *RegularMarket {
	this := RegularMarket{}
	return &this
}

// NewRegularMarketWithDefaults instantiates a new RegularMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegularMarketWithDefaults() *RegularMarket {
	this := RegularMarket{}
	return &this
}

// GetRegularMarketLastPrice returns the RegularMarketLastPrice field value if set, zero value otherwise.
func (o *RegularMarket) GetRegularMarketLastPrice() float64 {
	if o == nil || IsNil(o.RegularMarketLastPrice) {
		var ret float64
		return ret
	}
	return *o.RegularMarketLastPrice
}

// GetRegularMarketLastPriceOk returns a tuple with the RegularMarketLastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularMarket) GetRegularMarketLastPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.RegularMarketLastPrice) {
		return nil, false
	}
	return o.RegularMarketLastPrice, true
}

// HasRegularMarketLastPrice returns a boolean if a field has been set.
func (o *RegularMarket) HasRegularMarketLastPrice() bool {
	if o != nil && !IsNil(o.RegularMarketLastPrice) {
		return true
	}

	return false
}

// SetRegularMarketLastPrice gets a reference to the given float64 and assigns it to the RegularMarketLastPrice field.
func (o *RegularMarket) SetRegularMarketLastPrice(v float64) {
	o.RegularMarketLastPrice = &v
}

// GetRegularMarketLastSize returns the RegularMarketLastSize field value if set, zero value otherwise.
func (o *RegularMarket) GetRegularMarketLastSize() int32 {
	if o == nil || IsNil(o.RegularMarketLastSize) {
		var ret int32
		return ret
	}
	return *o.RegularMarketLastSize
}

// GetRegularMarketLastSizeOk returns a tuple with the RegularMarketLastSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularMarket) GetRegularMarketLastSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.RegularMarketLastSize) {
		return nil, false
	}
	return o.RegularMarketLastSize, true
}

// HasRegularMarketLastSize returns a boolean if a field has been set.
func (o *RegularMarket) HasRegularMarketLastSize() bool {
	if o != nil && !IsNil(o.RegularMarketLastSize) {
		return true
	}

	return false
}

// SetRegularMarketLastSize gets a reference to the given int32 and assigns it to the RegularMarketLastSize field.
func (o *RegularMarket) SetRegularMarketLastSize(v int32) {
	o.RegularMarketLastSize = &v
}

// GetRegularMarketNetChange returns the RegularMarketNetChange field value if set, zero value otherwise.
func (o *RegularMarket) GetRegularMarketNetChange() float64 {
	if o == nil || IsNil(o.RegularMarketNetChange) {
		var ret float64
		return ret
	}
	return *o.RegularMarketNetChange
}

// GetRegularMarketNetChangeOk returns a tuple with the RegularMarketNetChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularMarket) GetRegularMarketNetChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.RegularMarketNetChange) {
		return nil, false
	}
	return o.RegularMarketNetChange, true
}

// HasRegularMarketNetChange returns a boolean if a field has been set.
func (o *RegularMarket) HasRegularMarketNetChange() bool {
	if o != nil && !IsNil(o.RegularMarketNetChange) {
		return true
	}

	return false
}

// SetRegularMarketNetChange gets a reference to the given float64 and assigns it to the RegularMarketNetChange field.
func (o *RegularMarket) SetRegularMarketNetChange(v float64) {
	o.RegularMarketNetChange = &v
}

// GetRegularMarketPercentChange returns the RegularMarketPercentChange field value if set, zero value otherwise.
func (o *RegularMarket) GetRegularMarketPercentChange() float64 {
	if o == nil || IsNil(o.RegularMarketPercentChange) {
		var ret float64
		return ret
	}
	return *o.RegularMarketPercentChange
}

// GetRegularMarketPercentChangeOk returns a tuple with the RegularMarketPercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularMarket) GetRegularMarketPercentChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.RegularMarketPercentChange) {
		return nil, false
	}
	return o.RegularMarketPercentChange, true
}

// HasRegularMarketPercentChange returns a boolean if a field has been set.
func (o *RegularMarket) HasRegularMarketPercentChange() bool {
	if o != nil && !IsNil(o.RegularMarketPercentChange) {
		return true
	}

	return false
}

// SetRegularMarketPercentChange gets a reference to the given float64 and assigns it to the RegularMarketPercentChange field.
func (o *RegularMarket) SetRegularMarketPercentChange(v float64) {
	o.RegularMarketPercentChange = &v
}

// GetRegularMarketTradeTime returns the RegularMarketTradeTime field value if set, zero value otherwise.
func (o *RegularMarket) GetRegularMarketTradeTime() int64 {
	if o == nil || IsNil(o.RegularMarketTradeTime) {
		var ret int64
		return ret
	}
	return *o.RegularMarketTradeTime
}

// GetRegularMarketTradeTimeOk returns a tuple with the RegularMarketTradeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularMarket) GetRegularMarketTradeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.RegularMarketTradeTime) {
		return nil, false
	}
	return o.RegularMarketTradeTime, true
}

// HasRegularMarketTradeTime returns a boolean if a field has been set.
func (o *RegularMarket) HasRegularMarketTradeTime() bool {
	if o != nil && !IsNil(o.RegularMarketTradeTime) {
		return true
	}

	return false
}

// SetRegularMarketTradeTime gets a reference to the given int64 and assigns it to the RegularMarketTradeTime field.
func (o *RegularMarket) SetRegularMarketTradeTime(v int64) {
	o.RegularMarketTradeTime = &v
}

func (o RegularMarket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegularMarket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegularMarketLastPrice) {
		toSerialize["regularMarketLastPrice"] = o.RegularMarketLastPrice
	}
	if !IsNil(o.RegularMarketLastSize) {
		toSerialize["regularMarketLastSize"] = o.RegularMarketLastSize
	}
	if !IsNil(o.RegularMarketNetChange) {
		toSerialize["regularMarketNetChange"] = o.RegularMarketNetChange
	}
	if !IsNil(o.RegularMarketPercentChange) {
		toSerialize["regularMarketPercentChange"] = o.RegularMarketPercentChange
	}
	if !IsNil(o.RegularMarketTradeTime) {
		toSerialize["regularMarketTradeTime"] = o.RegularMarketTradeTime
	}
	return toSerialize, nil
}

type NullableRegularMarket struct {
	value *RegularMarket
	isSet bool
}

func (v NullableRegularMarket) Get() *RegularMarket {
	return v.value
}

func (v *NullableRegularMarket) Set(val *RegularMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableRegularMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableRegularMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegularMarket(val *RegularMarket) *NullableRegularMarket {
	return &NullableRegularMarket{value: val, isSet: true}
}

func (v NullableRegularMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegularMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


