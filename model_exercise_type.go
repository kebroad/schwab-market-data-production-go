/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ExerciseType option contract exercise type America or European
type ExerciseType string

// List of ExerciseType
const (
	EXERCISETYPE_A ExerciseType = "A"
	EXERCISETYPE_E ExerciseType = "E"
)

// All allowed values of ExerciseType enum
var AllowedExerciseTypeEnumValues = []ExerciseType{
	"A",
	"E",
}

func (v *ExerciseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExerciseType(value)
	for _, existing := range AllowedExerciseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExerciseType", value)
}

// NewExerciseTypeFromValue returns a pointer to a valid ExerciseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExerciseTypeFromValue(v string) (*ExerciseType, error) {
	ev := ExerciseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExerciseType: valid values are %v", v, AllowedExerciseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExerciseType) IsValid() bool {
	for _, existing := range AllowedExerciseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExerciseType value
func (v ExerciseType) Ptr() *ExerciseType {
	return &v
}

type NullableExerciseType struct {
	value *ExerciseType
	isSet bool
}

func (v NullableExerciseType) Get() *ExerciseType {
	return v.value
}

func (v *NullableExerciseType) Set(val *ExerciseType) {
	v.value = val
	v.isSet = true
}

func (v NullableExerciseType) IsSet() bool {
	return v.isSet
}

func (v *NullableExerciseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExerciseType(val *ExerciseType) *NullableExerciseType {
	return &NullableExerciseType{value: val, isSet: true}
}

func (v NullableExerciseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExerciseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

