/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Fundamental type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fundamental{}

// Fundamental Fundamentals of a security
type Fundamental struct {
	// Average 10 day volume
	Avg10DaysVolume *float64 `json:"avg10DaysVolume,omitempty"`
	// Average 1 day volume
	Avg1YearVolume *float64 `json:"avg1YearVolume,omitempty"`
	// Declaration date in yyyy-mm-ddThh:mm:ssZ
	DeclarationDate *time.Time `json:"declarationDate,omitempty" validate:"regexp=yyyy-MM-dd'T'HH:mm:ssZ"`
	// Dividend Amount
	DivAmount *float64 `json:"divAmount,omitempty"`
	// Dividend date in yyyy-mm-ddThh:mm:ssZ
	DivExDate *string `json:"divExDate,omitempty"`
	DivFreq NullableDivFreq `json:"divFreq,omitempty"`
	// Dividend Pay Amount
	DivPayAmount *float64 `json:"divPayAmount,omitempty"`
	// Dividend pay date in yyyy-mm-ddThh:mm:ssZ
	DivPayDate *time.Time `json:"divPayDate,omitempty" validate:"regexp=yyyy-MM-dd'T'HH:mm:ssZ"`
	// Dividend yield
	DivYield *float64 `json:"divYield,omitempty"`
	// Earnings per Share
	Eps *float64 `json:"eps,omitempty"`
	// Fund Leverage Factor + > 0 <-
	FundLeverageFactor *float64 `json:"fundLeverageFactor,omitempty"`
	FundStrategy NullableFundStrategy `json:"fundStrategy,omitempty"`
	// Next Dividend date
	NextDivExDate *time.Time `json:"nextDivExDate,omitempty" validate:"regexp=yyyy-MM-dd'T'HH:mm:ssZ"`
	// Next Dividend pay date
	NextDivPayDate *time.Time `json:"nextDivPayDate,omitempty" validate:"regexp=yyyy-MM-dd'T'HH:mm:ssZ"`
	// P/E Ratio
	PeRatio *float64 `json:"peRatio,omitempty"`
}

// NewFundamental instantiates a new Fundamental object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamental() *Fundamental {
	this := Fundamental{}
	return &this
}

// NewFundamentalWithDefaults instantiates a new Fundamental object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalWithDefaults() *Fundamental {
	this := Fundamental{}
	return &this
}

// GetAvg10DaysVolume returns the Avg10DaysVolume field value if set, zero value otherwise.
func (o *Fundamental) GetAvg10DaysVolume() float64 {
	if o == nil || IsNil(o.Avg10DaysVolume) {
		var ret float64
		return ret
	}
	return *o.Avg10DaysVolume
}

// GetAvg10DaysVolumeOk returns a tuple with the Avg10DaysVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetAvg10DaysVolumeOk() (*float64, bool) {
	if o == nil || IsNil(o.Avg10DaysVolume) {
		return nil, false
	}
	return o.Avg10DaysVolume, true
}

// HasAvg10DaysVolume returns a boolean if a field has been set.
func (o *Fundamental) HasAvg10DaysVolume() bool {
	if o != nil && !IsNil(o.Avg10DaysVolume) {
		return true
	}

	return false
}

// SetAvg10DaysVolume gets a reference to the given float64 and assigns it to the Avg10DaysVolume field.
func (o *Fundamental) SetAvg10DaysVolume(v float64) {
	o.Avg10DaysVolume = &v
}

// GetAvg1YearVolume returns the Avg1YearVolume field value if set, zero value otherwise.
func (o *Fundamental) GetAvg1YearVolume() float64 {
	if o == nil || IsNil(o.Avg1YearVolume) {
		var ret float64
		return ret
	}
	return *o.Avg1YearVolume
}

// GetAvg1YearVolumeOk returns a tuple with the Avg1YearVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetAvg1YearVolumeOk() (*float64, bool) {
	if o == nil || IsNil(o.Avg1YearVolume) {
		return nil, false
	}
	return o.Avg1YearVolume, true
}

// HasAvg1YearVolume returns a boolean if a field has been set.
func (o *Fundamental) HasAvg1YearVolume() bool {
	if o != nil && !IsNil(o.Avg1YearVolume) {
		return true
	}

	return false
}

// SetAvg1YearVolume gets a reference to the given float64 and assigns it to the Avg1YearVolume field.
func (o *Fundamental) SetAvg1YearVolume(v float64) {
	o.Avg1YearVolume = &v
}

// GetDeclarationDate returns the DeclarationDate field value if set, zero value otherwise.
func (o *Fundamental) GetDeclarationDate() time.Time {
	if o == nil || IsNil(o.DeclarationDate) {
		var ret time.Time
		return ret
	}
	return *o.DeclarationDate
}

// GetDeclarationDateOk returns a tuple with the DeclarationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetDeclarationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeclarationDate) {
		return nil, false
	}
	return o.DeclarationDate, true
}

// HasDeclarationDate returns a boolean if a field has been set.
func (o *Fundamental) HasDeclarationDate() bool {
	if o != nil && !IsNil(o.DeclarationDate) {
		return true
	}

	return false
}

// SetDeclarationDate gets a reference to the given time.Time and assigns it to the DeclarationDate field.
func (o *Fundamental) SetDeclarationDate(v time.Time) {
	o.DeclarationDate = &v
}

// GetDivAmount returns the DivAmount field value if set, zero value otherwise.
func (o *Fundamental) GetDivAmount() float64 {
	if o == nil || IsNil(o.DivAmount) {
		var ret float64
		return ret
	}
	return *o.DivAmount
}

// GetDivAmountOk returns a tuple with the DivAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetDivAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.DivAmount) {
		return nil, false
	}
	return o.DivAmount, true
}

// HasDivAmount returns a boolean if a field has been set.
func (o *Fundamental) HasDivAmount() bool {
	if o != nil && !IsNil(o.DivAmount) {
		return true
	}

	return false
}

// SetDivAmount gets a reference to the given float64 and assigns it to the DivAmount field.
func (o *Fundamental) SetDivAmount(v float64) {
	o.DivAmount = &v
}

// GetDivExDate returns the DivExDate field value if set, zero value otherwise.
func (o *Fundamental) GetDivExDate() string {
	if o == nil || IsNil(o.DivExDate) {
		var ret string
		return ret
	}
	return *o.DivExDate
}

// GetDivExDateOk returns a tuple with the DivExDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetDivExDateOk() (*string, bool) {
	if o == nil || IsNil(o.DivExDate) {
		return nil, false
	}
	return o.DivExDate, true
}

// HasDivExDate returns a boolean if a field has been set.
func (o *Fundamental) HasDivExDate() bool {
	if o != nil && !IsNil(o.DivExDate) {
		return true
	}

	return false
}

// SetDivExDate gets a reference to the given string and assigns it to the DivExDate field.
func (o *Fundamental) SetDivExDate(v string) {
	o.DivExDate = &v
}

// GetDivFreq returns the DivFreq field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Fundamental) GetDivFreq() DivFreq {
	if o == nil || IsNil(o.DivFreq.Get()) {
		var ret DivFreq
		return ret
	}
	return *o.DivFreq.Get()
}

// GetDivFreqOk returns a tuple with the DivFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Fundamental) GetDivFreqOk() (*DivFreq, bool) {
	if o == nil {
		return nil, false
	}
	return o.DivFreq.Get(), o.DivFreq.IsSet()
}

// HasDivFreq returns a boolean if a field has been set.
func (o *Fundamental) HasDivFreq() bool {
	if o != nil && o.DivFreq.IsSet() {
		return true
	}

	return false
}

// SetDivFreq gets a reference to the given NullableDivFreq and assigns it to the DivFreq field.
func (o *Fundamental) SetDivFreq(v DivFreq) {
	o.DivFreq.Set(&v)
}
// SetDivFreqNil sets the value for DivFreq to be an explicit nil
func (o *Fundamental) SetDivFreqNil() {
	o.DivFreq.Set(nil)
}

// UnsetDivFreq ensures that no value is present for DivFreq, not even an explicit nil
func (o *Fundamental) UnsetDivFreq() {
	o.DivFreq.Unset()
}

// GetDivPayAmount returns the DivPayAmount field value if set, zero value otherwise.
func (o *Fundamental) GetDivPayAmount() float64 {
	if o == nil || IsNil(o.DivPayAmount) {
		var ret float64
		return ret
	}
	return *o.DivPayAmount
}

// GetDivPayAmountOk returns a tuple with the DivPayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetDivPayAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.DivPayAmount) {
		return nil, false
	}
	return o.DivPayAmount, true
}

// HasDivPayAmount returns a boolean if a field has been set.
func (o *Fundamental) HasDivPayAmount() bool {
	if o != nil && !IsNil(o.DivPayAmount) {
		return true
	}

	return false
}

// SetDivPayAmount gets a reference to the given float64 and assigns it to the DivPayAmount field.
func (o *Fundamental) SetDivPayAmount(v float64) {
	o.DivPayAmount = &v
}

// GetDivPayDate returns the DivPayDate field value if set, zero value otherwise.
func (o *Fundamental) GetDivPayDate() time.Time {
	if o == nil || IsNil(o.DivPayDate) {
		var ret time.Time
		return ret
	}
	return *o.DivPayDate
}

// GetDivPayDateOk returns a tuple with the DivPayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetDivPayDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DivPayDate) {
		return nil, false
	}
	return o.DivPayDate, true
}

// HasDivPayDate returns a boolean if a field has been set.
func (o *Fundamental) HasDivPayDate() bool {
	if o != nil && !IsNil(o.DivPayDate) {
		return true
	}

	return false
}

// SetDivPayDate gets a reference to the given time.Time and assigns it to the DivPayDate field.
func (o *Fundamental) SetDivPayDate(v time.Time) {
	o.DivPayDate = &v
}

// GetDivYield returns the DivYield field value if set, zero value otherwise.
func (o *Fundamental) GetDivYield() float64 {
	if o == nil || IsNil(o.DivYield) {
		var ret float64
		return ret
	}
	return *o.DivYield
}

// GetDivYieldOk returns a tuple with the DivYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetDivYieldOk() (*float64, bool) {
	if o == nil || IsNil(o.DivYield) {
		return nil, false
	}
	return o.DivYield, true
}

// HasDivYield returns a boolean if a field has been set.
func (o *Fundamental) HasDivYield() bool {
	if o != nil && !IsNil(o.DivYield) {
		return true
	}

	return false
}

// SetDivYield gets a reference to the given float64 and assigns it to the DivYield field.
func (o *Fundamental) SetDivYield(v float64) {
	o.DivYield = &v
}

// GetEps returns the Eps field value if set, zero value otherwise.
func (o *Fundamental) GetEps() float64 {
	if o == nil || IsNil(o.Eps) {
		var ret float64
		return ret
	}
	return *o.Eps
}

// GetEpsOk returns a tuple with the Eps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetEpsOk() (*float64, bool) {
	if o == nil || IsNil(o.Eps) {
		return nil, false
	}
	return o.Eps, true
}

// HasEps returns a boolean if a field has been set.
func (o *Fundamental) HasEps() bool {
	if o != nil && !IsNil(o.Eps) {
		return true
	}

	return false
}

// SetEps gets a reference to the given float64 and assigns it to the Eps field.
func (o *Fundamental) SetEps(v float64) {
	o.Eps = &v
}

// GetFundLeverageFactor returns the FundLeverageFactor field value if set, zero value otherwise.
func (o *Fundamental) GetFundLeverageFactor() float64 {
	if o == nil || IsNil(o.FundLeverageFactor) {
		var ret float64
		return ret
	}
	return *o.FundLeverageFactor
}

// GetFundLeverageFactorOk returns a tuple with the FundLeverageFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetFundLeverageFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.FundLeverageFactor) {
		return nil, false
	}
	return o.FundLeverageFactor, true
}

// HasFundLeverageFactor returns a boolean if a field has been set.
func (o *Fundamental) HasFundLeverageFactor() bool {
	if o != nil && !IsNil(o.FundLeverageFactor) {
		return true
	}

	return false
}

// SetFundLeverageFactor gets a reference to the given float64 and assigns it to the FundLeverageFactor field.
func (o *Fundamental) SetFundLeverageFactor(v float64) {
	o.FundLeverageFactor = &v
}

// GetFundStrategy returns the FundStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Fundamental) GetFundStrategy() FundStrategy {
	if o == nil || IsNil(o.FundStrategy.Get()) {
		var ret FundStrategy
		return ret
	}
	return *o.FundStrategy.Get()
}

// GetFundStrategyOk returns a tuple with the FundStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Fundamental) GetFundStrategyOk() (*FundStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.FundStrategy.Get(), o.FundStrategy.IsSet()
}

// HasFundStrategy returns a boolean if a field has been set.
func (o *Fundamental) HasFundStrategy() bool {
	if o != nil && o.FundStrategy.IsSet() {
		return true
	}

	return false
}

// SetFundStrategy gets a reference to the given NullableFundStrategy and assigns it to the FundStrategy field.
func (o *Fundamental) SetFundStrategy(v FundStrategy) {
	o.FundStrategy.Set(&v)
}
// SetFundStrategyNil sets the value for FundStrategy to be an explicit nil
func (o *Fundamental) SetFundStrategyNil() {
	o.FundStrategy.Set(nil)
}

// UnsetFundStrategy ensures that no value is present for FundStrategy, not even an explicit nil
func (o *Fundamental) UnsetFundStrategy() {
	o.FundStrategy.Unset()
}

// GetNextDivExDate returns the NextDivExDate field value if set, zero value otherwise.
func (o *Fundamental) GetNextDivExDate() time.Time {
	if o == nil || IsNil(o.NextDivExDate) {
		var ret time.Time
		return ret
	}
	return *o.NextDivExDate
}

// GetNextDivExDateOk returns a tuple with the NextDivExDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetNextDivExDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextDivExDate) {
		return nil, false
	}
	return o.NextDivExDate, true
}

// HasNextDivExDate returns a boolean if a field has been set.
func (o *Fundamental) HasNextDivExDate() bool {
	if o != nil && !IsNil(o.NextDivExDate) {
		return true
	}

	return false
}

// SetNextDivExDate gets a reference to the given time.Time and assigns it to the NextDivExDate field.
func (o *Fundamental) SetNextDivExDate(v time.Time) {
	o.NextDivExDate = &v
}

// GetNextDivPayDate returns the NextDivPayDate field value if set, zero value otherwise.
func (o *Fundamental) GetNextDivPayDate() time.Time {
	if o == nil || IsNil(o.NextDivPayDate) {
		var ret time.Time
		return ret
	}
	return *o.NextDivPayDate
}

// GetNextDivPayDateOk returns a tuple with the NextDivPayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetNextDivPayDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextDivPayDate) {
		return nil, false
	}
	return o.NextDivPayDate, true
}

// HasNextDivPayDate returns a boolean if a field has been set.
func (o *Fundamental) HasNextDivPayDate() bool {
	if o != nil && !IsNil(o.NextDivPayDate) {
		return true
	}

	return false
}

// SetNextDivPayDate gets a reference to the given time.Time and assigns it to the NextDivPayDate field.
func (o *Fundamental) SetNextDivPayDate(v time.Time) {
	o.NextDivPayDate = &v
}

// GetPeRatio returns the PeRatio field value if set, zero value otherwise.
func (o *Fundamental) GetPeRatio() float64 {
	if o == nil || IsNil(o.PeRatio) {
		var ret float64
		return ret
	}
	return *o.PeRatio
}

// GetPeRatioOk returns a tuple with the PeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fundamental) GetPeRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.PeRatio) {
		return nil, false
	}
	return o.PeRatio, true
}

// HasPeRatio returns a boolean if a field has been set.
func (o *Fundamental) HasPeRatio() bool {
	if o != nil && !IsNil(o.PeRatio) {
		return true
	}

	return false
}

// SetPeRatio gets a reference to the given float64 and assigns it to the PeRatio field.
func (o *Fundamental) SetPeRatio(v float64) {
	o.PeRatio = &v
}

func (o Fundamental) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fundamental) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avg10DaysVolume) {
		toSerialize["avg10DaysVolume"] = o.Avg10DaysVolume
	}
	if !IsNil(o.Avg1YearVolume) {
		toSerialize["avg1YearVolume"] = o.Avg1YearVolume
	}
	if !IsNil(o.DeclarationDate) {
		toSerialize["declarationDate"] = o.DeclarationDate
	}
	if !IsNil(o.DivAmount) {
		toSerialize["divAmount"] = o.DivAmount
	}
	if !IsNil(o.DivExDate) {
		toSerialize["divExDate"] = o.DivExDate
	}
	if o.DivFreq.IsSet() {
		toSerialize["divFreq"] = o.DivFreq.Get()
	}
	if !IsNil(o.DivPayAmount) {
		toSerialize["divPayAmount"] = o.DivPayAmount
	}
	if !IsNil(o.DivPayDate) {
		toSerialize["divPayDate"] = o.DivPayDate
	}
	if !IsNil(o.DivYield) {
		toSerialize["divYield"] = o.DivYield
	}
	if !IsNil(o.Eps) {
		toSerialize["eps"] = o.Eps
	}
	if !IsNil(o.FundLeverageFactor) {
		toSerialize["fundLeverageFactor"] = o.FundLeverageFactor
	}
	if o.FundStrategy.IsSet() {
		toSerialize["fundStrategy"] = o.FundStrategy.Get()
	}
	if !IsNil(o.NextDivExDate) {
		toSerialize["nextDivExDate"] = o.NextDivExDate
	}
	if !IsNil(o.NextDivPayDate) {
		toSerialize["nextDivPayDate"] = o.NextDivPayDate
	}
	if !IsNil(o.PeRatio) {
		toSerialize["peRatio"] = o.PeRatio
	}
	return toSerialize, nil
}

type NullableFundamental struct {
	value *Fundamental
	isSet bool
}

func (v NullableFundamental) Get() *Fundamental {
	return v.value
}

func (v *NullableFundamental) Set(val *Fundamental) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamental) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamental) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamental(val *Fundamental) *NullableFundamental {
	return &NullableFundamental{value: val, isSet: true}
}

func (v NullableFundamental) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamental) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


