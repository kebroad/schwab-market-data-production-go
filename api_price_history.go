/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// PriceHistoryAPIService PriceHistoryAPI service
type PriceHistoryAPIService service

type ApiGetPriceHistoryRequest struct {
	ctx context.Context
	ApiService *PriceHistoryAPIService
	symbol *string
	periodType *string
	period *int32
	frequencyType *string
	frequency *int32
	startDate *int64
	endDate *int64
	needExtendedHoursData *bool
	needPreviousClose *bool
}

// The Equity symbol used to look up price history
func (r ApiGetPriceHistoryRequest) Symbol(symbol string) ApiGetPriceHistoryRequest {
	r.symbol = &symbol
	return r
}

// The chart period being requested.
func (r ApiGetPriceHistoryRequest) PeriodType(periodType string) ApiGetPriceHistoryRequest {
	r.periodType = &periodType
	return r
}

// The number of chart period types.&lt;br&gt;&lt;br&gt; If the periodType is &lt;br&gt; &amp;#8226; &lt;b&gt;day&lt;/b&gt; - valid values are 1, 2, 3, 4, 5, 10&lt;br&gt; &amp;#8226; &lt;b&gt;month&lt;/b&gt; - valid values are 1, 2, 3, 6&lt;br&gt; &amp;#8226; &lt;b&gt;year&lt;/b&gt; - valid values are 1, 2, 3, 5, 10, 15, 20&lt;br&gt; &amp;#8226; &lt;b&gt;ytd&lt;/b&gt; - valid values are 1&lt;br&gt;&lt;br&gt; If   the period is not specified and the periodType is&lt;br&gt; &amp;#8226; &lt;b&gt;day&lt;/b&gt; - default period is 10.&lt;br&gt; &amp;#8226; &lt;b&gt;month&lt;/b&gt; - default period is 1.&lt;br&gt; &amp;#8226; &lt;b&gt;year&lt;/b&gt; - default period is 1.&lt;br&gt; &amp;#8226; &lt;b&gt;ytd&lt;/b&gt; - default period is 1.&lt;br&gt;
func (r ApiGetPriceHistoryRequest) Period(period int32) ApiGetPriceHistoryRequest {
	r.period = &period
	return r
}

// The time frequencyType&lt;br&gt;&lt;br&gt; If the periodType is &lt;br&gt; &amp;#8226; &lt;b&gt;day&lt;/b&gt; - valid value is minute&lt;br&gt; &amp;#8226; &lt;b&gt;month&lt;/b&gt; - valid values are daily, weekly&lt;br&gt; &amp;#8226; &lt;b&gt;year&lt;/b&gt; - valid values are daily, weekly, monthly&lt;br&gt; &amp;#8226; &lt;b&gt;ytd&lt;/b&gt; - valid values are daily, weekly&lt;br&gt;&lt;br&gt; If frequencyType  is not specified, default value depends on the periodType&lt;br&gt; &amp;#8226; &lt;b&gt;day&lt;/b&gt; - defaulted to minute.&lt;br&gt; &amp;#8226; &lt;b&gt;month&lt;/b&gt; - defaulted to weekly.&lt;br&gt; &amp;#8226; &lt;b&gt;year&lt;/b&gt; - defaulted to monthly.&lt;br&gt; &amp;#8226; &lt;b&gt;ytd&lt;/b&gt; - defaulted to weekly.&lt;br&gt;
func (r ApiGetPriceHistoryRequest) FrequencyType(frequencyType string) ApiGetPriceHistoryRequest {
	r.frequencyType = &frequencyType
	return r
}

// The time frequency duration&lt;br&gt;&lt;br&gt; If the frequencyType is &lt;br&gt; &amp;#8226; &lt;b&gt;minute&lt;/b&gt; - valid values are 1, 5, 10, 15, 30&lt;br&gt; &amp;#8226; &lt;b&gt;daily&lt;/b&gt; - valid value is 1&lt;br&gt; &amp;#8226; &lt;b&gt;weekly&lt;/b&gt; - valid value is 1&lt;br&gt; &amp;#8226; &lt;b&gt;monthly&lt;/b&gt; - valid value is 1&lt;br&gt;&lt;br&gt; If frequency  is not specified, default value is &lt;b&gt;1&lt;/b&gt;&lt;br&gt;
func (r ApiGetPriceHistoryRequest) Frequency(frequency int32) ApiGetPriceHistoryRequest {
	r.frequency = &frequency
	return r
}

// The start date, Time   in milliseconds since the UNIX epoch eg 1451624400000&lt;br&gt;If not   specified startDate will be (endDate - period) excluding weekends and holidays.
func (r ApiGetPriceHistoryRequest) StartDate(startDate int64) ApiGetPriceHistoryRequest {
	r.startDate = &startDate
	return r
}

// The end date, Time   in milliseconds since the UNIX epoch eg 1451624400000&lt;br&gt; If not   specified, the endDate will default to the market close of previous business day.
func (r ApiGetPriceHistoryRequest) EndDate(endDate int64) ApiGetPriceHistoryRequest {
	r.endDate = &endDate
	return r
}

// Need extended hours data
func (r ApiGetPriceHistoryRequest) NeedExtendedHoursData(needExtendedHoursData bool) ApiGetPriceHistoryRequest {
	r.needExtendedHoursData = &needExtendedHoursData
	return r
}

// Need previous close price/date
func (r ApiGetPriceHistoryRequest) NeedPreviousClose(needPreviousClose bool) ApiGetPriceHistoryRequest {
	r.needPreviousClose = &needPreviousClose
	return r
}

func (r ApiGetPriceHistoryRequest) Execute() (*CandleList, *http.Response, error) {
	return r.ApiService.GetPriceHistoryExecute(r)
}

/*
GetPriceHistory Get PriceHistory for a single symbol and date ranges.

Get historical Open, High, Low, Close, and Volume for a given frequency (i.e. aggregation).  Frequency available is dependent on periodType selected.  The datetime format is in EPOCH milliseconds.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPriceHistoryRequest
*/
func (a *PriceHistoryAPIService) GetPriceHistory(ctx context.Context) ApiGetPriceHistoryRequest {
	return ApiGetPriceHistoryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CandleList
func (a *PriceHistoryAPIService) GetPriceHistoryExecute(r ApiGetPriceHistoryRequest) (*CandleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CandleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceHistoryAPIService.GetPriceHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pricehistory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "form", "")
	if r.periodType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "periodType", r.periodType, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	if r.frequencyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "frequencyType", r.frequencyType, "form", "")
	}
	if r.frequency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "frequency", r.frequency, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.needExtendedHoursData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "needExtendedHoursData", r.needExtendedHoursData, "form", "")
	}
	if r.needPreviousClose != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "needPreviousClose", r.needPreviousClose, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
