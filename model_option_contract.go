/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OptionContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionContract{}

// OptionContract struct for OptionContract
type OptionContract struct {
	PutCall *string `json:"putCall,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Description *string `json:"description,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	BidPrice *float64 `json:"bidPrice,omitempty"`
	AskPrice *float64 `json:"askPrice,omitempty"`
	LastPrice *float64 `json:"lastPrice,omitempty"`
	MarkPrice *float64 `json:"markPrice,omitempty"`
	BidSize *int32 `json:"bidSize,omitempty"`
	AskSize *int32 `json:"askSize,omitempty"`
	LastSize *int32 `json:"lastSize,omitempty"`
	HighPrice *float64 `json:"highPrice,omitempty"`
	LowPrice *float64 `json:"lowPrice,omitempty"`
	OpenPrice *float64 `json:"openPrice,omitempty"`
	ClosePrice *float64 `json:"closePrice,omitempty"`
	TotalVolume *int32 `json:"totalVolume,omitempty"`
	TradeDate *float32 `json:"tradeDate,omitempty"`
	QuoteTimeInLong *int32 `json:"quoteTimeInLong,omitempty"`
	TradeTimeInLong *int32 `json:"tradeTimeInLong,omitempty"`
	NetChange *float64 `json:"netChange,omitempty"`
	Volatility *float64 `json:"volatility,omitempty"`
	Delta *float64 `json:"delta,omitempty"`
	Gamma *float64 `json:"gamma,omitempty"`
	Theta *float64 `json:"theta,omitempty"`
	Vega *float64 `json:"vega,omitempty"`
	Rho *float64 `json:"rho,omitempty"`
	TimeValue *float64 `json:"timeValue,omitempty"`
	OpenInterest *float64 `json:"openInterest,omitempty"`
	IsInTheMoney *bool `json:"isInTheMoney,omitempty"`
	TheoreticalOptionValue *float64 `json:"theoreticalOptionValue,omitempty"`
	TheoreticalVolatility *float64 `json:"theoreticalVolatility,omitempty"`
	IsMini *bool `json:"isMini,omitempty"`
	IsNonStandard *bool `json:"isNonStandard,omitempty"`
	OptionDeliverablesList []OptionDeliverables `json:"optionDeliverablesList,omitempty"`
	StrikePrice *float64 `json:"strikePrice,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	DaysToExpiration *float32 `json:"daysToExpiration,omitempty"`
	ExpirationType *ExpirationType `json:"expirationType,omitempty"`
	LastTradingDay *float32 `json:"lastTradingDay,omitempty"`
	Multiplier *float64 `json:"multiplier,omitempty"`
	SettlementType *SettlementType `json:"settlementType,omitempty"`
	DeliverableNote *string `json:"deliverableNote,omitempty"`
	IsIndexOption *bool `json:"isIndexOption,omitempty"`
	PercentChange *float64 `json:"percentChange,omitempty"`
	MarkChange *float64 `json:"markChange,omitempty"`
	MarkPercentChange *float64 `json:"markPercentChange,omitempty"`
	IsPennyPilot *bool `json:"isPennyPilot,omitempty"`
	IntrinsicValue *float64 `json:"intrinsicValue,omitempty"`
	OptionRoot *string `json:"optionRoot,omitempty"`
}

// NewOptionContract instantiates a new OptionContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionContract() *OptionContract {
	this := OptionContract{}
	return &this
}

// NewOptionContractWithDefaults instantiates a new OptionContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionContractWithDefaults() *OptionContract {
	this := OptionContract{}
	return &this
}

// GetPutCall returns the PutCall field value if set, zero value otherwise.
func (o *OptionContract) GetPutCall() string {
	if o == nil || IsNil(o.PutCall) {
		var ret string
		return ret
	}
	return *o.PutCall
}

// GetPutCallOk returns a tuple with the PutCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetPutCallOk() (*string, bool) {
	if o == nil || IsNil(o.PutCall) {
		return nil, false
	}
	return o.PutCall, true
}

// HasPutCall returns a boolean if a field has been set.
func (o *OptionContract) HasPutCall() bool {
	if o != nil && !IsNil(o.PutCall) {
		return true
	}

	return false
}

// SetPutCall gets a reference to the given string and assigns it to the PutCall field.
func (o *OptionContract) SetPutCall(v string) {
	o.PutCall = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OptionContract) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OptionContract) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OptionContract) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OptionContract) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OptionContract) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OptionContract) SetDescription(v string) {
	o.Description = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *OptionContract) GetExchangeName() string {
	if o == nil || IsNil(o.ExchangeName) {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetExchangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeName) {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *OptionContract) HasExchangeName() bool {
	if o != nil && !IsNil(o.ExchangeName) {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *OptionContract) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *OptionContract) GetBidPrice() float64 {
	if o == nil || IsNil(o.BidPrice) {
		var ret float64
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetBidPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *OptionContract) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float64 and assigns it to the BidPrice field.
func (o *OptionContract) SetBidPrice(v float64) {
	o.BidPrice = &v
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *OptionContract) GetAskPrice() float64 {
	if o == nil || IsNil(o.AskPrice) {
		var ret float64
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetAskPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *OptionContract) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float64 and assigns it to the AskPrice field.
func (o *OptionContract) SetAskPrice(v float64) {
	o.AskPrice = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *OptionContract) GetLastPrice() float64 {
	if o == nil || IsNil(o.LastPrice) {
		var ret float64
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetLastPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.LastPrice) {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *OptionContract) HasLastPrice() bool {
	if o != nil && !IsNil(o.LastPrice) {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given float64 and assigns it to the LastPrice field.
func (o *OptionContract) SetLastPrice(v float64) {
	o.LastPrice = &v
}

// GetMarkPrice returns the MarkPrice field value if set, zero value otherwise.
func (o *OptionContract) GetMarkPrice() float64 {
	if o == nil || IsNil(o.MarkPrice) {
		var ret float64
		return ret
	}
	return *o.MarkPrice
}

// GetMarkPriceOk returns a tuple with the MarkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetMarkPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.MarkPrice) {
		return nil, false
	}
	return o.MarkPrice, true
}

// HasMarkPrice returns a boolean if a field has been set.
func (o *OptionContract) HasMarkPrice() bool {
	if o != nil && !IsNil(o.MarkPrice) {
		return true
	}

	return false
}

// SetMarkPrice gets a reference to the given float64 and assigns it to the MarkPrice field.
func (o *OptionContract) SetMarkPrice(v float64) {
	o.MarkPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *OptionContract) GetBidSize() int32 {
	if o == nil || IsNil(o.BidSize) {
		var ret int32
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetBidSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *OptionContract) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given int32 and assigns it to the BidSize field.
func (o *OptionContract) SetBidSize(v int32) {
	o.BidSize = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *OptionContract) GetAskSize() int32 {
	if o == nil || IsNil(o.AskSize) {
		var ret int32
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetAskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *OptionContract) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given int32 and assigns it to the AskSize field.
func (o *OptionContract) SetAskSize(v int32) {
	o.AskSize = &v
}

// GetLastSize returns the LastSize field value if set, zero value otherwise.
func (o *OptionContract) GetLastSize() int32 {
	if o == nil || IsNil(o.LastSize) {
		var ret int32
		return ret
	}
	return *o.LastSize
}

// GetLastSizeOk returns a tuple with the LastSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetLastSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSize) {
		return nil, false
	}
	return o.LastSize, true
}

// HasLastSize returns a boolean if a field has been set.
func (o *OptionContract) HasLastSize() bool {
	if o != nil && !IsNil(o.LastSize) {
		return true
	}

	return false
}

// SetLastSize gets a reference to the given int32 and assigns it to the LastSize field.
func (o *OptionContract) SetLastSize(v int32) {
	o.LastSize = &v
}

// GetHighPrice returns the HighPrice field value if set, zero value otherwise.
func (o *OptionContract) GetHighPrice() float64 {
	if o == nil || IsNil(o.HighPrice) {
		var ret float64
		return ret
	}
	return *o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetHighPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.HighPrice) {
		return nil, false
	}
	return o.HighPrice, true
}

// HasHighPrice returns a boolean if a field has been set.
func (o *OptionContract) HasHighPrice() bool {
	if o != nil && !IsNil(o.HighPrice) {
		return true
	}

	return false
}

// SetHighPrice gets a reference to the given float64 and assigns it to the HighPrice field.
func (o *OptionContract) SetHighPrice(v float64) {
	o.HighPrice = &v
}

// GetLowPrice returns the LowPrice field value if set, zero value otherwise.
func (o *OptionContract) GetLowPrice() float64 {
	if o == nil || IsNil(o.LowPrice) {
		var ret float64
		return ret
	}
	return *o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetLowPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.LowPrice) {
		return nil, false
	}
	return o.LowPrice, true
}

// HasLowPrice returns a boolean if a field has been set.
func (o *OptionContract) HasLowPrice() bool {
	if o != nil && !IsNil(o.LowPrice) {
		return true
	}

	return false
}

// SetLowPrice gets a reference to the given float64 and assigns it to the LowPrice field.
func (o *OptionContract) SetLowPrice(v float64) {
	o.LowPrice = &v
}

// GetOpenPrice returns the OpenPrice field value if set, zero value otherwise.
func (o *OptionContract) GetOpenPrice() float64 {
	if o == nil || IsNil(o.OpenPrice) {
		var ret float64
		return ret
	}
	return *o.OpenPrice
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetOpenPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.OpenPrice) {
		return nil, false
	}
	return o.OpenPrice, true
}

// HasOpenPrice returns a boolean if a field has been set.
func (o *OptionContract) HasOpenPrice() bool {
	if o != nil && !IsNil(o.OpenPrice) {
		return true
	}

	return false
}

// SetOpenPrice gets a reference to the given float64 and assigns it to the OpenPrice field.
func (o *OptionContract) SetOpenPrice(v float64) {
	o.OpenPrice = &v
}

// GetClosePrice returns the ClosePrice field value if set, zero value otherwise.
func (o *OptionContract) GetClosePrice() float64 {
	if o == nil || IsNil(o.ClosePrice) {
		var ret float64
		return ret
	}
	return *o.ClosePrice
}

// GetClosePriceOk returns a tuple with the ClosePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetClosePriceOk() (*float64, bool) {
	if o == nil || IsNil(o.ClosePrice) {
		return nil, false
	}
	return o.ClosePrice, true
}

// HasClosePrice returns a boolean if a field has been set.
func (o *OptionContract) HasClosePrice() bool {
	if o != nil && !IsNil(o.ClosePrice) {
		return true
	}

	return false
}

// SetClosePrice gets a reference to the given float64 and assigns it to the ClosePrice field.
func (o *OptionContract) SetClosePrice(v float64) {
	o.ClosePrice = &v
}

// GetTotalVolume returns the TotalVolume field value if set, zero value otherwise.
func (o *OptionContract) GetTotalVolume() int32 {
	if o == nil || IsNil(o.TotalVolume) {
		var ret int32
		return ret
	}
	return *o.TotalVolume
}

// GetTotalVolumeOk returns a tuple with the TotalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetTotalVolumeOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalVolume) {
		return nil, false
	}
	return o.TotalVolume, true
}

// HasTotalVolume returns a boolean if a field has been set.
func (o *OptionContract) HasTotalVolume() bool {
	if o != nil && !IsNil(o.TotalVolume) {
		return true
	}

	return false
}

// SetTotalVolume gets a reference to the given int32 and assigns it to the TotalVolume field.
func (o *OptionContract) SetTotalVolume(v int32) {
	o.TotalVolume = &v
}

// GetTradeDate returns the TradeDate field value if set, zero value otherwise.
func (o *OptionContract) GetTradeDate() float32 {
	if o == nil || IsNil(o.TradeDate) {
		var ret float32
		return ret
	}
	return *o.TradeDate
}

// GetTradeDateOk returns a tuple with the TradeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetTradeDateOk() (*float32, bool) {
	if o == nil || IsNil(o.TradeDate) {
		return nil, false
	}
	return o.TradeDate, true
}

// HasTradeDate returns a boolean if a field has been set.
func (o *OptionContract) HasTradeDate() bool {
	if o != nil && !IsNil(o.TradeDate) {
		return true
	}

	return false
}

// SetTradeDate gets a reference to the given float32 and assigns it to the TradeDate field.
func (o *OptionContract) SetTradeDate(v float32) {
	o.TradeDate = &v
}

// GetQuoteTimeInLong returns the QuoteTimeInLong field value if set, zero value otherwise.
func (o *OptionContract) GetQuoteTimeInLong() int32 {
	if o == nil || IsNil(o.QuoteTimeInLong) {
		var ret int32
		return ret
	}
	return *o.QuoteTimeInLong
}

// GetQuoteTimeInLongOk returns a tuple with the QuoteTimeInLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetQuoteTimeInLongOk() (*int32, bool) {
	if o == nil || IsNil(o.QuoteTimeInLong) {
		return nil, false
	}
	return o.QuoteTimeInLong, true
}

// HasQuoteTimeInLong returns a boolean if a field has been set.
func (o *OptionContract) HasQuoteTimeInLong() bool {
	if o != nil && !IsNil(o.QuoteTimeInLong) {
		return true
	}

	return false
}

// SetQuoteTimeInLong gets a reference to the given int32 and assigns it to the QuoteTimeInLong field.
func (o *OptionContract) SetQuoteTimeInLong(v int32) {
	o.QuoteTimeInLong = &v
}

// GetTradeTimeInLong returns the TradeTimeInLong field value if set, zero value otherwise.
func (o *OptionContract) GetTradeTimeInLong() int32 {
	if o == nil || IsNil(o.TradeTimeInLong) {
		var ret int32
		return ret
	}
	return *o.TradeTimeInLong
}

// GetTradeTimeInLongOk returns a tuple with the TradeTimeInLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetTradeTimeInLongOk() (*int32, bool) {
	if o == nil || IsNil(o.TradeTimeInLong) {
		return nil, false
	}
	return o.TradeTimeInLong, true
}

// HasTradeTimeInLong returns a boolean if a field has been set.
func (o *OptionContract) HasTradeTimeInLong() bool {
	if o != nil && !IsNil(o.TradeTimeInLong) {
		return true
	}

	return false
}

// SetTradeTimeInLong gets a reference to the given int32 and assigns it to the TradeTimeInLong field.
func (o *OptionContract) SetTradeTimeInLong(v int32) {
	o.TradeTimeInLong = &v
}

// GetNetChange returns the NetChange field value if set, zero value otherwise.
func (o *OptionContract) GetNetChange() float64 {
	if o == nil || IsNil(o.NetChange) {
		var ret float64
		return ret
	}
	return *o.NetChange
}

// GetNetChangeOk returns a tuple with the NetChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetNetChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.NetChange) {
		return nil, false
	}
	return o.NetChange, true
}

// HasNetChange returns a boolean if a field has been set.
func (o *OptionContract) HasNetChange() bool {
	if o != nil && !IsNil(o.NetChange) {
		return true
	}

	return false
}

// SetNetChange gets a reference to the given float64 and assigns it to the NetChange field.
func (o *OptionContract) SetNetChange(v float64) {
	o.NetChange = &v
}

// GetVolatility returns the Volatility field value if set, zero value otherwise.
func (o *OptionContract) GetVolatility() float64 {
	if o == nil || IsNil(o.Volatility) {
		var ret float64
		return ret
	}
	return *o.Volatility
}

// GetVolatilityOk returns a tuple with the Volatility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetVolatilityOk() (*float64, bool) {
	if o == nil || IsNil(o.Volatility) {
		return nil, false
	}
	return o.Volatility, true
}

// HasVolatility returns a boolean if a field has been set.
func (o *OptionContract) HasVolatility() bool {
	if o != nil && !IsNil(o.Volatility) {
		return true
	}

	return false
}

// SetVolatility gets a reference to the given float64 and assigns it to the Volatility field.
func (o *OptionContract) SetVolatility(v float64) {
	o.Volatility = &v
}

// GetDelta returns the Delta field value if set, zero value otherwise.
func (o *OptionContract) GetDelta() float64 {
	if o == nil || IsNil(o.Delta) {
		var ret float64
		return ret
	}
	return *o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetDeltaOk() (*float64, bool) {
	if o == nil || IsNil(o.Delta) {
		return nil, false
	}
	return o.Delta, true
}

// HasDelta returns a boolean if a field has been set.
func (o *OptionContract) HasDelta() bool {
	if o != nil && !IsNil(o.Delta) {
		return true
	}

	return false
}

// SetDelta gets a reference to the given float64 and assigns it to the Delta field.
func (o *OptionContract) SetDelta(v float64) {
	o.Delta = &v
}

// GetGamma returns the Gamma field value if set, zero value otherwise.
func (o *OptionContract) GetGamma() float64 {
	if o == nil || IsNil(o.Gamma) {
		var ret float64
		return ret
	}
	return *o.Gamma
}

// GetGammaOk returns a tuple with the Gamma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetGammaOk() (*float64, bool) {
	if o == nil || IsNil(o.Gamma) {
		return nil, false
	}
	return o.Gamma, true
}

// HasGamma returns a boolean if a field has been set.
func (o *OptionContract) HasGamma() bool {
	if o != nil && !IsNil(o.Gamma) {
		return true
	}

	return false
}

// SetGamma gets a reference to the given float64 and assigns it to the Gamma field.
func (o *OptionContract) SetGamma(v float64) {
	o.Gamma = &v
}

// GetTheta returns the Theta field value if set, zero value otherwise.
func (o *OptionContract) GetTheta() float64 {
	if o == nil || IsNil(o.Theta) {
		var ret float64
		return ret
	}
	return *o.Theta
}

// GetThetaOk returns a tuple with the Theta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetThetaOk() (*float64, bool) {
	if o == nil || IsNil(o.Theta) {
		return nil, false
	}
	return o.Theta, true
}

// HasTheta returns a boolean if a field has been set.
func (o *OptionContract) HasTheta() bool {
	if o != nil && !IsNil(o.Theta) {
		return true
	}

	return false
}

// SetTheta gets a reference to the given float64 and assigns it to the Theta field.
func (o *OptionContract) SetTheta(v float64) {
	o.Theta = &v
}

// GetVega returns the Vega field value if set, zero value otherwise.
func (o *OptionContract) GetVega() float64 {
	if o == nil || IsNil(o.Vega) {
		var ret float64
		return ret
	}
	return *o.Vega
}

// GetVegaOk returns a tuple with the Vega field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetVegaOk() (*float64, bool) {
	if o == nil || IsNil(o.Vega) {
		return nil, false
	}
	return o.Vega, true
}

// HasVega returns a boolean if a field has been set.
func (o *OptionContract) HasVega() bool {
	if o != nil && !IsNil(o.Vega) {
		return true
	}

	return false
}

// SetVega gets a reference to the given float64 and assigns it to the Vega field.
func (o *OptionContract) SetVega(v float64) {
	o.Vega = &v
}

// GetRho returns the Rho field value if set, zero value otherwise.
func (o *OptionContract) GetRho() float64 {
	if o == nil || IsNil(o.Rho) {
		var ret float64
		return ret
	}
	return *o.Rho
}

// GetRhoOk returns a tuple with the Rho field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetRhoOk() (*float64, bool) {
	if o == nil || IsNil(o.Rho) {
		return nil, false
	}
	return o.Rho, true
}

// HasRho returns a boolean if a field has been set.
func (o *OptionContract) HasRho() bool {
	if o != nil && !IsNil(o.Rho) {
		return true
	}

	return false
}

// SetRho gets a reference to the given float64 and assigns it to the Rho field.
func (o *OptionContract) SetRho(v float64) {
	o.Rho = &v
}

// GetTimeValue returns the TimeValue field value if set, zero value otherwise.
func (o *OptionContract) GetTimeValue() float64 {
	if o == nil || IsNil(o.TimeValue) {
		var ret float64
		return ret
	}
	return *o.TimeValue
}

// GetTimeValueOk returns a tuple with the TimeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetTimeValueOk() (*float64, bool) {
	if o == nil || IsNil(o.TimeValue) {
		return nil, false
	}
	return o.TimeValue, true
}

// HasTimeValue returns a boolean if a field has been set.
func (o *OptionContract) HasTimeValue() bool {
	if o != nil && !IsNil(o.TimeValue) {
		return true
	}

	return false
}

// SetTimeValue gets a reference to the given float64 and assigns it to the TimeValue field.
func (o *OptionContract) SetTimeValue(v float64) {
	o.TimeValue = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *OptionContract) GetOpenInterest() float64 {
	if o == nil || IsNil(o.OpenInterest) {
		var ret float64
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetOpenInterestOk() (*float64, bool) {
	if o == nil || IsNil(o.OpenInterest) {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *OptionContract) HasOpenInterest() bool {
	if o != nil && !IsNil(o.OpenInterest) {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given float64 and assigns it to the OpenInterest field.
func (o *OptionContract) SetOpenInterest(v float64) {
	o.OpenInterest = &v
}

// GetIsInTheMoney returns the IsInTheMoney field value if set, zero value otherwise.
func (o *OptionContract) GetIsInTheMoney() bool {
	if o == nil || IsNil(o.IsInTheMoney) {
		var ret bool
		return ret
	}
	return *o.IsInTheMoney
}

// GetIsInTheMoneyOk returns a tuple with the IsInTheMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetIsInTheMoneyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInTheMoney) {
		return nil, false
	}
	return o.IsInTheMoney, true
}

// HasIsInTheMoney returns a boolean if a field has been set.
func (o *OptionContract) HasIsInTheMoney() bool {
	if o != nil && !IsNil(o.IsInTheMoney) {
		return true
	}

	return false
}

// SetIsInTheMoney gets a reference to the given bool and assigns it to the IsInTheMoney field.
func (o *OptionContract) SetIsInTheMoney(v bool) {
	o.IsInTheMoney = &v
}

// GetTheoreticalOptionValue returns the TheoreticalOptionValue field value if set, zero value otherwise.
func (o *OptionContract) GetTheoreticalOptionValue() float64 {
	if o == nil || IsNil(o.TheoreticalOptionValue) {
		var ret float64
		return ret
	}
	return *o.TheoreticalOptionValue
}

// GetTheoreticalOptionValueOk returns a tuple with the TheoreticalOptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetTheoreticalOptionValueOk() (*float64, bool) {
	if o == nil || IsNil(o.TheoreticalOptionValue) {
		return nil, false
	}
	return o.TheoreticalOptionValue, true
}

// HasTheoreticalOptionValue returns a boolean if a field has been set.
func (o *OptionContract) HasTheoreticalOptionValue() bool {
	if o != nil && !IsNil(o.TheoreticalOptionValue) {
		return true
	}

	return false
}

// SetTheoreticalOptionValue gets a reference to the given float64 and assigns it to the TheoreticalOptionValue field.
func (o *OptionContract) SetTheoreticalOptionValue(v float64) {
	o.TheoreticalOptionValue = &v
}

// GetTheoreticalVolatility returns the TheoreticalVolatility field value if set, zero value otherwise.
func (o *OptionContract) GetTheoreticalVolatility() float64 {
	if o == nil || IsNil(o.TheoreticalVolatility) {
		var ret float64
		return ret
	}
	return *o.TheoreticalVolatility
}

// GetTheoreticalVolatilityOk returns a tuple with the TheoreticalVolatility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetTheoreticalVolatilityOk() (*float64, bool) {
	if o == nil || IsNil(o.TheoreticalVolatility) {
		return nil, false
	}
	return o.TheoreticalVolatility, true
}

// HasTheoreticalVolatility returns a boolean if a field has been set.
func (o *OptionContract) HasTheoreticalVolatility() bool {
	if o != nil && !IsNil(o.TheoreticalVolatility) {
		return true
	}

	return false
}

// SetTheoreticalVolatility gets a reference to the given float64 and assigns it to the TheoreticalVolatility field.
func (o *OptionContract) SetTheoreticalVolatility(v float64) {
	o.TheoreticalVolatility = &v
}

// GetIsMini returns the IsMini field value if set, zero value otherwise.
func (o *OptionContract) GetIsMini() bool {
	if o == nil || IsNil(o.IsMini) {
		var ret bool
		return ret
	}
	return *o.IsMini
}

// GetIsMiniOk returns a tuple with the IsMini field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetIsMiniOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMini) {
		return nil, false
	}
	return o.IsMini, true
}

// HasIsMini returns a boolean if a field has been set.
func (o *OptionContract) HasIsMini() bool {
	if o != nil && !IsNil(o.IsMini) {
		return true
	}

	return false
}

// SetIsMini gets a reference to the given bool and assigns it to the IsMini field.
func (o *OptionContract) SetIsMini(v bool) {
	o.IsMini = &v
}

// GetIsNonStandard returns the IsNonStandard field value if set, zero value otherwise.
func (o *OptionContract) GetIsNonStandard() bool {
	if o == nil || IsNil(o.IsNonStandard) {
		var ret bool
		return ret
	}
	return *o.IsNonStandard
}

// GetIsNonStandardOk returns a tuple with the IsNonStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetIsNonStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNonStandard) {
		return nil, false
	}
	return o.IsNonStandard, true
}

// HasIsNonStandard returns a boolean if a field has been set.
func (o *OptionContract) HasIsNonStandard() bool {
	if o != nil && !IsNil(o.IsNonStandard) {
		return true
	}

	return false
}

// SetIsNonStandard gets a reference to the given bool and assigns it to the IsNonStandard field.
func (o *OptionContract) SetIsNonStandard(v bool) {
	o.IsNonStandard = &v
}

// GetOptionDeliverablesList returns the OptionDeliverablesList field value if set, zero value otherwise.
func (o *OptionContract) GetOptionDeliverablesList() []OptionDeliverables {
	if o == nil || IsNil(o.OptionDeliverablesList) {
		var ret []OptionDeliverables
		return ret
	}
	return o.OptionDeliverablesList
}

// GetOptionDeliverablesListOk returns a tuple with the OptionDeliverablesList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetOptionDeliverablesListOk() ([]OptionDeliverables, bool) {
	if o == nil || IsNil(o.OptionDeliverablesList) {
		return nil, false
	}
	return o.OptionDeliverablesList, true
}

// HasOptionDeliverablesList returns a boolean if a field has been set.
func (o *OptionContract) HasOptionDeliverablesList() bool {
	if o != nil && !IsNil(o.OptionDeliverablesList) {
		return true
	}

	return false
}

// SetOptionDeliverablesList gets a reference to the given []OptionDeliverables and assigns it to the OptionDeliverablesList field.
func (o *OptionContract) SetOptionDeliverablesList(v []OptionDeliverables) {
	o.OptionDeliverablesList = v
}

// GetStrikePrice returns the StrikePrice field value if set, zero value otherwise.
func (o *OptionContract) GetStrikePrice() float64 {
	if o == nil || IsNil(o.StrikePrice) {
		var ret float64
		return ret
	}
	return *o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetStrikePriceOk() (*float64, bool) {
	if o == nil || IsNil(o.StrikePrice) {
		return nil, false
	}
	return o.StrikePrice, true
}

// HasStrikePrice returns a boolean if a field has been set.
func (o *OptionContract) HasStrikePrice() bool {
	if o != nil && !IsNil(o.StrikePrice) {
		return true
	}

	return false
}

// SetStrikePrice gets a reference to the given float64 and assigns it to the StrikePrice field.
func (o *OptionContract) SetStrikePrice(v float64) {
	o.StrikePrice = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *OptionContract) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *OptionContract) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *OptionContract) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetDaysToExpiration returns the DaysToExpiration field value if set, zero value otherwise.
func (o *OptionContract) GetDaysToExpiration() float32 {
	if o == nil || IsNil(o.DaysToExpiration) {
		var ret float32
		return ret
	}
	return *o.DaysToExpiration
}

// GetDaysToExpirationOk returns a tuple with the DaysToExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetDaysToExpirationOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysToExpiration) {
		return nil, false
	}
	return o.DaysToExpiration, true
}

// HasDaysToExpiration returns a boolean if a field has been set.
func (o *OptionContract) HasDaysToExpiration() bool {
	if o != nil && !IsNil(o.DaysToExpiration) {
		return true
	}

	return false
}

// SetDaysToExpiration gets a reference to the given float32 and assigns it to the DaysToExpiration field.
func (o *OptionContract) SetDaysToExpiration(v float32) {
	o.DaysToExpiration = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *OptionContract) GetExpirationType() ExpirationType {
	if o == nil || IsNil(o.ExpirationType) {
		var ret ExpirationType
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetExpirationTypeOk() (*ExpirationType, bool) {
	if o == nil || IsNil(o.ExpirationType) {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *OptionContract) HasExpirationType() bool {
	if o != nil && !IsNil(o.ExpirationType) {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given ExpirationType and assigns it to the ExpirationType field.
func (o *OptionContract) SetExpirationType(v ExpirationType) {
	o.ExpirationType = &v
}

// GetLastTradingDay returns the LastTradingDay field value if set, zero value otherwise.
func (o *OptionContract) GetLastTradingDay() float32 {
	if o == nil || IsNil(o.LastTradingDay) {
		var ret float32
		return ret
	}
	return *o.LastTradingDay
}

// GetLastTradingDayOk returns a tuple with the LastTradingDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetLastTradingDayOk() (*float32, bool) {
	if o == nil || IsNil(o.LastTradingDay) {
		return nil, false
	}
	return o.LastTradingDay, true
}

// HasLastTradingDay returns a boolean if a field has been set.
func (o *OptionContract) HasLastTradingDay() bool {
	if o != nil && !IsNil(o.LastTradingDay) {
		return true
	}

	return false
}

// SetLastTradingDay gets a reference to the given float32 and assigns it to the LastTradingDay field.
func (o *OptionContract) SetLastTradingDay(v float32) {
	o.LastTradingDay = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *OptionContract) GetMultiplier() float64 {
	if o == nil || IsNil(o.Multiplier) {
		var ret float64
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetMultiplierOk() (*float64, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *OptionContract) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given float64 and assigns it to the Multiplier field.
func (o *OptionContract) SetMultiplier(v float64) {
	o.Multiplier = &v
}

// GetSettlementType returns the SettlementType field value if set, zero value otherwise.
func (o *OptionContract) GetSettlementType() SettlementType {
	if o == nil || IsNil(o.SettlementType) {
		var ret SettlementType
		return ret
	}
	return *o.SettlementType
}

// GetSettlementTypeOk returns a tuple with the SettlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetSettlementTypeOk() (*SettlementType, bool) {
	if o == nil || IsNil(o.SettlementType) {
		return nil, false
	}
	return o.SettlementType, true
}

// HasSettlementType returns a boolean if a field has been set.
func (o *OptionContract) HasSettlementType() bool {
	if o != nil && !IsNil(o.SettlementType) {
		return true
	}

	return false
}

// SetSettlementType gets a reference to the given SettlementType and assigns it to the SettlementType field.
func (o *OptionContract) SetSettlementType(v SettlementType) {
	o.SettlementType = &v
}

// GetDeliverableNote returns the DeliverableNote field value if set, zero value otherwise.
func (o *OptionContract) GetDeliverableNote() string {
	if o == nil || IsNil(o.DeliverableNote) {
		var ret string
		return ret
	}
	return *o.DeliverableNote
}

// GetDeliverableNoteOk returns a tuple with the DeliverableNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetDeliverableNoteOk() (*string, bool) {
	if o == nil || IsNil(o.DeliverableNote) {
		return nil, false
	}
	return o.DeliverableNote, true
}

// HasDeliverableNote returns a boolean if a field has been set.
func (o *OptionContract) HasDeliverableNote() bool {
	if o != nil && !IsNil(o.DeliverableNote) {
		return true
	}

	return false
}

// SetDeliverableNote gets a reference to the given string and assigns it to the DeliverableNote field.
func (o *OptionContract) SetDeliverableNote(v string) {
	o.DeliverableNote = &v
}

// GetIsIndexOption returns the IsIndexOption field value if set, zero value otherwise.
func (o *OptionContract) GetIsIndexOption() bool {
	if o == nil || IsNil(o.IsIndexOption) {
		var ret bool
		return ret
	}
	return *o.IsIndexOption
}

// GetIsIndexOptionOk returns a tuple with the IsIndexOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetIsIndexOptionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIndexOption) {
		return nil, false
	}
	return o.IsIndexOption, true
}

// HasIsIndexOption returns a boolean if a field has been set.
func (o *OptionContract) HasIsIndexOption() bool {
	if o != nil && !IsNil(o.IsIndexOption) {
		return true
	}

	return false
}

// SetIsIndexOption gets a reference to the given bool and assigns it to the IsIndexOption field.
func (o *OptionContract) SetIsIndexOption(v bool) {
	o.IsIndexOption = &v
}

// GetPercentChange returns the PercentChange field value if set, zero value otherwise.
func (o *OptionContract) GetPercentChange() float64 {
	if o == nil || IsNil(o.PercentChange) {
		var ret float64
		return ret
	}
	return *o.PercentChange
}

// GetPercentChangeOk returns a tuple with the PercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetPercentChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.PercentChange) {
		return nil, false
	}
	return o.PercentChange, true
}

// HasPercentChange returns a boolean if a field has been set.
func (o *OptionContract) HasPercentChange() bool {
	if o != nil && !IsNil(o.PercentChange) {
		return true
	}

	return false
}

// SetPercentChange gets a reference to the given float64 and assigns it to the PercentChange field.
func (o *OptionContract) SetPercentChange(v float64) {
	o.PercentChange = &v
}

// GetMarkChange returns the MarkChange field value if set, zero value otherwise.
func (o *OptionContract) GetMarkChange() float64 {
	if o == nil || IsNil(o.MarkChange) {
		var ret float64
		return ret
	}
	return *o.MarkChange
}

// GetMarkChangeOk returns a tuple with the MarkChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetMarkChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.MarkChange) {
		return nil, false
	}
	return o.MarkChange, true
}

// HasMarkChange returns a boolean if a field has been set.
func (o *OptionContract) HasMarkChange() bool {
	if o != nil && !IsNil(o.MarkChange) {
		return true
	}

	return false
}

// SetMarkChange gets a reference to the given float64 and assigns it to the MarkChange field.
func (o *OptionContract) SetMarkChange(v float64) {
	o.MarkChange = &v
}

// GetMarkPercentChange returns the MarkPercentChange field value if set, zero value otherwise.
func (o *OptionContract) GetMarkPercentChange() float64 {
	if o == nil || IsNil(o.MarkPercentChange) {
		var ret float64
		return ret
	}
	return *o.MarkPercentChange
}

// GetMarkPercentChangeOk returns a tuple with the MarkPercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetMarkPercentChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.MarkPercentChange) {
		return nil, false
	}
	return o.MarkPercentChange, true
}

// HasMarkPercentChange returns a boolean if a field has been set.
func (o *OptionContract) HasMarkPercentChange() bool {
	if o != nil && !IsNil(o.MarkPercentChange) {
		return true
	}

	return false
}

// SetMarkPercentChange gets a reference to the given float64 and assigns it to the MarkPercentChange field.
func (o *OptionContract) SetMarkPercentChange(v float64) {
	o.MarkPercentChange = &v
}

// GetIsPennyPilot returns the IsPennyPilot field value if set, zero value otherwise.
func (o *OptionContract) GetIsPennyPilot() bool {
	if o == nil || IsNil(o.IsPennyPilot) {
		var ret bool
		return ret
	}
	return *o.IsPennyPilot
}

// GetIsPennyPilotOk returns a tuple with the IsPennyPilot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetIsPennyPilotOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPennyPilot) {
		return nil, false
	}
	return o.IsPennyPilot, true
}

// HasIsPennyPilot returns a boolean if a field has been set.
func (o *OptionContract) HasIsPennyPilot() bool {
	if o != nil && !IsNil(o.IsPennyPilot) {
		return true
	}

	return false
}

// SetIsPennyPilot gets a reference to the given bool and assigns it to the IsPennyPilot field.
func (o *OptionContract) SetIsPennyPilot(v bool) {
	o.IsPennyPilot = &v
}

// GetIntrinsicValue returns the IntrinsicValue field value if set, zero value otherwise.
func (o *OptionContract) GetIntrinsicValue() float64 {
	if o == nil || IsNil(o.IntrinsicValue) {
		var ret float64
		return ret
	}
	return *o.IntrinsicValue
}

// GetIntrinsicValueOk returns a tuple with the IntrinsicValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetIntrinsicValueOk() (*float64, bool) {
	if o == nil || IsNil(o.IntrinsicValue) {
		return nil, false
	}
	return o.IntrinsicValue, true
}

// HasIntrinsicValue returns a boolean if a field has been set.
func (o *OptionContract) HasIntrinsicValue() bool {
	if o != nil && !IsNil(o.IntrinsicValue) {
		return true
	}

	return false
}

// SetIntrinsicValue gets a reference to the given float64 and assigns it to the IntrinsicValue field.
func (o *OptionContract) SetIntrinsicValue(v float64) {
	o.IntrinsicValue = &v
}

// GetOptionRoot returns the OptionRoot field value if set, zero value otherwise.
func (o *OptionContract) GetOptionRoot() string {
	if o == nil || IsNil(o.OptionRoot) {
		var ret string
		return ret
	}
	return *o.OptionRoot
}

// GetOptionRootOk returns a tuple with the OptionRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionContract) GetOptionRootOk() (*string, bool) {
	if o == nil || IsNil(o.OptionRoot) {
		return nil, false
	}
	return o.OptionRoot, true
}

// HasOptionRoot returns a boolean if a field has been set.
func (o *OptionContract) HasOptionRoot() bool {
	if o != nil && !IsNil(o.OptionRoot) {
		return true
	}

	return false
}

// SetOptionRoot gets a reference to the given string and assigns it to the OptionRoot field.
func (o *OptionContract) SetOptionRoot(v string) {
	o.OptionRoot = &v
}

func (o OptionContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PutCall) {
		toSerialize["putCall"] = o.PutCall
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExchangeName) {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if !IsNil(o.AskPrice) {
		toSerialize["askPrice"] = o.AskPrice
	}
	if !IsNil(o.LastPrice) {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if !IsNil(o.MarkPrice) {
		toSerialize["markPrice"] = o.MarkPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bidSize"] = o.BidSize
	}
	if !IsNil(o.AskSize) {
		toSerialize["askSize"] = o.AskSize
	}
	if !IsNil(o.LastSize) {
		toSerialize["lastSize"] = o.LastSize
	}
	if !IsNil(o.HighPrice) {
		toSerialize["highPrice"] = o.HighPrice
	}
	if !IsNil(o.LowPrice) {
		toSerialize["lowPrice"] = o.LowPrice
	}
	if !IsNil(o.OpenPrice) {
		toSerialize["openPrice"] = o.OpenPrice
	}
	if !IsNil(o.ClosePrice) {
		toSerialize["closePrice"] = o.ClosePrice
	}
	if !IsNil(o.TotalVolume) {
		toSerialize["totalVolume"] = o.TotalVolume
	}
	if !IsNil(o.TradeDate) {
		toSerialize["tradeDate"] = o.TradeDate
	}
	if !IsNil(o.QuoteTimeInLong) {
		toSerialize["quoteTimeInLong"] = o.QuoteTimeInLong
	}
	if !IsNil(o.TradeTimeInLong) {
		toSerialize["tradeTimeInLong"] = o.TradeTimeInLong
	}
	if !IsNil(o.NetChange) {
		toSerialize["netChange"] = o.NetChange
	}
	if !IsNil(o.Volatility) {
		toSerialize["volatility"] = o.Volatility
	}
	if !IsNil(o.Delta) {
		toSerialize["delta"] = o.Delta
	}
	if !IsNil(o.Gamma) {
		toSerialize["gamma"] = o.Gamma
	}
	if !IsNil(o.Theta) {
		toSerialize["theta"] = o.Theta
	}
	if !IsNil(o.Vega) {
		toSerialize["vega"] = o.Vega
	}
	if !IsNil(o.Rho) {
		toSerialize["rho"] = o.Rho
	}
	if !IsNil(o.TimeValue) {
		toSerialize["timeValue"] = o.TimeValue
	}
	if !IsNil(o.OpenInterest) {
		toSerialize["openInterest"] = o.OpenInterest
	}
	if !IsNil(o.IsInTheMoney) {
		toSerialize["isInTheMoney"] = o.IsInTheMoney
	}
	if !IsNil(o.TheoreticalOptionValue) {
		toSerialize["theoreticalOptionValue"] = o.TheoreticalOptionValue
	}
	if !IsNil(o.TheoreticalVolatility) {
		toSerialize["theoreticalVolatility"] = o.TheoreticalVolatility
	}
	if !IsNil(o.IsMini) {
		toSerialize["isMini"] = o.IsMini
	}
	if !IsNil(o.IsNonStandard) {
		toSerialize["isNonStandard"] = o.IsNonStandard
	}
	if !IsNil(o.OptionDeliverablesList) {
		toSerialize["optionDeliverablesList"] = o.OptionDeliverablesList
	}
	if !IsNil(o.StrikePrice) {
		toSerialize["strikePrice"] = o.StrikePrice
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.DaysToExpiration) {
		toSerialize["daysToExpiration"] = o.DaysToExpiration
	}
	if !IsNil(o.ExpirationType) {
		toSerialize["expirationType"] = o.ExpirationType
	}
	if !IsNil(o.LastTradingDay) {
		toSerialize["lastTradingDay"] = o.LastTradingDay
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.SettlementType) {
		toSerialize["settlementType"] = o.SettlementType
	}
	if !IsNil(o.DeliverableNote) {
		toSerialize["deliverableNote"] = o.DeliverableNote
	}
	if !IsNil(o.IsIndexOption) {
		toSerialize["isIndexOption"] = o.IsIndexOption
	}
	if !IsNil(o.PercentChange) {
		toSerialize["percentChange"] = o.PercentChange
	}
	if !IsNil(o.MarkChange) {
		toSerialize["markChange"] = o.MarkChange
	}
	if !IsNil(o.MarkPercentChange) {
		toSerialize["markPercentChange"] = o.MarkPercentChange
	}
	if !IsNil(o.IsPennyPilot) {
		toSerialize["isPennyPilot"] = o.IsPennyPilot
	}
	if !IsNil(o.IntrinsicValue) {
		toSerialize["intrinsicValue"] = o.IntrinsicValue
	}
	if !IsNil(o.OptionRoot) {
		toSerialize["optionRoot"] = o.OptionRoot
	}
	return toSerialize, nil
}

type NullableOptionContract struct {
	value *OptionContract
	isSet bool
}

func (v NullableOptionContract) Get() *OptionContract {
	return v.value
}

func (v *NullableOptionContract) Set(val *OptionContract) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionContract) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionContract(val *OptionContract) *NullableOptionContract {
	return &NullableOptionContract{value: val, isSet: true}
}

func (v NullableOptionContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


