/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GetInstruments200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetInstruments200Response{}

// GetInstruments200Response struct for GetInstruments200Response
type GetInstruments200Response struct {
	Instruments []InstrumentResponse `json:"instruments,omitempty"`
}

// NewGetInstruments200Response instantiates a new GetInstruments200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetInstruments200Response() *GetInstruments200Response {
	this := GetInstruments200Response{}
	return &this
}

// NewGetInstruments200ResponseWithDefaults instantiates a new GetInstruments200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetInstruments200ResponseWithDefaults() *GetInstruments200Response {
	this := GetInstruments200Response{}
	return &this
}

// GetInstruments returns the Instruments field value if set, zero value otherwise.
func (o *GetInstruments200Response) GetInstruments() []InstrumentResponse {
	if o == nil || IsNil(o.Instruments) {
		var ret []InstrumentResponse
		return ret
	}
	return o.Instruments
}

// GetInstrumentsOk returns a tuple with the Instruments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInstruments200Response) GetInstrumentsOk() ([]InstrumentResponse, bool) {
	if o == nil || IsNil(o.Instruments) {
		return nil, false
	}
	return o.Instruments, true
}

// HasInstruments returns a boolean if a field has been set.
func (o *GetInstruments200Response) HasInstruments() bool {
	if o != nil && !IsNil(o.Instruments) {
		return true
	}

	return false
}

// SetInstruments gets a reference to the given []InstrumentResponse and assigns it to the Instruments field.
func (o *GetInstruments200Response) SetInstruments(v []InstrumentResponse) {
	o.Instruments = v
}

func (o GetInstruments200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetInstruments200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instruments) {
		toSerialize["instruments"] = o.Instruments
	}
	return toSerialize, nil
}

type NullableGetInstruments200Response struct {
	value *GetInstruments200Response
	isSet bool
}

func (v NullableGetInstruments200Response) Get() *GetInstruments200Response {
	return v.value
}

func (v *NullableGetInstruments200Response) Set(val *GetInstruments200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInstruments200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInstruments200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInstruments200Response(val *GetInstruments200Response) *NullableGetInstruments200Response {
	return &NullableGetInstruments200Response{value: val, isSet: true}
}

func (v NullableGetInstruments200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInstruments200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


