/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AssetMainType Instrument's asset type
type AssetMainType string

// List of AssetMainType
const (
	ASSETMAINTYPE_BOND AssetMainType = "BOND"
	ASSETMAINTYPE_EQUITY AssetMainType = "EQUITY"
	ASSETMAINTYPE_FOREX AssetMainType = "FOREX"
	ASSETMAINTYPE_FUTURE AssetMainType = "FUTURE"
	ASSETMAINTYPE_FUTURE_OPTION AssetMainType = "FUTURE_OPTION"
	ASSETMAINTYPE_INDEX AssetMainType = "INDEX"
	ASSETMAINTYPE_MUTUAL_FUND AssetMainType = "MUTUAL_FUND"
	ASSETMAINTYPE_OPTION AssetMainType = "OPTION"
)

// All allowed values of AssetMainType enum
var AllowedAssetMainTypeEnumValues = []AssetMainType{
	"BOND",
	"EQUITY",
	"FOREX",
	"FUTURE",
	"FUTURE_OPTION",
	"INDEX",
	"MUTUAL_FUND",
	"OPTION",
}

func (v *AssetMainType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetMainType(value)
	for _, existing := range AllowedAssetMainTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetMainType", value)
}

// NewAssetMainTypeFromValue returns a pointer to a valid AssetMainType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetMainTypeFromValue(v string) (*AssetMainType, error) {
	ev := AssetMainType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetMainType: valid values are %v", v, AllowedAssetMainTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetMainType) IsValid() bool {
	for _, existing := range AllowedAssetMainTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetMainType value
func (v AssetMainType) Ptr() *AssetMainType {
	return &v
}

type NullableAssetMainType struct {
	value *AssetMainType
	isSet bool
}

func (v NullableAssetMainType) Get() *AssetMainType {
	return v.value
}

func (v *NullableAssetMainType) Set(val *AssetMainType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetMainType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetMainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetMainType(val *AssetMainType) *NullableAssetMainType {
	return &NullableAssetMainType{value: val, isSet: true}
}

func (v NullableAssetMainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetMainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

