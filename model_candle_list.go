/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CandleList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CandleList{}

// CandleList struct for CandleList
type CandleList struct {
	Candles []Candle `json:"candles,omitempty"`
	Empty *bool `json:"empty,omitempty"`
	PreviousClose *float64 `json:"previousClose,omitempty"`
	PreviousCloseDate *int64 `json:"previousCloseDate,omitempty"`
	PreviousCloseDateISO8601 *string `json:"previousCloseDateISO8601,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewCandleList instantiates a new CandleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandleList() *CandleList {
	this := CandleList{}
	return &this
}

// NewCandleListWithDefaults instantiates a new CandleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandleListWithDefaults() *CandleList {
	this := CandleList{}
	return &this
}

// GetCandles returns the Candles field value if set, zero value otherwise.
func (o *CandleList) GetCandles() []Candle {
	if o == nil || IsNil(o.Candles) {
		var ret []Candle
		return ret
	}
	return o.Candles
}

// GetCandlesOk returns a tuple with the Candles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetCandlesOk() ([]Candle, bool) {
	if o == nil || IsNil(o.Candles) {
		return nil, false
	}
	return o.Candles, true
}

// HasCandles returns a boolean if a field has been set.
func (o *CandleList) HasCandles() bool {
	if o != nil && !IsNil(o.Candles) {
		return true
	}

	return false
}

// SetCandles gets a reference to the given []Candle and assigns it to the Candles field.
func (o *CandleList) SetCandles(v []Candle) {
	o.Candles = v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *CandleList) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *CandleList) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *CandleList) SetEmpty(v bool) {
	o.Empty = &v
}

// GetPreviousClose returns the PreviousClose field value if set, zero value otherwise.
func (o *CandleList) GetPreviousClose() float64 {
	if o == nil || IsNil(o.PreviousClose) {
		var ret float64
		return ret
	}
	return *o.PreviousClose
}

// GetPreviousCloseOk returns a tuple with the PreviousClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetPreviousCloseOk() (*float64, bool) {
	if o == nil || IsNil(o.PreviousClose) {
		return nil, false
	}
	return o.PreviousClose, true
}

// HasPreviousClose returns a boolean if a field has been set.
func (o *CandleList) HasPreviousClose() bool {
	if o != nil && !IsNil(o.PreviousClose) {
		return true
	}

	return false
}

// SetPreviousClose gets a reference to the given float64 and assigns it to the PreviousClose field.
func (o *CandleList) SetPreviousClose(v float64) {
	o.PreviousClose = &v
}

// GetPreviousCloseDate returns the PreviousCloseDate field value if set, zero value otherwise.
func (o *CandleList) GetPreviousCloseDate() int64 {
	if o == nil || IsNil(o.PreviousCloseDate) {
		var ret int64
		return ret
	}
	return *o.PreviousCloseDate
}

// GetPreviousCloseDateOk returns a tuple with the PreviousCloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetPreviousCloseDateOk() (*int64, bool) {
	if o == nil || IsNil(o.PreviousCloseDate) {
		return nil, false
	}
	return o.PreviousCloseDate, true
}

// HasPreviousCloseDate returns a boolean if a field has been set.
func (o *CandleList) HasPreviousCloseDate() bool {
	if o != nil && !IsNil(o.PreviousCloseDate) {
		return true
	}

	return false
}

// SetPreviousCloseDate gets a reference to the given int64 and assigns it to the PreviousCloseDate field.
func (o *CandleList) SetPreviousCloseDate(v int64) {
	o.PreviousCloseDate = &v
}

// GetPreviousCloseDateISO8601 returns the PreviousCloseDateISO8601 field value if set, zero value otherwise.
func (o *CandleList) GetPreviousCloseDateISO8601() string {
	if o == nil || IsNil(o.PreviousCloseDateISO8601) {
		var ret string
		return ret
	}
	return *o.PreviousCloseDateISO8601
}

// GetPreviousCloseDateISO8601Ok returns a tuple with the PreviousCloseDateISO8601 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetPreviousCloseDateISO8601Ok() (*string, bool) {
	if o == nil || IsNil(o.PreviousCloseDateISO8601) {
		return nil, false
	}
	return o.PreviousCloseDateISO8601, true
}

// HasPreviousCloseDateISO8601 returns a boolean if a field has been set.
func (o *CandleList) HasPreviousCloseDateISO8601() bool {
	if o != nil && !IsNil(o.PreviousCloseDateISO8601) {
		return true
	}

	return false
}

// SetPreviousCloseDateISO8601 gets a reference to the given string and assigns it to the PreviousCloseDateISO8601 field.
func (o *CandleList) SetPreviousCloseDateISO8601(v string) {
	o.PreviousCloseDateISO8601 = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CandleList) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CandleList) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CandleList) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CandleList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CandleList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Candles) {
		toSerialize["candles"] = o.Candles
	}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	if !IsNil(o.PreviousClose) {
		toSerialize["previousClose"] = o.PreviousClose
	}
	if !IsNil(o.PreviousCloseDate) {
		toSerialize["previousCloseDate"] = o.PreviousCloseDate
	}
	if !IsNil(o.PreviousCloseDateISO8601) {
		toSerialize["previousCloseDateISO8601"] = o.PreviousCloseDateISO8601
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableCandleList struct {
	value *CandleList
	isSet bool
}

func (v NullableCandleList) Get() *CandleList {
	return v.value
}

func (v *NullableCandleList) Set(val *CandleList) {
	v.value = val
	v.isSet = true
}

func (v NullableCandleList) IsSet() bool {
	return v.isSet
}

func (v *NullableCandleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandleList(val *CandleList) *NullableCandleList {
	return &NullableCandleList{value: val, isSet: true}
}

func (v NullableCandleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


