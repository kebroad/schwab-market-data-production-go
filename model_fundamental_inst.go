/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FundamentalInst type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalInst{}

// FundamentalInst struct for FundamentalInst
type FundamentalInst struct {
	Symbol *string `json:"symbol,omitempty"`
	High52 *float64 `json:"high52,omitempty"`
	Low52 *float64 `json:"low52,omitempty"`
	DividendAmount *float64 `json:"dividendAmount,omitempty"`
	DividendYield *float64 `json:"dividendYield,omitempty"`
	DividendDate *string `json:"dividendDate,omitempty"`
	PeRatio *float64 `json:"peRatio,omitempty"`
	PegRatio *float64 `json:"pegRatio,omitempty"`
	PbRatio *float64 `json:"pbRatio,omitempty"`
	PrRatio *float64 `json:"prRatio,omitempty"`
	PcfRatio *float64 `json:"pcfRatio,omitempty"`
	GrossMarginTTM *float64 `json:"grossMarginTTM,omitempty"`
	GrossMarginMRQ *float64 `json:"grossMarginMRQ,omitempty"`
	NetProfitMarginTTM *float64 `json:"netProfitMarginTTM,omitempty"`
	NetProfitMarginMRQ *float64 `json:"netProfitMarginMRQ,omitempty"`
	OperatingMarginTTM *float64 `json:"operatingMarginTTM,omitempty"`
	OperatingMarginMRQ *float64 `json:"operatingMarginMRQ,omitempty"`
	ReturnOnEquity *float64 `json:"returnOnEquity,omitempty"`
	ReturnOnAssets *float64 `json:"returnOnAssets,omitempty"`
	ReturnOnInvestment *float64 `json:"returnOnInvestment,omitempty"`
	QuickRatio *float64 `json:"quickRatio,omitempty"`
	CurrentRatio *float64 `json:"currentRatio,omitempty"`
	InterestCoverage *float64 `json:"interestCoverage,omitempty"`
	TotalDebtToCapital *float64 `json:"totalDebtToCapital,omitempty"`
	LtDebtToEquity *float64 `json:"ltDebtToEquity,omitempty"`
	TotalDebtToEquity *float64 `json:"totalDebtToEquity,omitempty"`
	EpsTTM *float64 `json:"epsTTM,omitempty"`
	EpsChangePercentTTM *float64 `json:"epsChangePercentTTM,omitempty"`
	EpsChangeYear *float64 `json:"epsChangeYear,omitempty"`
	EpsChange *float64 `json:"epsChange,omitempty"`
	RevChangeYear *float64 `json:"revChangeYear,omitempty"`
	RevChangeTTM *float64 `json:"revChangeTTM,omitempty"`
	RevChangeIn *float64 `json:"revChangeIn,omitempty"`
	SharesOutstanding *float64 `json:"sharesOutstanding,omitempty"`
	MarketCapFloat *float64 `json:"marketCapFloat,omitempty"`
	MarketCap *float64 `json:"marketCap,omitempty"`
	BookValuePerShare *float64 `json:"bookValuePerShare,omitempty"`
	ShortIntToFloat *float64 `json:"shortIntToFloat,omitempty"`
	ShortIntDayToCover *float64 `json:"shortIntDayToCover,omitempty"`
	DivGrowthRate3Year *float64 `json:"divGrowthRate3Year,omitempty"`
	DividendPayAmount *float64 `json:"dividendPayAmount,omitempty"`
	DividendPayDate *string `json:"dividendPayDate,omitempty"`
	Beta *float64 `json:"beta,omitempty"`
	Vol1DayAvg *float64 `json:"vol1DayAvg,omitempty"`
	Vol10DayAvg *float64 `json:"vol10DayAvg,omitempty"`
	Vol3MonthAvg *float64 `json:"vol3MonthAvg,omitempty"`
	Avg10DaysVolume *int64 `json:"avg10DaysVolume,omitempty"`
	Avg1DayVolume *int64 `json:"avg1DayVolume,omitempty"`
	Avg3MonthVolume *int64 `json:"avg3MonthVolume,omitempty"`
	DeclarationDate *string `json:"declarationDate,omitempty"`
	DividendFreq *int32 `json:"dividendFreq,omitempty"`
	Eps *float64 `json:"eps,omitempty"`
	CorpactionDate *string `json:"corpactionDate,omitempty"`
	DtnVolume *int64 `json:"dtnVolume,omitempty"`
	NextDividendPayDate *string `json:"nextDividendPayDate,omitempty"`
	NextDividendDate *string `json:"nextDividendDate,omitempty"`
	FundLeverageFactor *float64 `json:"fundLeverageFactor,omitempty"`
	FundStrategy *string `json:"fundStrategy,omitempty"`
}

// NewFundamentalInst instantiates a new FundamentalInst object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalInst() *FundamentalInst {
	this := FundamentalInst{}
	return &this
}

// NewFundamentalInstWithDefaults instantiates a new FundamentalInst object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalInstWithDefaults() *FundamentalInst {
	this := FundamentalInst{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *FundamentalInst) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *FundamentalInst) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *FundamentalInst) SetSymbol(v string) {
	o.Symbol = &v
}

// GetHigh52 returns the High52 field value if set, zero value otherwise.
func (o *FundamentalInst) GetHigh52() float64 {
	if o == nil || IsNil(o.High52) {
		var ret float64
		return ret
	}
	return *o.High52
}

// GetHigh52Ok returns a tuple with the High52 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetHigh52Ok() (*float64, bool) {
	if o == nil || IsNil(o.High52) {
		return nil, false
	}
	return o.High52, true
}

// HasHigh52 returns a boolean if a field has been set.
func (o *FundamentalInst) HasHigh52() bool {
	if o != nil && !IsNil(o.High52) {
		return true
	}

	return false
}

// SetHigh52 gets a reference to the given float64 and assigns it to the High52 field.
func (o *FundamentalInst) SetHigh52(v float64) {
	o.High52 = &v
}

// GetLow52 returns the Low52 field value if set, zero value otherwise.
func (o *FundamentalInst) GetLow52() float64 {
	if o == nil || IsNil(o.Low52) {
		var ret float64
		return ret
	}
	return *o.Low52
}

// GetLow52Ok returns a tuple with the Low52 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetLow52Ok() (*float64, bool) {
	if o == nil || IsNil(o.Low52) {
		return nil, false
	}
	return o.Low52, true
}

// HasLow52 returns a boolean if a field has been set.
func (o *FundamentalInst) HasLow52() bool {
	if o != nil && !IsNil(o.Low52) {
		return true
	}

	return false
}

// SetLow52 gets a reference to the given float64 and assigns it to the Low52 field.
func (o *FundamentalInst) SetLow52(v float64) {
	o.Low52 = &v
}

// GetDividendAmount returns the DividendAmount field value if set, zero value otherwise.
func (o *FundamentalInst) GetDividendAmount() float64 {
	if o == nil || IsNil(o.DividendAmount) {
		var ret float64
		return ret
	}
	return *o.DividendAmount
}

// GetDividendAmountOk returns a tuple with the DividendAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDividendAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.DividendAmount) {
		return nil, false
	}
	return o.DividendAmount, true
}

// HasDividendAmount returns a boolean if a field has been set.
func (o *FundamentalInst) HasDividendAmount() bool {
	if o != nil && !IsNil(o.DividendAmount) {
		return true
	}

	return false
}

// SetDividendAmount gets a reference to the given float64 and assigns it to the DividendAmount field.
func (o *FundamentalInst) SetDividendAmount(v float64) {
	o.DividendAmount = &v
}

// GetDividendYield returns the DividendYield field value if set, zero value otherwise.
func (o *FundamentalInst) GetDividendYield() float64 {
	if o == nil || IsNil(o.DividendYield) {
		var ret float64
		return ret
	}
	return *o.DividendYield
}

// GetDividendYieldOk returns a tuple with the DividendYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDividendYieldOk() (*float64, bool) {
	if o == nil || IsNil(o.DividendYield) {
		return nil, false
	}
	return o.DividendYield, true
}

// HasDividendYield returns a boolean if a field has been set.
func (o *FundamentalInst) HasDividendYield() bool {
	if o != nil && !IsNil(o.DividendYield) {
		return true
	}

	return false
}

// SetDividendYield gets a reference to the given float64 and assigns it to the DividendYield field.
func (o *FundamentalInst) SetDividendYield(v float64) {
	o.DividendYield = &v
}

// GetDividendDate returns the DividendDate field value if set, zero value otherwise.
func (o *FundamentalInst) GetDividendDate() string {
	if o == nil || IsNil(o.DividendDate) {
		var ret string
		return ret
	}
	return *o.DividendDate
}

// GetDividendDateOk returns a tuple with the DividendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDividendDateOk() (*string, bool) {
	if o == nil || IsNil(o.DividendDate) {
		return nil, false
	}
	return o.DividendDate, true
}

// HasDividendDate returns a boolean if a field has been set.
func (o *FundamentalInst) HasDividendDate() bool {
	if o != nil && !IsNil(o.DividendDate) {
		return true
	}

	return false
}

// SetDividendDate gets a reference to the given string and assigns it to the DividendDate field.
func (o *FundamentalInst) SetDividendDate(v string) {
	o.DividendDate = &v
}

// GetPeRatio returns the PeRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetPeRatio() float64 {
	if o == nil || IsNil(o.PeRatio) {
		var ret float64
		return ret
	}
	return *o.PeRatio
}

// GetPeRatioOk returns a tuple with the PeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetPeRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.PeRatio) {
		return nil, false
	}
	return o.PeRatio, true
}

// HasPeRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasPeRatio() bool {
	if o != nil && !IsNil(o.PeRatio) {
		return true
	}

	return false
}

// SetPeRatio gets a reference to the given float64 and assigns it to the PeRatio field.
func (o *FundamentalInst) SetPeRatio(v float64) {
	o.PeRatio = &v
}

// GetPegRatio returns the PegRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetPegRatio() float64 {
	if o == nil || IsNil(o.PegRatio) {
		var ret float64
		return ret
	}
	return *o.PegRatio
}

// GetPegRatioOk returns a tuple with the PegRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetPegRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.PegRatio) {
		return nil, false
	}
	return o.PegRatio, true
}

// HasPegRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasPegRatio() bool {
	if o != nil && !IsNil(o.PegRatio) {
		return true
	}

	return false
}

// SetPegRatio gets a reference to the given float64 and assigns it to the PegRatio field.
func (o *FundamentalInst) SetPegRatio(v float64) {
	o.PegRatio = &v
}

// GetPbRatio returns the PbRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetPbRatio() float64 {
	if o == nil || IsNil(o.PbRatio) {
		var ret float64
		return ret
	}
	return *o.PbRatio
}

// GetPbRatioOk returns a tuple with the PbRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetPbRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.PbRatio) {
		return nil, false
	}
	return o.PbRatio, true
}

// HasPbRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasPbRatio() bool {
	if o != nil && !IsNil(o.PbRatio) {
		return true
	}

	return false
}

// SetPbRatio gets a reference to the given float64 and assigns it to the PbRatio field.
func (o *FundamentalInst) SetPbRatio(v float64) {
	o.PbRatio = &v
}

// GetPrRatio returns the PrRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetPrRatio() float64 {
	if o == nil || IsNil(o.PrRatio) {
		var ret float64
		return ret
	}
	return *o.PrRatio
}

// GetPrRatioOk returns a tuple with the PrRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetPrRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.PrRatio) {
		return nil, false
	}
	return o.PrRatio, true
}

// HasPrRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasPrRatio() bool {
	if o != nil && !IsNil(o.PrRatio) {
		return true
	}

	return false
}

// SetPrRatio gets a reference to the given float64 and assigns it to the PrRatio field.
func (o *FundamentalInst) SetPrRatio(v float64) {
	o.PrRatio = &v
}

// GetPcfRatio returns the PcfRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetPcfRatio() float64 {
	if o == nil || IsNil(o.PcfRatio) {
		var ret float64
		return ret
	}
	return *o.PcfRatio
}

// GetPcfRatioOk returns a tuple with the PcfRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetPcfRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.PcfRatio) {
		return nil, false
	}
	return o.PcfRatio, true
}

// HasPcfRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasPcfRatio() bool {
	if o != nil && !IsNil(o.PcfRatio) {
		return true
	}

	return false
}

// SetPcfRatio gets a reference to the given float64 and assigns it to the PcfRatio field.
func (o *FundamentalInst) SetPcfRatio(v float64) {
	o.PcfRatio = &v
}

// GetGrossMarginTTM returns the GrossMarginTTM field value if set, zero value otherwise.
func (o *FundamentalInst) GetGrossMarginTTM() float64 {
	if o == nil || IsNil(o.GrossMarginTTM) {
		var ret float64
		return ret
	}
	return *o.GrossMarginTTM
}

// GetGrossMarginTTMOk returns a tuple with the GrossMarginTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetGrossMarginTTMOk() (*float64, bool) {
	if o == nil || IsNil(o.GrossMarginTTM) {
		return nil, false
	}
	return o.GrossMarginTTM, true
}

// HasGrossMarginTTM returns a boolean if a field has been set.
func (o *FundamentalInst) HasGrossMarginTTM() bool {
	if o != nil && !IsNil(o.GrossMarginTTM) {
		return true
	}

	return false
}

// SetGrossMarginTTM gets a reference to the given float64 and assigns it to the GrossMarginTTM field.
func (o *FundamentalInst) SetGrossMarginTTM(v float64) {
	o.GrossMarginTTM = &v
}

// GetGrossMarginMRQ returns the GrossMarginMRQ field value if set, zero value otherwise.
func (o *FundamentalInst) GetGrossMarginMRQ() float64 {
	if o == nil || IsNil(o.GrossMarginMRQ) {
		var ret float64
		return ret
	}
	return *o.GrossMarginMRQ
}

// GetGrossMarginMRQOk returns a tuple with the GrossMarginMRQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetGrossMarginMRQOk() (*float64, bool) {
	if o == nil || IsNil(o.GrossMarginMRQ) {
		return nil, false
	}
	return o.GrossMarginMRQ, true
}

// HasGrossMarginMRQ returns a boolean if a field has been set.
func (o *FundamentalInst) HasGrossMarginMRQ() bool {
	if o != nil && !IsNil(o.GrossMarginMRQ) {
		return true
	}

	return false
}

// SetGrossMarginMRQ gets a reference to the given float64 and assigns it to the GrossMarginMRQ field.
func (o *FundamentalInst) SetGrossMarginMRQ(v float64) {
	o.GrossMarginMRQ = &v
}

// GetNetProfitMarginTTM returns the NetProfitMarginTTM field value if set, zero value otherwise.
func (o *FundamentalInst) GetNetProfitMarginTTM() float64 {
	if o == nil || IsNil(o.NetProfitMarginTTM) {
		var ret float64
		return ret
	}
	return *o.NetProfitMarginTTM
}

// GetNetProfitMarginTTMOk returns a tuple with the NetProfitMarginTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetNetProfitMarginTTMOk() (*float64, bool) {
	if o == nil || IsNil(o.NetProfitMarginTTM) {
		return nil, false
	}
	return o.NetProfitMarginTTM, true
}

// HasNetProfitMarginTTM returns a boolean if a field has been set.
func (o *FundamentalInst) HasNetProfitMarginTTM() bool {
	if o != nil && !IsNil(o.NetProfitMarginTTM) {
		return true
	}

	return false
}

// SetNetProfitMarginTTM gets a reference to the given float64 and assigns it to the NetProfitMarginTTM field.
func (o *FundamentalInst) SetNetProfitMarginTTM(v float64) {
	o.NetProfitMarginTTM = &v
}

// GetNetProfitMarginMRQ returns the NetProfitMarginMRQ field value if set, zero value otherwise.
func (o *FundamentalInst) GetNetProfitMarginMRQ() float64 {
	if o == nil || IsNil(o.NetProfitMarginMRQ) {
		var ret float64
		return ret
	}
	return *o.NetProfitMarginMRQ
}

// GetNetProfitMarginMRQOk returns a tuple with the NetProfitMarginMRQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetNetProfitMarginMRQOk() (*float64, bool) {
	if o == nil || IsNil(o.NetProfitMarginMRQ) {
		return nil, false
	}
	return o.NetProfitMarginMRQ, true
}

// HasNetProfitMarginMRQ returns a boolean if a field has been set.
func (o *FundamentalInst) HasNetProfitMarginMRQ() bool {
	if o != nil && !IsNil(o.NetProfitMarginMRQ) {
		return true
	}

	return false
}

// SetNetProfitMarginMRQ gets a reference to the given float64 and assigns it to the NetProfitMarginMRQ field.
func (o *FundamentalInst) SetNetProfitMarginMRQ(v float64) {
	o.NetProfitMarginMRQ = &v
}

// GetOperatingMarginTTM returns the OperatingMarginTTM field value if set, zero value otherwise.
func (o *FundamentalInst) GetOperatingMarginTTM() float64 {
	if o == nil || IsNil(o.OperatingMarginTTM) {
		var ret float64
		return ret
	}
	return *o.OperatingMarginTTM
}

// GetOperatingMarginTTMOk returns a tuple with the OperatingMarginTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetOperatingMarginTTMOk() (*float64, bool) {
	if o == nil || IsNil(o.OperatingMarginTTM) {
		return nil, false
	}
	return o.OperatingMarginTTM, true
}

// HasOperatingMarginTTM returns a boolean if a field has been set.
func (o *FundamentalInst) HasOperatingMarginTTM() bool {
	if o != nil && !IsNil(o.OperatingMarginTTM) {
		return true
	}

	return false
}

// SetOperatingMarginTTM gets a reference to the given float64 and assigns it to the OperatingMarginTTM field.
func (o *FundamentalInst) SetOperatingMarginTTM(v float64) {
	o.OperatingMarginTTM = &v
}

// GetOperatingMarginMRQ returns the OperatingMarginMRQ field value if set, zero value otherwise.
func (o *FundamentalInst) GetOperatingMarginMRQ() float64 {
	if o == nil || IsNil(o.OperatingMarginMRQ) {
		var ret float64
		return ret
	}
	return *o.OperatingMarginMRQ
}

// GetOperatingMarginMRQOk returns a tuple with the OperatingMarginMRQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetOperatingMarginMRQOk() (*float64, bool) {
	if o == nil || IsNil(o.OperatingMarginMRQ) {
		return nil, false
	}
	return o.OperatingMarginMRQ, true
}

// HasOperatingMarginMRQ returns a boolean if a field has been set.
func (o *FundamentalInst) HasOperatingMarginMRQ() bool {
	if o != nil && !IsNil(o.OperatingMarginMRQ) {
		return true
	}

	return false
}

// SetOperatingMarginMRQ gets a reference to the given float64 and assigns it to the OperatingMarginMRQ field.
func (o *FundamentalInst) SetOperatingMarginMRQ(v float64) {
	o.OperatingMarginMRQ = &v
}

// GetReturnOnEquity returns the ReturnOnEquity field value if set, zero value otherwise.
func (o *FundamentalInst) GetReturnOnEquity() float64 {
	if o == nil || IsNil(o.ReturnOnEquity) {
		var ret float64
		return ret
	}
	return *o.ReturnOnEquity
}

// GetReturnOnEquityOk returns a tuple with the ReturnOnEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetReturnOnEquityOk() (*float64, bool) {
	if o == nil || IsNil(o.ReturnOnEquity) {
		return nil, false
	}
	return o.ReturnOnEquity, true
}

// HasReturnOnEquity returns a boolean if a field has been set.
func (o *FundamentalInst) HasReturnOnEquity() bool {
	if o != nil && !IsNil(o.ReturnOnEquity) {
		return true
	}

	return false
}

// SetReturnOnEquity gets a reference to the given float64 and assigns it to the ReturnOnEquity field.
func (o *FundamentalInst) SetReturnOnEquity(v float64) {
	o.ReturnOnEquity = &v
}

// GetReturnOnAssets returns the ReturnOnAssets field value if set, zero value otherwise.
func (o *FundamentalInst) GetReturnOnAssets() float64 {
	if o == nil || IsNil(o.ReturnOnAssets) {
		var ret float64
		return ret
	}
	return *o.ReturnOnAssets
}

// GetReturnOnAssetsOk returns a tuple with the ReturnOnAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetReturnOnAssetsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReturnOnAssets) {
		return nil, false
	}
	return o.ReturnOnAssets, true
}

// HasReturnOnAssets returns a boolean if a field has been set.
func (o *FundamentalInst) HasReturnOnAssets() bool {
	if o != nil && !IsNil(o.ReturnOnAssets) {
		return true
	}

	return false
}

// SetReturnOnAssets gets a reference to the given float64 and assigns it to the ReturnOnAssets field.
func (o *FundamentalInst) SetReturnOnAssets(v float64) {
	o.ReturnOnAssets = &v
}

// GetReturnOnInvestment returns the ReturnOnInvestment field value if set, zero value otherwise.
func (o *FundamentalInst) GetReturnOnInvestment() float64 {
	if o == nil || IsNil(o.ReturnOnInvestment) {
		var ret float64
		return ret
	}
	return *o.ReturnOnInvestment
}

// GetReturnOnInvestmentOk returns a tuple with the ReturnOnInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetReturnOnInvestmentOk() (*float64, bool) {
	if o == nil || IsNil(o.ReturnOnInvestment) {
		return nil, false
	}
	return o.ReturnOnInvestment, true
}

// HasReturnOnInvestment returns a boolean if a field has been set.
func (o *FundamentalInst) HasReturnOnInvestment() bool {
	if o != nil && !IsNil(o.ReturnOnInvestment) {
		return true
	}

	return false
}

// SetReturnOnInvestment gets a reference to the given float64 and assigns it to the ReturnOnInvestment field.
func (o *FundamentalInst) SetReturnOnInvestment(v float64) {
	o.ReturnOnInvestment = &v
}

// GetQuickRatio returns the QuickRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetQuickRatio() float64 {
	if o == nil || IsNil(o.QuickRatio) {
		var ret float64
		return ret
	}
	return *o.QuickRatio
}

// GetQuickRatioOk returns a tuple with the QuickRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetQuickRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.QuickRatio) {
		return nil, false
	}
	return o.QuickRatio, true
}

// HasQuickRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasQuickRatio() bool {
	if o != nil && !IsNil(o.QuickRatio) {
		return true
	}

	return false
}

// SetQuickRatio gets a reference to the given float64 and assigns it to the QuickRatio field.
func (o *FundamentalInst) SetQuickRatio(v float64) {
	o.QuickRatio = &v
}

// GetCurrentRatio returns the CurrentRatio field value if set, zero value otherwise.
func (o *FundamentalInst) GetCurrentRatio() float64 {
	if o == nil || IsNil(o.CurrentRatio) {
		var ret float64
		return ret
	}
	return *o.CurrentRatio
}

// GetCurrentRatioOk returns a tuple with the CurrentRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetCurrentRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrentRatio) {
		return nil, false
	}
	return o.CurrentRatio, true
}

// HasCurrentRatio returns a boolean if a field has been set.
func (o *FundamentalInst) HasCurrentRatio() bool {
	if o != nil && !IsNil(o.CurrentRatio) {
		return true
	}

	return false
}

// SetCurrentRatio gets a reference to the given float64 and assigns it to the CurrentRatio field.
func (o *FundamentalInst) SetCurrentRatio(v float64) {
	o.CurrentRatio = &v
}

// GetInterestCoverage returns the InterestCoverage field value if set, zero value otherwise.
func (o *FundamentalInst) GetInterestCoverage() float64 {
	if o == nil || IsNil(o.InterestCoverage) {
		var ret float64
		return ret
	}
	return *o.InterestCoverage
}

// GetInterestCoverageOk returns a tuple with the InterestCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetInterestCoverageOk() (*float64, bool) {
	if o == nil || IsNil(o.InterestCoverage) {
		return nil, false
	}
	return o.InterestCoverage, true
}

// HasInterestCoverage returns a boolean if a field has been set.
func (o *FundamentalInst) HasInterestCoverage() bool {
	if o != nil && !IsNil(o.InterestCoverage) {
		return true
	}

	return false
}

// SetInterestCoverage gets a reference to the given float64 and assigns it to the InterestCoverage field.
func (o *FundamentalInst) SetInterestCoverage(v float64) {
	o.InterestCoverage = &v
}

// GetTotalDebtToCapital returns the TotalDebtToCapital field value if set, zero value otherwise.
func (o *FundamentalInst) GetTotalDebtToCapital() float64 {
	if o == nil || IsNil(o.TotalDebtToCapital) {
		var ret float64
		return ret
	}
	return *o.TotalDebtToCapital
}

// GetTotalDebtToCapitalOk returns a tuple with the TotalDebtToCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetTotalDebtToCapitalOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalDebtToCapital) {
		return nil, false
	}
	return o.TotalDebtToCapital, true
}

// HasTotalDebtToCapital returns a boolean if a field has been set.
func (o *FundamentalInst) HasTotalDebtToCapital() bool {
	if o != nil && !IsNil(o.TotalDebtToCapital) {
		return true
	}

	return false
}

// SetTotalDebtToCapital gets a reference to the given float64 and assigns it to the TotalDebtToCapital field.
func (o *FundamentalInst) SetTotalDebtToCapital(v float64) {
	o.TotalDebtToCapital = &v
}

// GetLtDebtToEquity returns the LtDebtToEquity field value if set, zero value otherwise.
func (o *FundamentalInst) GetLtDebtToEquity() float64 {
	if o == nil || IsNil(o.LtDebtToEquity) {
		var ret float64
		return ret
	}
	return *o.LtDebtToEquity
}

// GetLtDebtToEquityOk returns a tuple with the LtDebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetLtDebtToEquityOk() (*float64, bool) {
	if o == nil || IsNil(o.LtDebtToEquity) {
		return nil, false
	}
	return o.LtDebtToEquity, true
}

// HasLtDebtToEquity returns a boolean if a field has been set.
func (o *FundamentalInst) HasLtDebtToEquity() bool {
	if o != nil && !IsNil(o.LtDebtToEquity) {
		return true
	}

	return false
}

// SetLtDebtToEquity gets a reference to the given float64 and assigns it to the LtDebtToEquity field.
func (o *FundamentalInst) SetLtDebtToEquity(v float64) {
	o.LtDebtToEquity = &v
}

// GetTotalDebtToEquity returns the TotalDebtToEquity field value if set, zero value otherwise.
func (o *FundamentalInst) GetTotalDebtToEquity() float64 {
	if o == nil || IsNil(o.TotalDebtToEquity) {
		var ret float64
		return ret
	}
	return *o.TotalDebtToEquity
}

// GetTotalDebtToEquityOk returns a tuple with the TotalDebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetTotalDebtToEquityOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalDebtToEquity) {
		return nil, false
	}
	return o.TotalDebtToEquity, true
}

// HasTotalDebtToEquity returns a boolean if a field has been set.
func (o *FundamentalInst) HasTotalDebtToEquity() bool {
	if o != nil && !IsNil(o.TotalDebtToEquity) {
		return true
	}

	return false
}

// SetTotalDebtToEquity gets a reference to the given float64 and assigns it to the TotalDebtToEquity field.
func (o *FundamentalInst) SetTotalDebtToEquity(v float64) {
	o.TotalDebtToEquity = &v
}

// GetEpsTTM returns the EpsTTM field value if set, zero value otherwise.
func (o *FundamentalInst) GetEpsTTM() float64 {
	if o == nil || IsNil(o.EpsTTM) {
		var ret float64
		return ret
	}
	return *o.EpsTTM
}

// GetEpsTTMOk returns a tuple with the EpsTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetEpsTTMOk() (*float64, bool) {
	if o == nil || IsNil(o.EpsTTM) {
		return nil, false
	}
	return o.EpsTTM, true
}

// HasEpsTTM returns a boolean if a field has been set.
func (o *FundamentalInst) HasEpsTTM() bool {
	if o != nil && !IsNil(o.EpsTTM) {
		return true
	}

	return false
}

// SetEpsTTM gets a reference to the given float64 and assigns it to the EpsTTM field.
func (o *FundamentalInst) SetEpsTTM(v float64) {
	o.EpsTTM = &v
}

// GetEpsChangePercentTTM returns the EpsChangePercentTTM field value if set, zero value otherwise.
func (o *FundamentalInst) GetEpsChangePercentTTM() float64 {
	if o == nil || IsNil(o.EpsChangePercentTTM) {
		var ret float64
		return ret
	}
	return *o.EpsChangePercentTTM
}

// GetEpsChangePercentTTMOk returns a tuple with the EpsChangePercentTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetEpsChangePercentTTMOk() (*float64, bool) {
	if o == nil || IsNil(o.EpsChangePercentTTM) {
		return nil, false
	}
	return o.EpsChangePercentTTM, true
}

// HasEpsChangePercentTTM returns a boolean if a field has been set.
func (o *FundamentalInst) HasEpsChangePercentTTM() bool {
	if o != nil && !IsNil(o.EpsChangePercentTTM) {
		return true
	}

	return false
}

// SetEpsChangePercentTTM gets a reference to the given float64 and assigns it to the EpsChangePercentTTM field.
func (o *FundamentalInst) SetEpsChangePercentTTM(v float64) {
	o.EpsChangePercentTTM = &v
}

// GetEpsChangeYear returns the EpsChangeYear field value if set, zero value otherwise.
func (o *FundamentalInst) GetEpsChangeYear() float64 {
	if o == nil || IsNil(o.EpsChangeYear) {
		var ret float64
		return ret
	}
	return *o.EpsChangeYear
}

// GetEpsChangeYearOk returns a tuple with the EpsChangeYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetEpsChangeYearOk() (*float64, bool) {
	if o == nil || IsNil(o.EpsChangeYear) {
		return nil, false
	}
	return o.EpsChangeYear, true
}

// HasEpsChangeYear returns a boolean if a field has been set.
func (o *FundamentalInst) HasEpsChangeYear() bool {
	if o != nil && !IsNil(o.EpsChangeYear) {
		return true
	}

	return false
}

// SetEpsChangeYear gets a reference to the given float64 and assigns it to the EpsChangeYear field.
func (o *FundamentalInst) SetEpsChangeYear(v float64) {
	o.EpsChangeYear = &v
}

// GetEpsChange returns the EpsChange field value if set, zero value otherwise.
func (o *FundamentalInst) GetEpsChange() float64 {
	if o == nil || IsNil(o.EpsChange) {
		var ret float64
		return ret
	}
	return *o.EpsChange
}

// GetEpsChangeOk returns a tuple with the EpsChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetEpsChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.EpsChange) {
		return nil, false
	}
	return o.EpsChange, true
}

// HasEpsChange returns a boolean if a field has been set.
func (o *FundamentalInst) HasEpsChange() bool {
	if o != nil && !IsNil(o.EpsChange) {
		return true
	}

	return false
}

// SetEpsChange gets a reference to the given float64 and assigns it to the EpsChange field.
func (o *FundamentalInst) SetEpsChange(v float64) {
	o.EpsChange = &v
}

// GetRevChangeYear returns the RevChangeYear field value if set, zero value otherwise.
func (o *FundamentalInst) GetRevChangeYear() float64 {
	if o == nil || IsNil(o.RevChangeYear) {
		var ret float64
		return ret
	}
	return *o.RevChangeYear
}

// GetRevChangeYearOk returns a tuple with the RevChangeYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetRevChangeYearOk() (*float64, bool) {
	if o == nil || IsNil(o.RevChangeYear) {
		return nil, false
	}
	return o.RevChangeYear, true
}

// HasRevChangeYear returns a boolean if a field has been set.
func (o *FundamentalInst) HasRevChangeYear() bool {
	if o != nil && !IsNil(o.RevChangeYear) {
		return true
	}

	return false
}

// SetRevChangeYear gets a reference to the given float64 and assigns it to the RevChangeYear field.
func (o *FundamentalInst) SetRevChangeYear(v float64) {
	o.RevChangeYear = &v
}

// GetRevChangeTTM returns the RevChangeTTM field value if set, zero value otherwise.
func (o *FundamentalInst) GetRevChangeTTM() float64 {
	if o == nil || IsNil(o.RevChangeTTM) {
		var ret float64
		return ret
	}
	return *o.RevChangeTTM
}

// GetRevChangeTTMOk returns a tuple with the RevChangeTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetRevChangeTTMOk() (*float64, bool) {
	if o == nil || IsNil(o.RevChangeTTM) {
		return nil, false
	}
	return o.RevChangeTTM, true
}

// HasRevChangeTTM returns a boolean if a field has been set.
func (o *FundamentalInst) HasRevChangeTTM() bool {
	if o != nil && !IsNil(o.RevChangeTTM) {
		return true
	}

	return false
}

// SetRevChangeTTM gets a reference to the given float64 and assigns it to the RevChangeTTM field.
func (o *FundamentalInst) SetRevChangeTTM(v float64) {
	o.RevChangeTTM = &v
}

// GetRevChangeIn returns the RevChangeIn field value if set, zero value otherwise.
func (o *FundamentalInst) GetRevChangeIn() float64 {
	if o == nil || IsNil(o.RevChangeIn) {
		var ret float64
		return ret
	}
	return *o.RevChangeIn
}

// GetRevChangeInOk returns a tuple with the RevChangeIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetRevChangeInOk() (*float64, bool) {
	if o == nil || IsNil(o.RevChangeIn) {
		return nil, false
	}
	return o.RevChangeIn, true
}

// HasRevChangeIn returns a boolean if a field has been set.
func (o *FundamentalInst) HasRevChangeIn() bool {
	if o != nil && !IsNil(o.RevChangeIn) {
		return true
	}

	return false
}

// SetRevChangeIn gets a reference to the given float64 and assigns it to the RevChangeIn field.
func (o *FundamentalInst) SetRevChangeIn(v float64) {
	o.RevChangeIn = &v
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *FundamentalInst) GetSharesOutstanding() float64 {
	if o == nil || IsNil(o.SharesOutstanding) {
		var ret float64
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetSharesOutstandingOk() (*float64, bool) {
	if o == nil || IsNil(o.SharesOutstanding) {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *FundamentalInst) HasSharesOutstanding() bool {
	if o != nil && !IsNil(o.SharesOutstanding) {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given float64 and assigns it to the SharesOutstanding field.
func (o *FundamentalInst) SetSharesOutstanding(v float64) {
	o.SharesOutstanding = &v
}

// GetMarketCapFloat returns the MarketCapFloat field value if set, zero value otherwise.
func (o *FundamentalInst) GetMarketCapFloat() float64 {
	if o == nil || IsNil(o.MarketCapFloat) {
		var ret float64
		return ret
	}
	return *o.MarketCapFloat
}

// GetMarketCapFloatOk returns a tuple with the MarketCapFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetMarketCapFloatOk() (*float64, bool) {
	if o == nil || IsNil(o.MarketCapFloat) {
		return nil, false
	}
	return o.MarketCapFloat, true
}

// HasMarketCapFloat returns a boolean if a field has been set.
func (o *FundamentalInst) HasMarketCapFloat() bool {
	if o != nil && !IsNil(o.MarketCapFloat) {
		return true
	}

	return false
}

// SetMarketCapFloat gets a reference to the given float64 and assigns it to the MarketCapFloat field.
func (o *FundamentalInst) SetMarketCapFloat(v float64) {
	o.MarketCapFloat = &v
}

// GetMarketCap returns the MarketCap field value if set, zero value otherwise.
func (o *FundamentalInst) GetMarketCap() float64 {
	if o == nil || IsNil(o.MarketCap) {
		var ret float64
		return ret
	}
	return *o.MarketCap
}

// GetMarketCapOk returns a tuple with the MarketCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetMarketCapOk() (*float64, bool) {
	if o == nil || IsNil(o.MarketCap) {
		return nil, false
	}
	return o.MarketCap, true
}

// HasMarketCap returns a boolean if a field has been set.
func (o *FundamentalInst) HasMarketCap() bool {
	if o != nil && !IsNil(o.MarketCap) {
		return true
	}

	return false
}

// SetMarketCap gets a reference to the given float64 and assigns it to the MarketCap field.
func (o *FundamentalInst) SetMarketCap(v float64) {
	o.MarketCap = &v
}

// GetBookValuePerShare returns the BookValuePerShare field value if set, zero value otherwise.
func (o *FundamentalInst) GetBookValuePerShare() float64 {
	if o == nil || IsNil(o.BookValuePerShare) {
		var ret float64
		return ret
	}
	return *o.BookValuePerShare
}

// GetBookValuePerShareOk returns a tuple with the BookValuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetBookValuePerShareOk() (*float64, bool) {
	if o == nil || IsNil(o.BookValuePerShare) {
		return nil, false
	}
	return o.BookValuePerShare, true
}

// HasBookValuePerShare returns a boolean if a field has been set.
func (o *FundamentalInst) HasBookValuePerShare() bool {
	if o != nil && !IsNil(o.BookValuePerShare) {
		return true
	}

	return false
}

// SetBookValuePerShare gets a reference to the given float64 and assigns it to the BookValuePerShare field.
func (o *FundamentalInst) SetBookValuePerShare(v float64) {
	o.BookValuePerShare = &v
}

// GetShortIntToFloat returns the ShortIntToFloat field value if set, zero value otherwise.
func (o *FundamentalInst) GetShortIntToFloat() float64 {
	if o == nil || IsNil(o.ShortIntToFloat) {
		var ret float64
		return ret
	}
	return *o.ShortIntToFloat
}

// GetShortIntToFloatOk returns a tuple with the ShortIntToFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetShortIntToFloatOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortIntToFloat) {
		return nil, false
	}
	return o.ShortIntToFloat, true
}

// HasShortIntToFloat returns a boolean if a field has been set.
func (o *FundamentalInst) HasShortIntToFloat() bool {
	if o != nil && !IsNil(o.ShortIntToFloat) {
		return true
	}

	return false
}

// SetShortIntToFloat gets a reference to the given float64 and assigns it to the ShortIntToFloat field.
func (o *FundamentalInst) SetShortIntToFloat(v float64) {
	o.ShortIntToFloat = &v
}

// GetShortIntDayToCover returns the ShortIntDayToCover field value if set, zero value otherwise.
func (o *FundamentalInst) GetShortIntDayToCover() float64 {
	if o == nil || IsNil(o.ShortIntDayToCover) {
		var ret float64
		return ret
	}
	return *o.ShortIntDayToCover
}

// GetShortIntDayToCoverOk returns a tuple with the ShortIntDayToCover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetShortIntDayToCoverOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortIntDayToCover) {
		return nil, false
	}
	return o.ShortIntDayToCover, true
}

// HasShortIntDayToCover returns a boolean if a field has been set.
func (o *FundamentalInst) HasShortIntDayToCover() bool {
	if o != nil && !IsNil(o.ShortIntDayToCover) {
		return true
	}

	return false
}

// SetShortIntDayToCover gets a reference to the given float64 and assigns it to the ShortIntDayToCover field.
func (o *FundamentalInst) SetShortIntDayToCover(v float64) {
	o.ShortIntDayToCover = &v
}

// GetDivGrowthRate3Year returns the DivGrowthRate3Year field value if set, zero value otherwise.
func (o *FundamentalInst) GetDivGrowthRate3Year() float64 {
	if o == nil || IsNil(o.DivGrowthRate3Year) {
		var ret float64
		return ret
	}
	return *o.DivGrowthRate3Year
}

// GetDivGrowthRate3YearOk returns a tuple with the DivGrowthRate3Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDivGrowthRate3YearOk() (*float64, bool) {
	if o == nil || IsNil(o.DivGrowthRate3Year) {
		return nil, false
	}
	return o.DivGrowthRate3Year, true
}

// HasDivGrowthRate3Year returns a boolean if a field has been set.
func (o *FundamentalInst) HasDivGrowthRate3Year() bool {
	if o != nil && !IsNil(o.DivGrowthRate3Year) {
		return true
	}

	return false
}

// SetDivGrowthRate3Year gets a reference to the given float64 and assigns it to the DivGrowthRate3Year field.
func (o *FundamentalInst) SetDivGrowthRate3Year(v float64) {
	o.DivGrowthRate3Year = &v
}

// GetDividendPayAmount returns the DividendPayAmount field value if set, zero value otherwise.
func (o *FundamentalInst) GetDividendPayAmount() float64 {
	if o == nil || IsNil(o.DividendPayAmount) {
		var ret float64
		return ret
	}
	return *o.DividendPayAmount
}

// GetDividendPayAmountOk returns a tuple with the DividendPayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDividendPayAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.DividendPayAmount) {
		return nil, false
	}
	return o.DividendPayAmount, true
}

// HasDividendPayAmount returns a boolean if a field has been set.
func (o *FundamentalInst) HasDividendPayAmount() bool {
	if o != nil && !IsNil(o.DividendPayAmount) {
		return true
	}

	return false
}

// SetDividendPayAmount gets a reference to the given float64 and assigns it to the DividendPayAmount field.
func (o *FundamentalInst) SetDividendPayAmount(v float64) {
	o.DividendPayAmount = &v
}

// GetDividendPayDate returns the DividendPayDate field value if set, zero value otherwise.
func (o *FundamentalInst) GetDividendPayDate() string {
	if o == nil || IsNil(o.DividendPayDate) {
		var ret string
		return ret
	}
	return *o.DividendPayDate
}

// GetDividendPayDateOk returns a tuple with the DividendPayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDividendPayDateOk() (*string, bool) {
	if o == nil || IsNil(o.DividendPayDate) {
		return nil, false
	}
	return o.DividendPayDate, true
}

// HasDividendPayDate returns a boolean if a field has been set.
func (o *FundamentalInst) HasDividendPayDate() bool {
	if o != nil && !IsNil(o.DividendPayDate) {
		return true
	}

	return false
}

// SetDividendPayDate gets a reference to the given string and assigns it to the DividendPayDate field.
func (o *FundamentalInst) SetDividendPayDate(v string) {
	o.DividendPayDate = &v
}

// GetBeta returns the Beta field value if set, zero value otherwise.
func (o *FundamentalInst) GetBeta() float64 {
	if o == nil || IsNil(o.Beta) {
		var ret float64
		return ret
	}
	return *o.Beta
}

// GetBetaOk returns a tuple with the Beta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetBetaOk() (*float64, bool) {
	if o == nil || IsNil(o.Beta) {
		return nil, false
	}
	return o.Beta, true
}

// HasBeta returns a boolean if a field has been set.
func (o *FundamentalInst) HasBeta() bool {
	if o != nil && !IsNil(o.Beta) {
		return true
	}

	return false
}

// SetBeta gets a reference to the given float64 and assigns it to the Beta field.
func (o *FundamentalInst) SetBeta(v float64) {
	o.Beta = &v
}

// GetVol1DayAvg returns the Vol1DayAvg field value if set, zero value otherwise.
func (o *FundamentalInst) GetVol1DayAvg() float64 {
	if o == nil || IsNil(o.Vol1DayAvg) {
		var ret float64
		return ret
	}
	return *o.Vol1DayAvg
}

// GetVol1DayAvgOk returns a tuple with the Vol1DayAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetVol1DayAvgOk() (*float64, bool) {
	if o == nil || IsNil(o.Vol1DayAvg) {
		return nil, false
	}
	return o.Vol1DayAvg, true
}

// HasVol1DayAvg returns a boolean if a field has been set.
func (o *FundamentalInst) HasVol1DayAvg() bool {
	if o != nil && !IsNil(o.Vol1DayAvg) {
		return true
	}

	return false
}

// SetVol1DayAvg gets a reference to the given float64 and assigns it to the Vol1DayAvg field.
func (o *FundamentalInst) SetVol1DayAvg(v float64) {
	o.Vol1DayAvg = &v
}

// GetVol10DayAvg returns the Vol10DayAvg field value if set, zero value otherwise.
func (o *FundamentalInst) GetVol10DayAvg() float64 {
	if o == nil || IsNil(o.Vol10DayAvg) {
		var ret float64
		return ret
	}
	return *o.Vol10DayAvg
}

// GetVol10DayAvgOk returns a tuple with the Vol10DayAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetVol10DayAvgOk() (*float64, bool) {
	if o == nil || IsNil(o.Vol10DayAvg) {
		return nil, false
	}
	return o.Vol10DayAvg, true
}

// HasVol10DayAvg returns a boolean if a field has been set.
func (o *FundamentalInst) HasVol10DayAvg() bool {
	if o != nil && !IsNil(o.Vol10DayAvg) {
		return true
	}

	return false
}

// SetVol10DayAvg gets a reference to the given float64 and assigns it to the Vol10DayAvg field.
func (o *FundamentalInst) SetVol10DayAvg(v float64) {
	o.Vol10DayAvg = &v
}

// GetVol3MonthAvg returns the Vol3MonthAvg field value if set, zero value otherwise.
func (o *FundamentalInst) GetVol3MonthAvg() float64 {
	if o == nil || IsNil(o.Vol3MonthAvg) {
		var ret float64
		return ret
	}
	return *o.Vol3MonthAvg
}

// GetVol3MonthAvgOk returns a tuple with the Vol3MonthAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetVol3MonthAvgOk() (*float64, bool) {
	if o == nil || IsNil(o.Vol3MonthAvg) {
		return nil, false
	}
	return o.Vol3MonthAvg, true
}

// HasVol3MonthAvg returns a boolean if a field has been set.
func (o *FundamentalInst) HasVol3MonthAvg() bool {
	if o != nil && !IsNil(o.Vol3MonthAvg) {
		return true
	}

	return false
}

// SetVol3MonthAvg gets a reference to the given float64 and assigns it to the Vol3MonthAvg field.
func (o *FundamentalInst) SetVol3MonthAvg(v float64) {
	o.Vol3MonthAvg = &v
}

// GetAvg10DaysVolume returns the Avg10DaysVolume field value if set, zero value otherwise.
func (o *FundamentalInst) GetAvg10DaysVolume() int64 {
	if o == nil || IsNil(o.Avg10DaysVolume) {
		var ret int64
		return ret
	}
	return *o.Avg10DaysVolume
}

// GetAvg10DaysVolumeOk returns a tuple with the Avg10DaysVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetAvg10DaysVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.Avg10DaysVolume) {
		return nil, false
	}
	return o.Avg10DaysVolume, true
}

// HasAvg10DaysVolume returns a boolean if a field has been set.
func (o *FundamentalInst) HasAvg10DaysVolume() bool {
	if o != nil && !IsNil(o.Avg10DaysVolume) {
		return true
	}

	return false
}

// SetAvg10DaysVolume gets a reference to the given int64 and assigns it to the Avg10DaysVolume field.
func (o *FundamentalInst) SetAvg10DaysVolume(v int64) {
	o.Avg10DaysVolume = &v
}

// GetAvg1DayVolume returns the Avg1DayVolume field value if set, zero value otherwise.
func (o *FundamentalInst) GetAvg1DayVolume() int64 {
	if o == nil || IsNil(o.Avg1DayVolume) {
		var ret int64
		return ret
	}
	return *o.Avg1DayVolume
}

// GetAvg1DayVolumeOk returns a tuple with the Avg1DayVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetAvg1DayVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.Avg1DayVolume) {
		return nil, false
	}
	return o.Avg1DayVolume, true
}

// HasAvg1DayVolume returns a boolean if a field has been set.
func (o *FundamentalInst) HasAvg1DayVolume() bool {
	if o != nil && !IsNil(o.Avg1DayVolume) {
		return true
	}

	return false
}

// SetAvg1DayVolume gets a reference to the given int64 and assigns it to the Avg1DayVolume field.
func (o *FundamentalInst) SetAvg1DayVolume(v int64) {
	o.Avg1DayVolume = &v
}

// GetAvg3MonthVolume returns the Avg3MonthVolume field value if set, zero value otherwise.
func (o *FundamentalInst) GetAvg3MonthVolume() int64 {
	if o == nil || IsNil(o.Avg3MonthVolume) {
		var ret int64
		return ret
	}
	return *o.Avg3MonthVolume
}

// GetAvg3MonthVolumeOk returns a tuple with the Avg3MonthVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetAvg3MonthVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.Avg3MonthVolume) {
		return nil, false
	}
	return o.Avg3MonthVolume, true
}

// HasAvg3MonthVolume returns a boolean if a field has been set.
func (o *FundamentalInst) HasAvg3MonthVolume() bool {
	if o != nil && !IsNil(o.Avg3MonthVolume) {
		return true
	}

	return false
}

// SetAvg3MonthVolume gets a reference to the given int64 and assigns it to the Avg3MonthVolume field.
func (o *FundamentalInst) SetAvg3MonthVolume(v int64) {
	o.Avg3MonthVolume = &v
}

// GetDeclarationDate returns the DeclarationDate field value if set, zero value otherwise.
func (o *FundamentalInst) GetDeclarationDate() string {
	if o == nil || IsNil(o.DeclarationDate) {
		var ret string
		return ret
	}
	return *o.DeclarationDate
}

// GetDeclarationDateOk returns a tuple with the DeclarationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDeclarationDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeclarationDate) {
		return nil, false
	}
	return o.DeclarationDate, true
}

// HasDeclarationDate returns a boolean if a field has been set.
func (o *FundamentalInst) HasDeclarationDate() bool {
	if o != nil && !IsNil(o.DeclarationDate) {
		return true
	}

	return false
}

// SetDeclarationDate gets a reference to the given string and assigns it to the DeclarationDate field.
func (o *FundamentalInst) SetDeclarationDate(v string) {
	o.DeclarationDate = &v
}

// GetDividendFreq returns the DividendFreq field value if set, zero value otherwise.
func (o *FundamentalInst) GetDividendFreq() int32 {
	if o == nil || IsNil(o.DividendFreq) {
		var ret int32
		return ret
	}
	return *o.DividendFreq
}

// GetDividendFreqOk returns a tuple with the DividendFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDividendFreqOk() (*int32, bool) {
	if o == nil || IsNil(o.DividendFreq) {
		return nil, false
	}
	return o.DividendFreq, true
}

// HasDividendFreq returns a boolean if a field has been set.
func (o *FundamentalInst) HasDividendFreq() bool {
	if o != nil && !IsNil(o.DividendFreq) {
		return true
	}

	return false
}

// SetDividendFreq gets a reference to the given int32 and assigns it to the DividendFreq field.
func (o *FundamentalInst) SetDividendFreq(v int32) {
	o.DividendFreq = &v
}

// GetEps returns the Eps field value if set, zero value otherwise.
func (o *FundamentalInst) GetEps() float64 {
	if o == nil || IsNil(o.Eps) {
		var ret float64
		return ret
	}
	return *o.Eps
}

// GetEpsOk returns a tuple with the Eps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetEpsOk() (*float64, bool) {
	if o == nil || IsNil(o.Eps) {
		return nil, false
	}
	return o.Eps, true
}

// HasEps returns a boolean if a field has been set.
func (o *FundamentalInst) HasEps() bool {
	if o != nil && !IsNil(o.Eps) {
		return true
	}

	return false
}

// SetEps gets a reference to the given float64 and assigns it to the Eps field.
func (o *FundamentalInst) SetEps(v float64) {
	o.Eps = &v
}

// GetCorpactionDate returns the CorpactionDate field value if set, zero value otherwise.
func (o *FundamentalInst) GetCorpactionDate() string {
	if o == nil || IsNil(o.CorpactionDate) {
		var ret string
		return ret
	}
	return *o.CorpactionDate
}

// GetCorpactionDateOk returns a tuple with the CorpactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetCorpactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.CorpactionDate) {
		return nil, false
	}
	return o.CorpactionDate, true
}

// HasCorpactionDate returns a boolean if a field has been set.
func (o *FundamentalInst) HasCorpactionDate() bool {
	if o != nil && !IsNil(o.CorpactionDate) {
		return true
	}

	return false
}

// SetCorpactionDate gets a reference to the given string and assigns it to the CorpactionDate field.
func (o *FundamentalInst) SetCorpactionDate(v string) {
	o.CorpactionDate = &v
}

// GetDtnVolume returns the DtnVolume field value if set, zero value otherwise.
func (o *FundamentalInst) GetDtnVolume() int64 {
	if o == nil || IsNil(o.DtnVolume) {
		var ret int64
		return ret
	}
	return *o.DtnVolume
}

// GetDtnVolumeOk returns a tuple with the DtnVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetDtnVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.DtnVolume) {
		return nil, false
	}
	return o.DtnVolume, true
}

// HasDtnVolume returns a boolean if a field has been set.
func (o *FundamentalInst) HasDtnVolume() bool {
	if o != nil && !IsNil(o.DtnVolume) {
		return true
	}

	return false
}

// SetDtnVolume gets a reference to the given int64 and assigns it to the DtnVolume field.
func (o *FundamentalInst) SetDtnVolume(v int64) {
	o.DtnVolume = &v
}

// GetNextDividendPayDate returns the NextDividendPayDate field value if set, zero value otherwise.
func (o *FundamentalInst) GetNextDividendPayDate() string {
	if o == nil || IsNil(o.NextDividendPayDate) {
		var ret string
		return ret
	}
	return *o.NextDividendPayDate
}

// GetNextDividendPayDateOk returns a tuple with the NextDividendPayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetNextDividendPayDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextDividendPayDate) {
		return nil, false
	}
	return o.NextDividendPayDate, true
}

// HasNextDividendPayDate returns a boolean if a field has been set.
func (o *FundamentalInst) HasNextDividendPayDate() bool {
	if o != nil && !IsNil(o.NextDividendPayDate) {
		return true
	}

	return false
}

// SetNextDividendPayDate gets a reference to the given string and assigns it to the NextDividendPayDate field.
func (o *FundamentalInst) SetNextDividendPayDate(v string) {
	o.NextDividendPayDate = &v
}

// GetNextDividendDate returns the NextDividendDate field value if set, zero value otherwise.
func (o *FundamentalInst) GetNextDividendDate() string {
	if o == nil || IsNil(o.NextDividendDate) {
		var ret string
		return ret
	}
	return *o.NextDividendDate
}

// GetNextDividendDateOk returns a tuple with the NextDividendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetNextDividendDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextDividendDate) {
		return nil, false
	}
	return o.NextDividendDate, true
}

// HasNextDividendDate returns a boolean if a field has been set.
func (o *FundamentalInst) HasNextDividendDate() bool {
	if o != nil && !IsNil(o.NextDividendDate) {
		return true
	}

	return false
}

// SetNextDividendDate gets a reference to the given string and assigns it to the NextDividendDate field.
func (o *FundamentalInst) SetNextDividendDate(v string) {
	o.NextDividendDate = &v
}

// GetFundLeverageFactor returns the FundLeverageFactor field value if set, zero value otherwise.
func (o *FundamentalInst) GetFundLeverageFactor() float64 {
	if o == nil || IsNil(o.FundLeverageFactor) {
		var ret float64
		return ret
	}
	return *o.FundLeverageFactor
}

// GetFundLeverageFactorOk returns a tuple with the FundLeverageFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetFundLeverageFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.FundLeverageFactor) {
		return nil, false
	}
	return o.FundLeverageFactor, true
}

// HasFundLeverageFactor returns a boolean if a field has been set.
func (o *FundamentalInst) HasFundLeverageFactor() bool {
	if o != nil && !IsNil(o.FundLeverageFactor) {
		return true
	}

	return false
}

// SetFundLeverageFactor gets a reference to the given float64 and assigns it to the FundLeverageFactor field.
func (o *FundamentalInst) SetFundLeverageFactor(v float64) {
	o.FundLeverageFactor = &v
}

// GetFundStrategy returns the FundStrategy field value if set, zero value otherwise.
func (o *FundamentalInst) GetFundStrategy() string {
	if o == nil || IsNil(o.FundStrategy) {
		var ret string
		return ret
	}
	return *o.FundStrategy
}

// GetFundStrategyOk returns a tuple with the FundStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalInst) GetFundStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.FundStrategy) {
		return nil, false
	}
	return o.FundStrategy, true
}

// HasFundStrategy returns a boolean if a field has been set.
func (o *FundamentalInst) HasFundStrategy() bool {
	if o != nil && !IsNil(o.FundStrategy) {
		return true
	}

	return false
}

// SetFundStrategy gets a reference to the given string and assigns it to the FundStrategy field.
func (o *FundamentalInst) SetFundStrategy(v string) {
	o.FundStrategy = &v
}

func (o FundamentalInst) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalInst) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.High52) {
		toSerialize["high52"] = o.High52
	}
	if !IsNil(o.Low52) {
		toSerialize["low52"] = o.Low52
	}
	if !IsNil(o.DividendAmount) {
		toSerialize["dividendAmount"] = o.DividendAmount
	}
	if !IsNil(o.DividendYield) {
		toSerialize["dividendYield"] = o.DividendYield
	}
	if !IsNil(o.DividendDate) {
		toSerialize["dividendDate"] = o.DividendDate
	}
	if !IsNil(o.PeRatio) {
		toSerialize["peRatio"] = o.PeRatio
	}
	if !IsNil(o.PegRatio) {
		toSerialize["pegRatio"] = o.PegRatio
	}
	if !IsNil(o.PbRatio) {
		toSerialize["pbRatio"] = o.PbRatio
	}
	if !IsNil(o.PrRatio) {
		toSerialize["prRatio"] = o.PrRatio
	}
	if !IsNil(o.PcfRatio) {
		toSerialize["pcfRatio"] = o.PcfRatio
	}
	if !IsNil(o.GrossMarginTTM) {
		toSerialize["grossMarginTTM"] = o.GrossMarginTTM
	}
	if !IsNil(o.GrossMarginMRQ) {
		toSerialize["grossMarginMRQ"] = o.GrossMarginMRQ
	}
	if !IsNil(o.NetProfitMarginTTM) {
		toSerialize["netProfitMarginTTM"] = o.NetProfitMarginTTM
	}
	if !IsNil(o.NetProfitMarginMRQ) {
		toSerialize["netProfitMarginMRQ"] = o.NetProfitMarginMRQ
	}
	if !IsNil(o.OperatingMarginTTM) {
		toSerialize["operatingMarginTTM"] = o.OperatingMarginTTM
	}
	if !IsNil(o.OperatingMarginMRQ) {
		toSerialize["operatingMarginMRQ"] = o.OperatingMarginMRQ
	}
	if !IsNil(o.ReturnOnEquity) {
		toSerialize["returnOnEquity"] = o.ReturnOnEquity
	}
	if !IsNil(o.ReturnOnAssets) {
		toSerialize["returnOnAssets"] = o.ReturnOnAssets
	}
	if !IsNil(o.ReturnOnInvestment) {
		toSerialize["returnOnInvestment"] = o.ReturnOnInvestment
	}
	if !IsNil(o.QuickRatio) {
		toSerialize["quickRatio"] = o.QuickRatio
	}
	if !IsNil(o.CurrentRatio) {
		toSerialize["currentRatio"] = o.CurrentRatio
	}
	if !IsNil(o.InterestCoverage) {
		toSerialize["interestCoverage"] = o.InterestCoverage
	}
	if !IsNil(o.TotalDebtToCapital) {
		toSerialize["totalDebtToCapital"] = o.TotalDebtToCapital
	}
	if !IsNil(o.LtDebtToEquity) {
		toSerialize["ltDebtToEquity"] = o.LtDebtToEquity
	}
	if !IsNil(o.TotalDebtToEquity) {
		toSerialize["totalDebtToEquity"] = o.TotalDebtToEquity
	}
	if !IsNil(o.EpsTTM) {
		toSerialize["epsTTM"] = o.EpsTTM
	}
	if !IsNil(o.EpsChangePercentTTM) {
		toSerialize["epsChangePercentTTM"] = o.EpsChangePercentTTM
	}
	if !IsNil(o.EpsChangeYear) {
		toSerialize["epsChangeYear"] = o.EpsChangeYear
	}
	if !IsNil(o.EpsChange) {
		toSerialize["epsChange"] = o.EpsChange
	}
	if !IsNil(o.RevChangeYear) {
		toSerialize["revChangeYear"] = o.RevChangeYear
	}
	if !IsNil(o.RevChangeTTM) {
		toSerialize["revChangeTTM"] = o.RevChangeTTM
	}
	if !IsNil(o.RevChangeIn) {
		toSerialize["revChangeIn"] = o.RevChangeIn
	}
	if !IsNil(o.SharesOutstanding) {
		toSerialize["sharesOutstanding"] = o.SharesOutstanding
	}
	if !IsNil(o.MarketCapFloat) {
		toSerialize["marketCapFloat"] = o.MarketCapFloat
	}
	if !IsNil(o.MarketCap) {
		toSerialize["marketCap"] = o.MarketCap
	}
	if !IsNil(o.BookValuePerShare) {
		toSerialize["bookValuePerShare"] = o.BookValuePerShare
	}
	if !IsNil(o.ShortIntToFloat) {
		toSerialize["shortIntToFloat"] = o.ShortIntToFloat
	}
	if !IsNil(o.ShortIntDayToCover) {
		toSerialize["shortIntDayToCover"] = o.ShortIntDayToCover
	}
	if !IsNil(o.DivGrowthRate3Year) {
		toSerialize["divGrowthRate3Year"] = o.DivGrowthRate3Year
	}
	if !IsNil(o.DividendPayAmount) {
		toSerialize["dividendPayAmount"] = o.DividendPayAmount
	}
	if !IsNil(o.DividendPayDate) {
		toSerialize["dividendPayDate"] = o.DividendPayDate
	}
	if !IsNil(o.Beta) {
		toSerialize["beta"] = o.Beta
	}
	if !IsNil(o.Vol1DayAvg) {
		toSerialize["vol1DayAvg"] = o.Vol1DayAvg
	}
	if !IsNil(o.Vol10DayAvg) {
		toSerialize["vol10DayAvg"] = o.Vol10DayAvg
	}
	if !IsNil(o.Vol3MonthAvg) {
		toSerialize["vol3MonthAvg"] = o.Vol3MonthAvg
	}
	if !IsNil(o.Avg10DaysVolume) {
		toSerialize["avg10DaysVolume"] = o.Avg10DaysVolume
	}
	if !IsNil(o.Avg1DayVolume) {
		toSerialize["avg1DayVolume"] = o.Avg1DayVolume
	}
	if !IsNil(o.Avg3MonthVolume) {
		toSerialize["avg3MonthVolume"] = o.Avg3MonthVolume
	}
	if !IsNil(o.DeclarationDate) {
		toSerialize["declarationDate"] = o.DeclarationDate
	}
	if !IsNil(o.DividendFreq) {
		toSerialize["dividendFreq"] = o.DividendFreq
	}
	if !IsNil(o.Eps) {
		toSerialize["eps"] = o.Eps
	}
	if !IsNil(o.CorpactionDate) {
		toSerialize["corpactionDate"] = o.CorpactionDate
	}
	if !IsNil(o.DtnVolume) {
		toSerialize["dtnVolume"] = o.DtnVolume
	}
	if !IsNil(o.NextDividendPayDate) {
		toSerialize["nextDividendPayDate"] = o.NextDividendPayDate
	}
	if !IsNil(o.NextDividendDate) {
		toSerialize["nextDividendDate"] = o.NextDividendDate
	}
	if !IsNil(o.FundLeverageFactor) {
		toSerialize["fundLeverageFactor"] = o.FundLeverageFactor
	}
	if !IsNil(o.FundStrategy) {
		toSerialize["fundStrategy"] = o.FundStrategy
	}
	return toSerialize, nil
}

type NullableFundamentalInst struct {
	value *FundamentalInst
	isSet bool
}

func (v NullableFundamentalInst) Get() *FundamentalInst {
	return v.value
}

func (v *NullableFundamentalInst) Set(val *FundamentalInst) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalInst) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalInst) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalInst(val *FundamentalInst) *NullableFundamentalInst {
	return &NullableFundamentalInst{value: val, isSet: true}
}

func (v NullableFundamentalInst) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalInst) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


