/*
Market Data

Trader API - Market data

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the QuoteError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteError{}

// QuoteError Partial or Custom errors per request
type QuoteError struct {
	// list of invalid cusips from request
	InvalidCusips []string `json:"invalidCusips,omitempty"`
	// list of invalid SSIDs from request
	InvalidSSIDs []int64 `json:"invalidSSIDs,omitempty"`
	// list of invalid symbols from request
	InvalidSymbols []string `json:"invalidSymbols,omitempty"`
}

// NewQuoteError instantiates a new QuoteError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteError() *QuoteError {
	this := QuoteError{}
	return &this
}

// NewQuoteErrorWithDefaults instantiates a new QuoteError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteErrorWithDefaults() *QuoteError {
	this := QuoteError{}
	return &this
}

// GetInvalidCusips returns the InvalidCusips field value if set, zero value otherwise.
func (o *QuoteError) GetInvalidCusips() []string {
	if o == nil || IsNil(o.InvalidCusips) {
		var ret []string
		return ret
	}
	return o.InvalidCusips
}

// GetInvalidCusipsOk returns a tuple with the InvalidCusips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteError) GetInvalidCusipsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvalidCusips) {
		return nil, false
	}
	return o.InvalidCusips, true
}

// HasInvalidCusips returns a boolean if a field has been set.
func (o *QuoteError) HasInvalidCusips() bool {
	if o != nil && !IsNil(o.InvalidCusips) {
		return true
	}

	return false
}

// SetInvalidCusips gets a reference to the given []string and assigns it to the InvalidCusips field.
func (o *QuoteError) SetInvalidCusips(v []string) {
	o.InvalidCusips = v
}

// GetInvalidSSIDs returns the InvalidSSIDs field value if set, zero value otherwise.
func (o *QuoteError) GetInvalidSSIDs() []int64 {
	if o == nil || IsNil(o.InvalidSSIDs) {
		var ret []int64
		return ret
	}
	return o.InvalidSSIDs
}

// GetInvalidSSIDsOk returns a tuple with the InvalidSSIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteError) GetInvalidSSIDsOk() ([]int64, bool) {
	if o == nil || IsNil(o.InvalidSSIDs) {
		return nil, false
	}
	return o.InvalidSSIDs, true
}

// HasInvalidSSIDs returns a boolean if a field has been set.
func (o *QuoteError) HasInvalidSSIDs() bool {
	if o != nil && !IsNil(o.InvalidSSIDs) {
		return true
	}

	return false
}

// SetInvalidSSIDs gets a reference to the given []int64 and assigns it to the InvalidSSIDs field.
func (o *QuoteError) SetInvalidSSIDs(v []int64) {
	o.InvalidSSIDs = v
}

// GetInvalidSymbols returns the InvalidSymbols field value if set, zero value otherwise.
func (o *QuoteError) GetInvalidSymbols() []string {
	if o == nil || IsNil(o.InvalidSymbols) {
		var ret []string
		return ret
	}
	return o.InvalidSymbols
}

// GetInvalidSymbolsOk returns a tuple with the InvalidSymbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteError) GetInvalidSymbolsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvalidSymbols) {
		return nil, false
	}
	return o.InvalidSymbols, true
}

// HasInvalidSymbols returns a boolean if a field has been set.
func (o *QuoteError) HasInvalidSymbols() bool {
	if o != nil && !IsNil(o.InvalidSymbols) {
		return true
	}

	return false
}

// SetInvalidSymbols gets a reference to the given []string and assigns it to the InvalidSymbols field.
func (o *QuoteError) SetInvalidSymbols(v []string) {
	o.InvalidSymbols = v
}

func (o QuoteError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InvalidCusips) {
		toSerialize["invalidCusips"] = o.InvalidCusips
	}
	if !IsNil(o.InvalidSSIDs) {
		toSerialize["invalidSSIDs"] = o.InvalidSSIDs
	}
	if !IsNil(o.InvalidSymbols) {
		toSerialize["invalidSymbols"] = o.InvalidSymbols
	}
	return toSerialize, nil
}

type NullableQuoteError struct {
	value *QuoteError
	isSet bool
}

func (v NullableQuoteError) Get() *QuoteError {
	return v.value
}

func (v *NullableQuoteError) Set(val *QuoteError) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteError) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteError(val *QuoteError) *NullableQuoteError {
	return &NullableQuoteError{value: val, isSet: true}
}

func (v NullableQuoteError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


